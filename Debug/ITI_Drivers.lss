
ITI_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006718  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00006718  000067ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080019a  0080019a  000068e6  2**0
                  ALLOC
  3 .stab         00006bb8  00000000  00000000  000068e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b0a  00000000  00000000  0000d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ffaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0001014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0001033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00012747  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00013acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00014ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00014e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001515a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015ac8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__vector_1>
       8:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__vector_2>
       c:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__vector_10>
      2c:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_13>
      38:	0c 94 95 08 	jmp	0x112a	; 0x112a <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f7 e6       	ldi	r31, 0x67	; 103
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 32 	call	0x65da	; 0x65da <main>
      8a:	0c 94 8a 33 	jmp	0x6714	; 0x6714 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 53 33 	jmp	0x66a6	; 0x66a6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6f 33 	jmp	0x66de	; 0x66de <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5f 33 	jmp	0x66be	; 0x66be <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5f 33 	jmp	0x66be	; 0x66be <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 53 33 	jmp	0x66a6	; 0x66a6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6f 33 	jmp	0x66de	; 0x66de <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5b 33 	jmp	0x66b6	; 0x66b6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e6       	ldi	r22, 0x69	; 105
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 77 33 	jmp	0x66ee	; 0x66ee <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5f 33 	jmp	0x66be	; 0x66be <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5f 33 	jmp	0x66be	; 0x66be <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5f 33 	jmp	0x66be	; 0x66be <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 63 33 	jmp	0x66c6	; 0x66c6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7f 33 	jmp	0x66fe	; 0x66fe <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5b 33 	jmp	0x66b6	; 0x66b6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 77 33 	jmp	0x66ee	; 0x66ee <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 58       	subi	r30, 0x8F	; 143
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <WDT_voidEnable>:
#include"WDT_Private.h"



void WDT_voidEnable(WDT_Prescaler Copy_u8Prescaler)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01

	WDTCR_REG &=0xf8;
     e3a:	a1 e4       	ldi	r26, 0x41	; 65
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e1 e4       	ldi	r30, 0x41	; 65
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	88 7f       	andi	r24, 0xF8	; 248
     e46:	8c 93       	st	X, r24
	WDTCR_REG|=Copy_u8Prescaler;
     e48:	a1 e4       	ldi	r26, 0x41	; 65
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e1 e4       	ldi	r30, 0x41	; 65
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	90 81       	ld	r25, Z
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	89 2b       	or	r24, r25
     e56:	8c 93       	st	X, r24

	SET_BIT(WDTCR_REG,3);
     e58:	a1 e4       	ldi	r26, 0x41	; 65
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e1 e4       	ldi	r30, 0x41	; 65
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	88 60       	ori	r24, 0x08	; 8
     e64:	8c 93       	st	X, r24


}
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <WDT_voidDisable>:
void WDT_voidDisable()
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62

	WDTCR_REG=(2<<3);
     e76:	e1 e4       	ldi	r30, 0x41	; 65
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 e1       	ldi	r24, 0x10	; 16
     e7c:	80 83       	st	Z, r24


}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <UART_voidInit>:

void __vector_13(void) __attribute__((signal));
void __vector_14(void) __attribute__((signal));

void UART_voidInit(UART_Parity_Mode Parity_Mode,UART_Stop_Bit Stop_bits,UART_Data_size Data_size,u16 Baud_Rate)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	27 97       	sbiw	r28, 0x07	; 7
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	8b 83       	std	Y+3, r24	; 0x03
     e9a:	6c 83       	std	Y+4, r22	; 0x04
     e9c:	4d 83       	std	Y+5, r20	; 0x05
     e9e:	3f 83       	std	Y+7, r19	; 0x07
     ea0:	2e 83       	std	Y+6, r18	; 0x06
	u16 BAUD_PRESCALE =(((8000000 / (Baud_Rate * 16UL))) - 1);
     ea2:	8e 81       	ldd	r24, Y+6	; 0x06
     ea4:	9f 81       	ldd	r25, Y+7	; 0x07
     ea6:	cc 01       	movw	r24, r24
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	aa 1f       	adc	r26, r26
     eb2:	bb 1f       	adc	r27, r27
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	aa 1f       	adc	r26, r26
     eba:	bb 1f       	adc	r27, r27
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	aa 1f       	adc	r26, r26
     ec2:	bb 1f       	adc	r27, r27
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	aa 1f       	adc	r26, r26
     eca:	bb 1f       	adc	r27, r27
     ecc:	9c 01       	movw	r18, r24
     ece:	ad 01       	movw	r20, r26
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	92 e1       	ldi	r25, 0x12	; 18
     ed4:	aa e7       	ldi	r26, 0x7A	; 122
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	bc 01       	movw	r22, r24
     eda:	cd 01       	movw	r24, r26
     edc:	0e 94 31 33 	call	0x6662	; 0x6662 <__udivmodsi4>
     ee0:	da 01       	movw	r26, r20
     ee2:	c9 01       	movw	r24, r18
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01


	/* Enable receiver and transmitter */
	SET_BIT(UCSRB_REG,TXEN);
     eea:	aa e2       	ldi	r26, 0x2A	; 42
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e2       	ldi	r30, 0x2A	; 42
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 60       	ori	r24, 0x08	; 8
     ef6:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,RXEN);
     ef8:	aa e2       	ldi	r26, 0x2A	; 42
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ea e2       	ldi	r30, 0x2A	; 42
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	8c 93       	st	X, r24


	/* Set frame format: data,parity ,stop bit */
	CLR_BIT(UCSRC_REG,UMSEL);  //ASync
     f06:	a0 e4       	ldi	r26, 0x40	; 64
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e0 e4       	ldi	r30, 0x40	; 64
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8f 7b       	andi	r24, 0xBF	; 191
     f12:	8c 93       	st	X, r24

	/*parity Mode*/
	UCSRC_REG &= 0xCF;
     f14:	a0 e4       	ldi	r26, 0x40	; 64
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e0 e4       	ldi	r30, 0x40	; 64
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 7c       	andi	r24, 0xCF	; 207
     f20:	8c 93       	st	X, r24
	UCSRC_REG |= (Parity_Mode<<4);
     f22:	a0 e4       	ldi	r26, 0x40	; 64
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e0 e4       	ldi	r30, 0x40	; 64
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	28 2f       	mov	r18, r24
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	82 95       	swap	r24
     f36:	92 95       	swap	r25
     f38:	90 7f       	andi	r25, 0xF0	; 240
     f3a:	98 27       	eor	r25, r24
     f3c:	80 7f       	andi	r24, 0xF0	; 240
     f3e:	98 27       	eor	r25, r24
     f40:	82 2b       	or	r24, r18
     f42:	8c 93       	st	X, r24

	/*Stop Bits*/
	UCSRC_REG &= 0xF7;
     f44:	a0 e4       	ldi	r26, 0x40	; 64
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e0 e4       	ldi	r30, 0x40	; 64
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	87 7f       	andi	r24, 0xF7	; 247
     f50:	8c 93       	st	X, r24
	UCSRC_REG |= (Stop_bits<<3);
     f52:	a0 e4       	ldi	r26, 0x40	; 64
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e0 e4       	ldi	r30, 0x40	; 64
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	82 2b       	or	r24, r18
     f72:	8c 93       	st	X, r24

	/*Data Size*/
	UCSRC_REG &= 0xF9;
     f74:	a0 e4       	ldi	r26, 0x40	; 64
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e0 e4       	ldi	r30, 0x40	; 64
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	89 7f       	andi	r24, 0xF9	; 249
     f80:	8c 93       	st	X, r24
	UCSRC_REG |= (Data_size<<1);
     f82:	a0 e4       	ldi	r26, 0x40	; 64
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e0 e4       	ldi	r30, 0x40	; 64
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	28 2f       	mov	r18, r24
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	82 2b       	or	r24, r18
     f9a:	8c 93       	st	X, r24
	UCSRB_REG &= 0xFB;
     f9c:	aa e2       	ldi	r26, 0x2A	; 42
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ea e2       	ldi	r30, 0x2A	; 42
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8b 7f       	andi	r24, 0xFB	; 251
     fa8:	8c 93       	st	X, r24
	UCSRB_REG |= (Data_size);
     faa:	aa e2       	ldi	r26, 0x2A	; 42
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ea e2       	ldi	r30, 0x2A	; 42
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	90 81       	ld	r25, Z
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	89 2b       	or	r24, r25
     fb8:	8c 93       	st	X, r24


	/* Set baud rate */
	UBRRH_REG= (BAUD_PRESCALE>>8);
     fba:	e0 e4       	ldi	r30, 0x40	; 64
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	89 2f       	mov	r24, r25
     fc4:	99 27       	eor	r25, r25
     fc6:	80 83       	st	Z, r24
	UBRRL_REG=BAUD_PRESCALE;
     fc8:	e9 e2       	ldi	r30, 0x29	; 41
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	80 83       	st	Z, r24



}
     fd0:	27 96       	adiw	r28, 0x07	; 7
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <UART_voidSendDataSync>:
void UART_voidSendDataSync(u8 Copy_u8UARTData)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(GET_BIT(UCSRA_REG,UDRE)==0);
     fee:	eb e2       	ldi	r30, 0x2B	; 43
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	82 95       	swap	r24
     ff6:	86 95       	lsr	r24
     ff8:	87 70       	andi	r24, 0x07	; 7
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	81 70       	andi	r24, 0x01	; 1
    1000:	90 70       	andi	r25, 0x00	; 0
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	a1 f3       	breq	.-24     	; 0xfee <UART_voidSendDataSync+0xc>
	/* Put data into buffer, sends the data */
	UDR_REG = Copy_u8UARTData;
    1006:	ec e2       	ldi	r30, 0x2C	; 44
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	80 83       	st	Z, r24

}
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <UART_u8ReciveDataSync>:
u8 UART_u8ReciveDataSync()
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA_REG,RXC)==0);
    101e:	eb e2       	ldi	r30, 0x2B	; 43
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	88 23       	and	r24, r24
    1026:	dc f7       	brge	.-10     	; 0x101e <UART_u8ReciveDataSync+0x8>


	return UDR_REG;
    1028:	ec e2       	ldi	r30, 0x2C	; 44
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <UART_voidSendStringSync>:
void UART_voidSendStringSync(u8 *str)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <UART_voidSendStringSync+0x6>
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	9b 83       	std	Y+3, r25	; 0x03
    1042:	8a 83       	std	Y+2, r24	; 0x02

	u8 i=0;
    1044:	19 82       	std	Y+1, r1	; 0x01
    1046:	0e c0       	rjmp	.+28     	; 0x1064 <UART_voidSendStringSync+0x30>


	while(str[i]!='\0')
	{
		UART_voidSendDataSync(str[i]);
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	fc 01       	movw	r30, r24
    1054:	e2 0f       	add	r30, r18
    1056:	f3 1f       	adc	r31, r19
    1058:	80 81       	ld	r24, Z
    105a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <UART_voidSendDataSync>
		i++;
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	89 83       	std	Y+1, r24	; 0x01
{

	u8 i=0;


	while(str[i]!='\0')
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	9b 81       	ldd	r25, Y+3	; 0x03
    106e:	fc 01       	movw	r30, r24
    1070:	e2 0f       	add	r30, r18
    1072:	f3 1f       	adc	r31, r19
    1074:	80 81       	ld	r24, Z
    1076:	88 23       	and	r24, r24
    1078:	39 f7       	brne	.-50     	; 0x1048 <UART_voidSendStringSync+0x14>
	{
		UART_voidSendDataSync(str[i]);
		i++;
	}

}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <UART_voidreceiveStringSync>:
void UART_voidreceiveStringSync(u8  *str)
{
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <UART_voidreceiveStringSync+0xa>
    1090:	0f 92       	push	r0
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	9b 83       	std	Y+3, r25	; 0x03
    1098:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    109a:	19 82       	std	Y+1, r1	; 0x01
    109c:	0f c0       	rjmp	.+30     	; 0x10bc <UART_voidreceiveStringSync+0x36>

	while(str[i]!='.')
	{

		str[i]=UART_u8ReciveDataSync();
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	9b 81       	ldd	r25, Y+3	; 0x03
    10a8:	8c 01       	movw	r16, r24
    10aa:	02 0f       	add	r16, r18
    10ac:	13 1f       	adc	r17, r19
    10ae:	0e 94 0b 08 	call	0x1016	; 0x1016 <UART_u8ReciveDataSync>
    10b2:	f8 01       	movw	r30, r16
    10b4:	80 83       	st	Z, r24
		i++;
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	89 83       	std	Y+1, r24	; 0x01
}
void UART_voidreceiveStringSync(u8  *str)
{
	u8 i=0;

	while(str[i]!='.')
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	fc 01       	movw	r30, r24
    10c8:	e2 0f       	add	r30, r18
    10ca:	f3 1f       	adc	r31, r19
    10cc:	80 81       	ld	r24, Z
    10ce:	8e 32       	cpi	r24, 0x2E	; 46
    10d0:	31 f7       	brne	.-52     	; 0x109e <UART_voidreceiveStringSync+0x18>
	{

		str[i]=UART_u8ReciveDataSync();
		i++;
	}
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	08 95       	ret

000010e2 <UART_voidSendDataASync>:

void UART_voidSendDataASync(u8 Copy_u8UARTData)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	0f 92       	push	r0
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01

	/*Enable PIE*/
	SET_BIT(UCSRB_REG,UDRIE);
    10ee:	aa e2       	ldi	r26, 0x2A	; 42
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ea e2       	ldi	r30, 0x2A	; 42
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	80 62       	ori	r24, 0x20	; 32
    10fa:	8c 93       	st	X, r24

	/* Put data into buffer, sends the data */
	Dummy_SendData = Copy_u8UARTData;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	80 93 9a 01 	sts	0x019A, r24
}
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <UART_u8ReciveDataASync>:
u8 UART_u8ReciveDataASync()
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62

	/*Enable PIE*/
	SET_BIT(UCSRB_REG,RXCIE);
    1112:	aa e2       	ldi	r26, 0x2A	; 42
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ea e2       	ldi	r30, 0x2A	; 42
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	80 68       	ori	r24, 0x80	; 128
    111e:	8c 93       	st	X, r24
return Dummy_RecieveData;
    1120:	80 91 a5 01 	lds	r24, 0x01A5



}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <__vector_14>:

void __vector_14(void)
{
    112a:	1f 92       	push	r1
    112c:	0f 92       	push	r0
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	0f 92       	push	r0
    1132:	11 24       	eor	r1, r1
    1134:	8f 93       	push	r24
    1136:	af 93       	push	r26
    1138:	bf 93       	push	r27
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62


	UDR_REG = Dummy_SendData;
    1146:	ec e2       	ldi	r30, 0x2C	; 44
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 91 9a 01 	lds	r24, 0x019A
    114e:	80 83       	st	Z, r24
	CLR_BIT(UCSRB_REG,UDRIE);
    1150:	aa e2       	ldi	r26, 0x2A	; 42
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ea e2       	ldi	r30, 0x2A	; 42
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8f 7d       	andi	r24, 0xDF	; 223
    115c:	8c 93       	st	X, r24

}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	8f 91       	pop	r24
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_13>:
void __vector_13(void)
{
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	8f 93       	push	r24
    1182:	ef 93       	push	r30
    1184:	ff 93       	push	r31
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62

	Dummy_RecieveData = UDR_REG;
    118e:	ec e2       	ldi	r30, 0x2C	; 44
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	80 93 a5 01 	sts	0x01A5, r24
}
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	8f 91       	pop	r24
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <T1_voidInit>:
void __vector_7	(void)  __attribute((signal));



void T1_voidInit(TIMER1_CONFIG *Ptr_Str)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <T1_voidInit+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <T1_voidInit+0x8>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <T1_voidInit+0xa>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
	if((Ptr_Str ->T1_WF_MODE ==T1_NORMAL_MODE) ||(Ptr_Str ->T1_WF_MODE ==T1_CTC1_MODE)||(Ptr_Str ->T1_WF_MODE ==T1_CTC2_MODE))
    11be:	e9 81       	ldd	r30, Y+1	; 0x01
    11c0:	fa 81       	ldd	r31, Y+2	; 0x02
    11c2:	80 81       	ld	r24, Z
    11c4:	88 23       	and	r24, r24
    11c6:	51 f0       	breq	.+20     	; 0x11dc <T1_voidInit+0x30>
    11c8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ca:	fa 81       	ldd	r31, Y+2	; 0x02
    11cc:	80 81       	ld	r24, Z
    11ce:	84 30       	cpi	r24, 0x04	; 4
    11d0:	29 f0       	breq	.+10     	; 0x11dc <T1_voidInit+0x30>
    11d2:	e9 81       	ldd	r30, Y+1	; 0x01
    11d4:	fa 81       	ldd	r31, Y+2	; 0x02
    11d6:	80 81       	ld	r24, Z
    11d8:	8c 30       	cpi	r24, 0x0C	; 12
    11da:	79 f4       	brne	.+30     	; 0x11fa <T1_voidInit+0x4e>
	{
		SET_BIT(TCCR1A_REG,FOC1A);
    11dc:	af e4       	ldi	r26, 0x4F	; 79
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ef e4       	ldi	r30, 0x4F	; 79
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	88 60       	ori	r24, 0x08	; 8
    11e8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,FOC1B);
    11ea:	af e4       	ldi	r26, 0x4F	; 79
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ef e4       	ldi	r30, 0x4F	; 79
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	84 60       	ori	r24, 0x04	; 4
    11f6:	8c 93       	st	X, r24
    11f8:	0e c0       	rjmp	.+28     	; 0x1216 <T1_voidInit+0x6a>
	}else
	{
		CLR_BIT(TCCR1A_REG,FOC1B);
    11fa:	af e4       	ldi	r26, 0x4F	; 79
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ef e4       	ldi	r30, 0x4F	; 79
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8b 7f       	andi	r24, 0xFB	; 251
    1206:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,FOC1A);
    1208:	af e4       	ldi	r26, 0x4F	; 79
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	ef e4       	ldi	r30, 0x4F	; 79
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	87 7f       	andi	r24, 0xF7	; 247
    1214:	8c 93       	st	X, r24


	}

	//Select Operating Wave Form Mode
	TCCR1A_REG&=0xFC;
    1216:	af e4       	ldi	r26, 0x4F	; 79
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ef e4       	ldi	r30, 0x4F	; 79
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8c 7f       	andi	r24, 0xFC	; 252
    1222:	8c 93       	st	X, r24
	TCCR1A_REG|=Ptr_Str->T1_WF_MODE;
    1224:	af e4       	ldi	r26, 0x4F	; 79
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ef e4       	ldi	r30, 0x4F	; 79
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	90 81       	ld	r25, Z
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	80 81       	ld	r24, Z
    1234:	89 2b       	or	r24, r25
    1236:	8c 93       	st	X, r24
	TCCR1B_REG &=0xE7;
    1238:	ae e4       	ldi	r26, 0x4E	; 78
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ee e4       	ldi	r30, 0x4E	; 78
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	87 7e       	andi	r24, 0xE7	; 231
    1244:	8c 93       	st	X, r24
	TCCR1B_REG|=((Ptr_Str->T1_WF_MODE)<<1);
    1246:	ae e4       	ldi	r26, 0x4E	; 78
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	ee e4       	ldi	r30, 0x4E	; 78
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	28 2f       	mov	r18, r24
    1252:	e9 81       	ldd	r30, Y+1	; 0x01
    1254:	fa 81       	ldd	r31, Y+2	; 0x02
    1256:	80 81       	ld	r24, Z
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	82 2b       	or	r24, r18
    1262:	8c 93       	st	X, r24



	//Select CLock
	TCCR1B_REG &=0xf8;
    1264:	ae e4       	ldi	r26, 0x4E	; 78
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ee e4       	ldi	r30, 0x4E	; 78
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	88 7f       	andi	r24, 0xF8	; 248
    1270:	8c 93       	st	X, r24
	TCCR1B_REG |= (Ptr_Str->T1_CLOCK_MODE);
    1272:	ae e4       	ldi	r26, 0x4E	; 78
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ee e4       	ldi	r30, 0x4E	; 78
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	90 81       	ld	r25, Z
    127c:	e9 81       	ldd	r30, Y+1	; 0x01
    127e:	fa 81       	ldd	r31, Y+2	; 0x02
    1280:	80 85       	ldd	r24, Z+8	; 0x08
    1282:	89 2b       	or	r24, r25
    1284:	8c 93       	st	X, r24
	//Select OC1A Mode


	//Choose Polling Or Interrupt
	//Enable PIE
	switch(Ptr_Str->T1_TECHNIQUE)
    1286:	e9 81       	ldd	r30, Y+1	; 0x01
    1288:	fa 81       	ldd	r31, Y+2	; 0x02
    128a:	81 85       	ldd	r24, Z+9	; 0x09
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3e 83       	std	Y+6, r19	; 0x06
    1292:	2d 83       	std	Y+5, r18	; 0x05
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	9e 81       	ldd	r25, Y+6	; 0x06
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	09 f4       	brne	.+2      	; 0x129e <T1_voidInit+0xf2>
    129c:	3f c0       	rjmp	.+126    	; 0x131c <T1_voidInit+0x170>
    129e:	2d 81       	ldd	r18, Y+5	; 0x05
    12a0:	3e 81       	ldd	r19, Y+6	; 0x06
    12a2:	21 30       	cpi	r18, 0x01	; 1
    12a4:	31 05       	cpc	r19, r1
    12a6:	d1 f5       	brne	.+116    	; 0x131c <T1_voidInit+0x170>
	{
	case T1_Polling:
		break;

	case T1_Interrupt:
		switch(Ptr_Str->T1_WF_MODE)
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	80 81       	ld	r24, Z
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3c 83       	std	Y+4, r19	; 0x04
    12b4:	2b 83       	std	Y+3, r18	; 0x03
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	91 05       	cpc	r25, r1
    12be:	89 f0       	breq	.+34     	; 0x12e2 <T1_voidInit+0x136>
    12c0:	2b 81       	ldd	r18, Y+3	; 0x03
    12c2:	3c 81       	ldd	r19, Y+4	; 0x04
    12c4:	2c 30       	cpi	r18, 0x0C	; 12
    12c6:	31 05       	cpc	r19, r1
    12c8:	d9 f0       	breq	.+54     	; 0x1300 <T1_voidInit+0x154>
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	29 f5       	brne	.+74     	; 0x131c <T1_voidInit+0x170>
		{
		case T1_NORMAL_MODE:
			SET_BIT(TIMSK_REG,TOIE1);
    12d2:	a9 e5       	ldi	r26, 0x59	; 89
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e9 e5       	ldi	r30, 0x59	; 89
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	84 60       	ori	r24, 0x04	; 4
    12de:	8c 93       	st	X, r24
    12e0:	1d c0       	rjmp	.+58     	; 0x131c <T1_voidInit+0x170>
			break;

		case T1_CTC1_MODE:
			SET_BIT(TIMSK_REG,OCIE1B);
    12e2:	a9 e5       	ldi	r26, 0x59	; 89
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e9 e5       	ldi	r30, 0x59	; 89
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	88 60       	ori	r24, 0x08	; 8
    12ee:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,OCIE1A);
    12f0:	a9 e5       	ldi	r26, 0x59	; 89
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e9 e5       	ldi	r30, 0x59	; 89
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 61       	ori	r24, 0x10	; 16
    12fc:	8c 93       	st	X, r24
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <T1_voidInit+0x170>
			break;

		case T1_CTC2_MODE:
			SET_BIT(TIMSK_REG,OCIE1B);
    1300:	a9 e5       	ldi	r26, 0x59	; 89
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e9 e5       	ldi	r30, 0x59	; 89
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	88 60       	ori	r24, 0x08	; 8
    130c:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,OCIE1A);
    130e:	a9 e5       	ldi	r26, 0x59	; 89
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e9 e5       	ldi	r30, 0x59	; 89
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	80 61       	ori	r24, 0x10	; 16
    131a:	8c 93       	st	X, r24
		}
		break;
	}


}
    131c:	26 96       	adiw	r28, 0x06	; 6
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <T1_voidStartTimer>:
void T1_voidStartTimer(TIMER1_CONFIG *Ptr_Str)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	2a 97       	sbiw	r28, 0x0a	; 10
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01

	switch(Ptr_Str->T1_Channel)
    1346:	e9 81       	ldd	r30, Y+1	; 0x01
    1348:	fa 81       	ldd	r31, Y+2	; 0x02
    134a:	81 81       	ldd	r24, Z+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3a 87       	std	Y+10, r19	; 0x0a
    1352:	29 87       	std	Y+9, r18	; 0x09
    1354:	89 85       	ldd	r24, Y+9	; 0x09
    1356:	9a 85       	ldd	r25, Y+10	; 0x0a
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	39 f0       	breq	.+14     	; 0x136a <T1_voidStartTimer+0x3c>
    135c:	29 85       	ldd	r18, Y+9	; 0x09
    135e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1360:	21 30       	cpi	r18, 0x01	; 1
    1362:	31 05       	cpc	r19, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <T1_voidStartTimer+0x3a>
    1366:	e4 c0       	rjmp	.+456    	; 0x1530 <T1_voidStartTimer+0x202>
    1368:	b4 c1       	rjmp	.+872    	; 0x16d2 <T1_voidStartTimer+0x3a4>
	{

	case T1_ChannelA:

		switch(Ptr_Str->T1_WF_MODE)
    136a:	e9 81       	ldd	r30, Y+1	; 0x01
    136c:	fa 81       	ldd	r31, Y+2	; 0x02
    136e:	80 81       	ld	r24, Z
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	38 87       	std	Y+8, r19	; 0x08
    1376:	2f 83       	std	Y+7, r18	; 0x07
    1378:	8f 81       	ldd	r24, Y+7	; 0x07
    137a:	98 85       	ldd	r25, Y+8	; 0x08
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	91 05       	cpc	r25, r1
    1380:	d9 f1       	breq	.+118    	; 0x13f8 <T1_voidStartTimer+0xca>
    1382:	2f 81       	ldd	r18, Y+7	; 0x07
    1384:	38 85       	ldd	r19, Y+8	; 0x08
    1386:	25 30       	cpi	r18, 0x05	; 5
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <T1_voidStartTimer+0x68>
    138c:	8f 81       	ldd	r24, Y+7	; 0x07
    138e:	98 85       	ldd	r25, Y+8	; 0x08
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	71 f0       	breq	.+28     	; 0x13b0 <T1_voidStartTimer+0x82>
    1394:	9e c1       	rjmp	.+828    	; 0x16d2 <T1_voidStartTimer+0x3a4>
    1396:	2f 81       	ldd	r18, Y+7	; 0x07
    1398:	38 85       	ldd	r19, Y+8	; 0x08
    139a:	2a 30       	cpi	r18, 0x0A	; 10
    139c:	31 05       	cpc	r19, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <T1_voidStartTimer+0x74>
    13a0:	79 c0       	rjmp	.+242    	; 0x1494 <T1_voidStartTimer+0x166>
    13a2:	8f 81       	ldd	r24, Y+7	; 0x07
    13a4:	98 85       	ldd	r25, Y+8	; 0x08
    13a6:	8e 30       	cpi	r24, 0x0E	; 14
    13a8:	91 05       	cpc	r25, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <T1_voidStartTimer+0x80>
    13ac:	9a c0       	rjmp	.+308    	; 0x14e2 <T1_voidStartTimer+0x1b4>
    13ae:	91 c1       	rjmp	.+802    	; 0x16d2 <T1_voidStartTimer+0x3a4>
		{
		case T1_NORMAL_MODE:
			TCNT1_REG	= Ptr_Str->T1_Preload_value;
    13b0:	ac e4       	ldi	r26, 0x4C	; 76
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e9 81       	ldd	r30, Y+1	; 0x01
    13b6:	fa 81       	ldd	r31, Y+2	; 0x02
    13b8:	82 85       	ldd	r24, Z+10	; 0x0a
    13ba:	93 85       	ldd	r25, Z+11	; 0x0b
    13bc:	11 96       	adiw	r26, 0x01	; 1
    13be:	9c 93       	st	X, r25
    13c0:	8e 93       	st	-X, r24
			switch(Ptr_Str->T1_TECHNIQUE)
    13c2:	e9 81       	ldd	r30, Y+1	; 0x01
    13c4:	fa 81       	ldd	r31, Y+2	; 0x02
    13c6:	81 85       	ldd	r24, Z+9	; 0x09
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <T1_voidStartTimer+0xa4>
    13d0:	80 c1       	rjmp	.+768    	; 0x16d2 <T1_voidStartTimer+0x3a4>
			{
			case T1_Polling:
				//wait till flag
				while(GET_BIT(TIFR_REG,TOV1) ==0);
    13d2:	e8 e5       	ldi	r30, 0x58	; 88
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	86 95       	lsr	r24
    13da:	86 95       	lsr	r24
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	81 70       	andi	r24, 0x01	; 1
    13e2:	90 70       	andi	r25, 0x00	; 0
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	a9 f3       	breq	.-22     	; 0x13d2 <T1_voidStartTimer+0xa4>
				//clear flag
				SET_BIT(TIFR_REG,TOV1);
    13e8:	a8 e5       	ldi	r26, 0x58	; 88
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e8 e5       	ldi	r30, 0x58	; 88
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	84 60       	ori	r24, 0x04	; 4
    13f4:	8c 93       	st	X, r24
    13f6:	6d c1       	rjmp	.+730    	; 0x16d2 <T1_voidStartTimer+0x3a4>

			}
			break;

			case T1_CTC1_MODE:
				OCR1A_REG	= Ptr_Str->T1_Compare_value;
    13f8:	aa e4       	ldi	r26, 0x4A	; 74
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e9 81       	ldd	r30, Y+1	; 0x01
    13fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1400:	84 85       	ldd	r24, Z+12	; 0x0c
    1402:	95 85       	ldd	r25, Z+13	; 0x0d
    1404:	11 96       	adiw	r26, 0x01	; 1
    1406:	9c 93       	st	X, r25
    1408:	8e 93       	st	-X, r24
				TCCR1A_REG &=0x3F;
    140a:	af e4       	ldi	r26, 0x4F	; 79
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	ef e4       	ldi	r30, 0x4F	; 79
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8f 73       	andi	r24, 0x3F	; 63
    1416:	8c 93       	st	X, r24
				TCCR1A_REG |= ((Ptr_Str->T1_CTC_OC1A)<<6);
    1418:	af e4       	ldi	r26, 0x4F	; 79
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	ef e4       	ldi	r30, 0x4F	; 79
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	28 2f       	mov	r18, r24
    1424:	e9 81       	ldd	r30, Y+1	; 0x01
    1426:	fa 81       	ldd	r31, Y+2	; 0x02
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	00 24       	eor	r0, r0
    1430:	96 95       	lsr	r25
    1432:	87 95       	ror	r24
    1434:	07 94       	ror	r0
    1436:	96 95       	lsr	r25
    1438:	87 95       	ror	r24
    143a:	07 94       	ror	r0
    143c:	98 2f       	mov	r25, r24
    143e:	80 2d       	mov	r24, r0
    1440:	82 2b       	or	r24, r18
    1442:	8c 93       	st	X, r24

				switch(Ptr_Str->T1_TECHNIQUE)
    1444:	e9 81       	ldd	r30, Y+1	; 0x01
    1446:	fa 81       	ldd	r31, Y+2	; 0x02
    1448:	81 85       	ldd	r24, Z+9	; 0x09
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3e 83       	std	Y+6, r19	; 0x06
    1450:	2d 83       	std	Y+5, r18	; 0x05
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	31 f0       	breq	.+12     	; 0x1466 <T1_voidStartTimer+0x138>
    145a:	2d 81       	ldd	r18, Y+5	; 0x05
    145c:	3e 81       	ldd	r19, Y+6	; 0x06
    145e:	21 30       	cpi	r18, 0x01	; 1
    1460:	31 05       	cpc	r19, r1
    1462:	a1 f0       	breq	.+40     	; 0x148c <T1_voidStartTimer+0x15e>
    1464:	36 c1       	rjmp	.+620    	; 0x16d2 <T1_voidStartTimer+0x3a4>
				{
				case T1_Polling:
					//wait till flag
					while(GET_BIT(TIFR_REG,OCF1A) ==0);
    1466:	e8 e5       	ldi	r30, 0x58	; 88
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	82 95       	swap	r24
    146e:	8f 70       	andi	r24, 0x0F	; 15
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	81 70       	andi	r24, 0x01	; 1
    1476:	90 70       	andi	r25, 0x00	; 0
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	a9 f3       	breq	.-22     	; 0x1466 <T1_voidStartTimer+0x138>
					//clear flag
					SET_BIT(TIFR_REG,OCF1A);
    147c:	a8 e5       	ldi	r26, 0x58	; 88
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e8 e5       	ldi	r30, 0x58	; 88
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	80 61       	ori	r24, 0x10	; 16
    1488:	8c 93       	st	X, r24
    148a:	23 c1       	rjmp	.+582    	; 0x16d2 <T1_voidStartTimer+0x3a4>


				case T1_Interrupt:
					//ISR Will Do The Work

					CLCD_voidSendData('1');
    148c:	81 e3       	ldi	r24, 0x31	; 49
    148e:	0e 94 af 30 	call	0x615e	; 0x615e <CLCD_voidSendData>
    1492:	1f c1       	rjmp	.+574    	; 0x16d2 <T1_voidStartTimer+0x3a4>
					break;
				}
				break;

				case T1_PHASE_Correct1_MODE:
					OCR1A_REG	= Ptr_Str->T1_Compare_value;
    1494:	aa e4       	ldi	r26, 0x4A	; 74
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e9 81       	ldd	r30, Y+1	; 0x01
    149a:	fa 81       	ldd	r31, Y+2	; 0x02
    149c:	84 85       	ldd	r24, Z+12	; 0x0c
    149e:	95 85       	ldd	r25, Z+13	; 0x0d
    14a0:	11 96       	adiw	r26, 0x01	; 1
    14a2:	9c 93       	st	X, r25
    14a4:	8e 93       	st	-X, r24
					TCCR1A_REG &=0x3F;
    14a6:	af e4       	ldi	r26, 0x4F	; 79
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ef e4       	ldi	r30, 0x4F	; 79
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8f 73       	andi	r24, 0x3F	; 63
    14b2:	8c 93       	st	X, r24
					TCCR1A_REG |= ((Ptr_Str->T1_PHASE_OC1A)<<6);
    14b4:	af e4       	ldi	r26, 0x4F	; 79
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ef e4       	ldi	r30, 0x4F	; 79
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	e9 81       	ldd	r30, Y+1	; 0x01
    14c2:	fa 81       	ldd	r31, Y+2	; 0x02
    14c4:	86 81       	ldd	r24, Z+6	; 0x06
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	00 24       	eor	r0, r0
    14cc:	96 95       	lsr	r25
    14ce:	87 95       	ror	r24
    14d0:	07 94       	ror	r0
    14d2:	96 95       	lsr	r25
    14d4:	87 95       	ror	r24
    14d6:	07 94       	ror	r0
    14d8:	98 2f       	mov	r25, r24
    14da:	80 2d       	mov	r24, r0
    14dc:	82 2b       	or	r24, r18
    14de:	8c 93       	st	X, r24
    14e0:	f8 c0       	rjmp	.+496    	; 0x16d2 <T1_voidStartTimer+0x3a4>

					break;


				case T1_FAST_PWM_1:
					OCR1A_REG	= Ptr_Str->T1_Compare_value;
    14e2:	aa e4       	ldi	r26, 0x4A	; 74
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e9 81       	ldd	r30, Y+1	; 0x01
    14e8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ea:	84 85       	ldd	r24, Z+12	; 0x0c
    14ec:	95 85       	ldd	r25, Z+13	; 0x0d
    14ee:	11 96       	adiw	r26, 0x01	; 1
    14f0:	9c 93       	st	X, r25
    14f2:	8e 93       	st	-X, r24
					TCCR1A_REG &=0x3F;
    14f4:	af e4       	ldi	r26, 0x4F	; 79
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ef e4       	ldi	r30, 0x4F	; 79
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8f 73       	andi	r24, 0x3F	; 63
    1500:	8c 93       	st	X, r24
					TCCR1A_REG |= ((Ptr_Str->T1_FASTPWM_OC1A)<<6);
    1502:	af e4       	ldi	r26, 0x4F	; 79
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ef e4       	ldi	r30, 0x4F	; 79
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	28 2f       	mov	r18, r24
    150e:	e9 81       	ldd	r30, Y+1	; 0x01
    1510:	fa 81       	ldd	r31, Y+2	; 0x02
    1512:	84 81       	ldd	r24, Z+4	; 0x04
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	00 24       	eor	r0, r0
    151a:	96 95       	lsr	r25
    151c:	87 95       	ror	r24
    151e:	07 94       	ror	r0
    1520:	96 95       	lsr	r25
    1522:	87 95       	ror	r24
    1524:	07 94       	ror	r0
    1526:	98 2f       	mov	r25, r24
    1528:	80 2d       	mov	r24, r0
    152a:	82 2b       	or	r24, r18
    152c:	8c 93       	st	X, r24
    152e:	d1 c0       	rjmp	.+418    	; 0x16d2 <T1_voidStartTimer+0x3a4>
		break;


		case T1_ChannelB:

			switch(Ptr_Str->T1_WF_MODE)
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	80 81       	ld	r24, Z
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3c 83       	std	Y+4, r19	; 0x04
    153c:	2b 83       	std	Y+3, r18	; 0x03
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	91 05       	cpc	r25, r1
    1546:	d9 f1       	breq	.+118    	; 0x15be <T1_voidStartTimer+0x290>
    1548:	2b 81       	ldd	r18, Y+3	; 0x03
    154a:	3c 81       	ldd	r19, Y+4	; 0x04
    154c:	25 30       	cpi	r18, 0x05	; 5
    154e:	31 05       	cpc	r19, r1
    1550:	2c f4       	brge	.+10     	; 0x155c <T1_voidStartTimer+0x22e>
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	71 f0       	breq	.+28     	; 0x1576 <T1_voidStartTimer+0x248>
    155a:	bb c0       	rjmp	.+374    	; 0x16d2 <T1_voidStartTimer+0x3a4>
    155c:	2b 81       	ldd	r18, Y+3	; 0x03
    155e:	3c 81       	ldd	r19, Y+4	; 0x04
    1560:	2a 30       	cpi	r18, 0x0A	; 10
    1562:	31 05       	cpc	r19, r1
    1564:	09 f4       	brne	.+2      	; 0x1568 <T1_voidStartTimer+0x23a>
    1566:	6a c0       	rjmp	.+212    	; 0x163c <T1_voidStartTimer+0x30e>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	8e 30       	cpi	r24, 0x0E	; 14
    156e:	91 05       	cpc	r25, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <T1_voidStartTimer+0x246>
    1572:	88 c0       	rjmp	.+272    	; 0x1684 <T1_voidStartTimer+0x356>
    1574:	ae c0       	rjmp	.+348    	; 0x16d2 <T1_voidStartTimer+0x3a4>
			{
			case T1_NORMAL_MODE:
				TCNT1_REG	= Ptr_Str->T1_Preload_value;
    1576:	ac e4       	ldi	r26, 0x4C	; 76
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e9 81       	ldd	r30, Y+1	; 0x01
    157c:	fa 81       	ldd	r31, Y+2	; 0x02
    157e:	82 85       	ldd	r24, Z+10	; 0x0a
    1580:	93 85       	ldd	r25, Z+11	; 0x0b
    1582:	11 96       	adiw	r26, 0x01	; 1
    1584:	9c 93       	st	X, r25
    1586:	8e 93       	st	-X, r24
				switch(Ptr_Str->T1_TECHNIQUE)
    1588:	e9 81       	ldd	r30, Y+1	; 0x01
    158a:	fa 81       	ldd	r31, Y+2	; 0x02
    158c:	81 85       	ldd	r24, Z+9	; 0x09
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	09 f0       	breq	.+2      	; 0x1598 <T1_voidStartTimer+0x26a>
    1596:	9d c0       	rjmp	.+314    	; 0x16d2 <T1_voidStartTimer+0x3a4>
				{
				case T1_Polling:
					//wait till flag
					while(GET_BIT(TIFR_REG,TOV1) ==0);
    1598:	e8 e5       	ldi	r30, 0x58	; 88
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	86 95       	lsr	r24
    15a0:	86 95       	lsr	r24
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	81 70       	andi	r24, 0x01	; 1
    15a8:	90 70       	andi	r25, 0x00	; 0
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	a9 f3       	breq	.-22     	; 0x1598 <T1_voidStartTimer+0x26a>
					//clear flag
					SET_BIT(TIFR_REG,TOV1);
    15ae:	a8 e5       	ldi	r26, 0x58	; 88
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e8 e5       	ldi	r30, 0x58	; 88
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	84 60       	ori	r24, 0x04	; 4
    15ba:	8c 93       	st	X, r24
    15bc:	8a c0       	rjmp	.+276    	; 0x16d2 <T1_voidStartTimer+0x3a4>

				}
				break;

				case T1_CTC1_MODE:
					OCR1B_REG	= Ptr_Str->T1_Compare_value;
    15be:	a8 e4       	ldi	r26, 0x48	; 72
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e9 81       	ldd	r30, Y+1	; 0x01
    15c4:	fa 81       	ldd	r31, Y+2	; 0x02
    15c6:	84 85       	ldd	r24, Z+12	; 0x0c
    15c8:	95 85       	ldd	r25, Z+13	; 0x0d
    15ca:	11 96       	adiw	r26, 0x01	; 1
    15cc:	9c 93       	st	X, r25
    15ce:	8e 93       	st	-X, r24
					TCCR1A_REG &=0xCF;
    15d0:	af e4       	ldi	r26, 0x4F	; 79
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ef e4       	ldi	r30, 0x4F	; 79
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8f 7c       	andi	r24, 0xCF	; 207
    15dc:	8c 93       	st	X, r24
					TCCR1A_REG |= ((Ptr_Str->T1_CTC_OC1B)<<4);
    15de:	af e4       	ldi	r26, 0x4F	; 79
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	ef e4       	ldi	r30, 0x4F	; 79
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	28 2f       	mov	r18, r24
    15ea:	e9 81       	ldd	r30, Y+1	; 0x01
    15ec:	fa 81       	ldd	r31, Y+2	; 0x02
    15ee:	83 81       	ldd	r24, Z+3	; 0x03
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	82 95       	swap	r24
    15f6:	92 95       	swap	r25
    15f8:	90 7f       	andi	r25, 0xF0	; 240
    15fa:	98 27       	eor	r25, r24
    15fc:	80 7f       	andi	r24, 0xF0	; 240
    15fe:	98 27       	eor	r25, r24
    1600:	82 2b       	or	r24, r18
    1602:	8c 93       	st	X, r24
					switch(Ptr_Str->T1_TECHNIQUE)
    1604:	e9 81       	ldd	r30, Y+1	; 0x01
    1606:	fa 81       	ldd	r31, Y+2	; 0x02
    1608:	81 85       	ldd	r24, Z+9	; 0x09
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	09 f0       	breq	.+2      	; 0x1614 <T1_voidStartTimer+0x2e6>
    1612:	5f c0       	rjmp	.+190    	; 0x16d2 <T1_voidStartTimer+0x3a4>
					{
					case T1_Polling:
						//wait till flag
						while(GET_BIT(TIFR_REG,OCF1B) ==0);
    1614:	e8 e5       	ldi	r30, 0x58	; 88
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	86 95       	lsr	r24
    161c:	86 95       	lsr	r24
    161e:	86 95       	lsr	r24
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	81 70       	andi	r24, 0x01	; 1
    1626:	90 70       	andi	r25, 0x00	; 0
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	a1 f3       	breq	.-24     	; 0x1614 <T1_voidStartTimer+0x2e6>
						//clear flag
						SET_BIT(TIFR_REG,OCF1B);
    162c:	a8 e5       	ldi	r26, 0x58	; 88
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e8 e5       	ldi	r30, 0x58	; 88
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	88 60       	ori	r24, 0x08	; 8
    1638:	8c 93       	st	X, r24
    163a:	4b c0       	rjmp	.+150    	; 0x16d2 <T1_voidStartTimer+0x3a4>
						break;
					}
					break;

					case T1_PHASE_Correct1_MODE:
						OCR1B_REG	= Ptr_Str->T1_Compare_value;
    163c:	a8 e4       	ldi	r26, 0x48	; 72
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e9 81       	ldd	r30, Y+1	; 0x01
    1642:	fa 81       	ldd	r31, Y+2	; 0x02
    1644:	84 85       	ldd	r24, Z+12	; 0x0c
    1646:	95 85       	ldd	r25, Z+13	; 0x0d
    1648:	11 96       	adiw	r26, 0x01	; 1
    164a:	9c 93       	st	X, r25
    164c:	8e 93       	st	-X, r24
						TCCR1A_REG &=0xCF;
    164e:	af e4       	ldi	r26, 0x4F	; 79
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ef e4       	ldi	r30, 0x4F	; 79
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8f 7c       	andi	r24, 0xCF	; 207
    165a:	8c 93       	st	X, r24
						TCCR1A_REG |= ((Ptr_Str->T1_PHASE_OC1B)<<4);
    165c:	af e4       	ldi	r26, 0x4F	; 79
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ef e4       	ldi	r30, 0x4F	; 79
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	28 2f       	mov	r18, r24
    1668:	e9 81       	ldd	r30, Y+1	; 0x01
    166a:	fa 81       	ldd	r31, Y+2	; 0x02
    166c:	87 81       	ldd	r24, Z+7	; 0x07
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	82 95       	swap	r24
    1674:	92 95       	swap	r25
    1676:	90 7f       	andi	r25, 0xF0	; 240
    1678:	98 27       	eor	r25, r24
    167a:	80 7f       	andi	r24, 0xF0	; 240
    167c:	98 27       	eor	r25, r24
    167e:	82 2b       	or	r24, r18
    1680:	8c 93       	st	X, r24
    1682:	27 c0       	rjmp	.+78     	; 0x16d2 <T1_voidStartTimer+0x3a4>

						break;


					case T1_FAST_PWM_1:
						OCR1B_REG	= Ptr_Str->T1_Compare_value;
    1684:	a8 e4       	ldi	r26, 0x48	; 72
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e9 81       	ldd	r30, Y+1	; 0x01
    168a:	fa 81       	ldd	r31, Y+2	; 0x02
    168c:	84 85       	ldd	r24, Z+12	; 0x0c
    168e:	95 85       	ldd	r25, Z+13	; 0x0d
    1690:	11 96       	adiw	r26, 0x01	; 1
    1692:	9c 93       	st	X, r25
    1694:	8e 93       	st	-X, r24
						CLCD_voidSendString((u8*)"ChannelB");
    1696:	80 e6       	ldi	r24, 0x60	; 96
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 71 32 	call	0x64e2	; 0x64e2 <CLCD_voidSendString>
						TCCR1A_REG &=0xCF;
    169e:	af e4       	ldi	r26, 0x4F	; 79
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	ef e4       	ldi	r30, 0x4F	; 79
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8f 7c       	andi	r24, 0xCF	; 207
    16aa:	8c 93       	st	X, r24
						TCCR1A_REG |= ((Ptr_Str->T1_FASTPWM_OC1B)<<4);
    16ac:	af e4       	ldi	r26, 0x4F	; 79
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	ef e4       	ldi	r30, 0x4F	; 79
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	28 2f       	mov	r18, r24
    16b8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ba:	fa 81       	ldd	r31, Y+2	; 0x02
    16bc:	85 81       	ldd	r24, Z+5	; 0x05
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	82 95       	swap	r24
    16c4:	92 95       	swap	r25
    16c6:	90 7f       	andi	r25, 0xF0	; 240
    16c8:	98 27       	eor	r25, r24
    16ca:	80 7f       	andi	r24, 0xF0	; 240
    16cc:	98 27       	eor	r25, r24
    16ce:	82 2b       	or	r24, r18
    16d0:	8c 93       	st	X, r24
			}
			break;


	}
}
    16d2:	2a 96       	adiw	r28, 0x0a	; 10
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <T1_voidSetCompareValueT1A>:

void T1_voidSetCompareValueT1A(u16 Copy_u16CompareValue)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <T1_voidSetCompareValueT1A+0x6>
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	89 83       	std	Y+1, r24	; 0x01

	OCR1A_REG=Copy_u16CompareValue;
    16f2:	ea e4       	ldi	r30, 0x4A	; 74
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <T1_voidSetCompareValueT1B>:
void T1_voidSetCompareValueT1B(u16 Copy_u16CompareValue)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <T1_voidSetCompareValueT1B+0x6>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01

	OCR1B_REG=Copy_u16CompareValue;
    1716:	e8 e4       	ldi	r30, 0x48	; 72
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	80 83       	st	Z, r24
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <T1_voidSet_ICRValue>:
void T1_voidSet_ICRValue(u16 Copy_u16ICR_VALUE)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	00 d0       	rcall	.+0      	; 0x1732 <T1_voidSet_ICRValue+0x6>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
	ICR1_REG=Copy_u16ICR_VALUE;
    173a:	e6 e4       	ldi	r30, 0x46	; 70
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	80 83       	st	Z, r24
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <T1_ReadTCNT1Value>:

u16 T1_ReadTCNT1Value(void)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    1758:	ec e4       	ldi	r30, 0x4C	; 76
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <T1_WriteTCNT1A>:
void T1_WriteTCNT1A(u16 Copy_u8TCNTVal)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <T1_WriteTCNT1A+0x6>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	89 83       	std	Y+1, r24	; 0x01

	TCNT1_REG=Copy_u8TCNTVal;
    1774:	ec e4       	ldi	r30, 0x4C	; 76
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	80 83       	st	Z, r24
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <T1_SetCallBack>:


void T1_SetCallBack(void (*PF)(void))
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <T1_SetCallBack+0x6>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
	if(PF !=NULL)
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	31 f0       	breq	.+12     	; 0x17ac <T1_SetCallBack+0x22>
	{
		GP_Notification=PF;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	90 93 9c 01 	sts	0x019C, r25
    17a8:	80 93 9b 01 	sts	0x019B, r24

	}

}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <__vector_7>:
void __vector_7(void)
{
    17b6:	1f 92       	push	r1
    17b8:	0f 92       	push	r0
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	0f 92       	push	r0
    17be:	11 24       	eor	r1, r1
    17c0:	2f 93       	push	r18
    17c2:	3f 93       	push	r19
    17c4:	4f 93       	push	r20
    17c6:	5f 93       	push	r21
    17c8:	6f 93       	push	r22
    17ca:	7f 93       	push	r23
    17cc:	8f 93       	push	r24
    17ce:	9f 93       	push	r25
    17d0:	af 93       	push	r26
    17d2:	bf 93       	push	r27
    17d4:	ef 93       	push	r30
    17d6:	ff 93       	push	r31
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62

	if(GP_Notification !=NULL)
    17e0:	80 91 9b 01 	lds	r24, 0x019B
    17e4:	90 91 9c 01 	lds	r25, 0x019C
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	29 f0       	breq	.+10     	; 0x17f6 <__vector_7+0x40>
	{
		GP_Notification();
    17ec:	e0 91 9b 01 	lds	r30, 0x019B
    17f0:	f0 91 9c 01 	lds	r31, 0x019C
    17f4:	09 95       	icall

	}
}
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	ff 91       	pop	r31
    17fc:	ef 91       	pop	r30
    17fe:	bf 91       	pop	r27
    1800:	af 91       	pop	r26
    1802:	9f 91       	pop	r25
    1804:	8f 91       	pop	r24
    1806:	7f 91       	pop	r23
    1808:	6f 91       	pop	r22
    180a:	5f 91       	pop	r21
    180c:	4f 91       	pop	r20
    180e:	3f 91       	pop	r19
    1810:	2f 91       	pop	r18
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	0f 90       	pop	r0
    1818:	1f 90       	pop	r1
    181a:	18 95       	reti

0000181c <TWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_private.h"
#include "TWI_config.h"

void TWI_voidMasterInit(u8 Copy_u8MasterAddress)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	89 83       	std	Y+1, r24	; 0x01
    /*Enable Acknowledge*/
    SET_BIT(TWCR, TWCR_TWEA);
    1828:	a6 e5       	ldi	r26, 0x56	; 86
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e6 e5       	ldi	r30, 0x56	; 86
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	80 64       	ori	r24, 0x40	; 64
    1834:	8c 93       	st	X, r24

    /*Set Freq*/
    /*Set SCL Freq = 100KHz, With TWPS bit = 0 and CPU Clock = 8MHz*/
    TWBR = 32;
    1836:	e0 e2       	ldi	r30, 0x20	; 32
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 e2       	ldi	r24, 0x20	; 32
    183c:	80 83       	st	Z, r24
    CLR_BIT(TWSR, TWSR_TWPS0);
    183e:	a1 e2       	ldi	r26, 0x21	; 33
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e1 e2       	ldi	r30, 0x21	; 33
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8e 7f       	andi	r24, 0xFE	; 254
    184a:	8c 93       	st	X, r24
    CLR_BIT(TWSR, TWSR_TWPS1);
    184c:	a1 e2       	ldi	r26, 0x21	; 33
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e1 e2       	ldi	r30, 0x21	; 33
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	8d 7f       	andi	r24, 0xFD	; 253
    1858:	8c 93       	st	X, r24


    if(Copy_u8MasterAddress == 0)
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	88 23       	and	r24, r24
    185e:	29 f0       	breq	.+10     	; 0x186a <TWI_voidMasterInit+0x4e>
        /*Do Nothing*/
    }
    else
    {
        /*Set The Required Address For The Master*/
        TWAR = Copy_u8MasterAddress << 1;
    1860:	e2 e2       	ldi	r30, 0x22	; 34
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	88 0f       	add	r24, r24
    1868:	80 83       	st	Z, r24
    }

    /*Enabel TWI Peripheral*/
    SET_BIT(TWCR, TWCR_TWEN);
    186a:	a6 e5       	ldi	r26, 0x56	; 86
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e6 e5       	ldi	r30, 0x56	; 86
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	84 60       	ori	r24, 0x04	; 4
    1876:	8c 93       	st	X, r24
}
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	0f 92       	push	r0
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	89 83       	std	Y+1, r24	; 0x01
    /*Enable Acknowledge*/
    SET_BIT(TWCR, TWCR_TWEA);
    188c:	a6 e5       	ldi	r26, 0x56	; 86
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e6 e5       	ldi	r30, 0x56	; 86
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	80 64       	ori	r24, 0x40	; 64
    1898:	8c 93       	st	X, r24
    /*Set Slave Address In The TWAR Register*/
    TWAR = Copy_u8SlaveAddress << 1;
    189a:	e2 e2       	ldi	r30, 0x22	; 34
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	88 0f       	add	r24, r24
    18a2:	80 83       	st	Z, r24

    /*Enabel TWI Peripheral*/
    SET_BIT(TWCR, TWCR_TWEN);
    18a4:	a6 e5       	ldi	r26, 0x56	; 86
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e6 e5       	ldi	r30, 0x56	; 86
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	84 60       	ori	r24, 0x04	; 4
    18b0:	8c 93       	st	X, r24
}
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    18c4:	19 82       	std	Y+1, r1	; 0x01
    /*Set Start Condition Bit*/
    SET_BIT(TWCR, TWCR_TWSTA);
    18c6:	a6 e5       	ldi	r26, 0x56	; 86
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e6 e5       	ldi	r30, 0x56	; 86
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	80 62       	ori	r24, 0x20	; 32
    18d2:	8c 93       	st	X, r24

    /*Clear The TWINT Flag*/
    SET_BIT(TWCR, TWCR_TWINT);
    18d4:	a6 e5       	ldi	r26, 0x56	; 86
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e6 e5       	ldi	r30, 0x56	; 86
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	8c 93       	st	X, r24

    /*Polling (Busy Wait) On The TWINT Flag*/
    while(GET_BIT(TWCR, TWCR_TWINT) == 0);
    18e2:	e6 e5       	ldi	r30, 0x56	; 86
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	88 23       	and	r24, r24
    18ea:	dc f7       	brge	.-10     	; 0x18e2 <TWI_ErrorStatusSendStartConditionWithACK+0x28>

    /*Check If The Operation Is Transmitted Successfully*/
    if((TWSR & 0xF8) != START_CONDITION_ACK)
    18ec:	e1 e2       	ldi	r30, 0x21	; 33
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	88 7f       	andi	r24, 0xF8	; 248
    18f8:	90 70       	andi	r25, 0x00	; 0
    18fa:	88 30       	cpi	r24, 0x08	; 8
    18fc:	91 05       	cpc	r25, r1
    18fe:	11 f0       	breq	.+4      	; 0x1904 <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
    {
        /*Return Error*/
        Local_ErrorStatus = StartConditionError;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /*Do Nothing*/
    }
    return Local_ErrorStatus;
    1904:	89 81       	ldd	r24, Y+1	; 0x01
}
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:

TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	0f 92       	push	r0
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1918:	19 82       	std	Y+1, r1	; 0x01

    /*Set Start Condition Bit*/
    SET_BIT(TWCR, TWCR_TWSTA);
    191a:	a6 e5       	ldi	r26, 0x56	; 86
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e6 e5       	ldi	r30, 0x56	; 86
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	80 62       	ori	r24, 0x20	; 32
    1926:	8c 93       	st	X, r24

    /*Clear The TWINT Flag*/
    SET_BIT(TWCR, TWCR_TWINT);
    1928:	a6 e5       	ldi	r26, 0x56	; 86
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e6 e5       	ldi	r30, 0x56	; 86
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	80 68       	ori	r24, 0x80	; 128
    1934:	8c 93       	st	X, r24

    /*Polling (Busy Wait) On The TWINT Flag*/
    while(GET_BIT(TWCR, TWCR_TWINT) == 0);
    1936:	e6 e5       	ldi	r30, 0x56	; 86
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	88 23       	and	r24, r24
    193e:	dc f7       	brge	.-10     	; 0x1936 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x28>

    /*Check If The Operation Is Transmitted Successfully*/
    if((TWSR & 0xF8) != REPEATED_START_CONDITION_ACK)
    1940:	e1 e2       	ldi	r30, 0x21	; 33
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	88 7f       	andi	r24, 0xF8	; 248
    194c:	90 70       	andi	r25, 0x00	; 0
    194e:	80 31       	cpi	r24, 0x10	; 16
    1950:	91 05       	cpc	r25, r1
    1952:	11 f0       	breq	.+4      	; 0x1958 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x4a>
    {
        /*Return Error*/
        Local_ErrorStatus = RepeatedStartError;
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /*Do Nothing*/
    }
    return Local_ErrorStatus;
    1958:	89 81       	ldd	r24, Y+1	; 0x01
}
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:

TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	8a 83       	std	Y+2, r24	; 0x02
    TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    196e:	19 82       	std	Y+1, r1	; 0x01

    /*Set The Slave Address In The TWDR*/
    TWDR = (Copy_u8SlaveAddress << 1);
    1970:	e3 e2       	ldi	r30, 0x23	; 35
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	88 0f       	add	r24, r24
    1978:	80 83       	st	Z, r24
    /*Clear Bit 0 In The TWDR Register, W=0, R=1*/
    CLR_BIT(TWDR, 0);
    197a:	a3 e2       	ldi	r26, 0x23	; 35
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e3 e2       	ldi	r30, 0x23	; 35
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8e 7f       	andi	r24, 0xFE	; 254
    1986:	8c 93       	st	X, r24
    /*Clear Start Condition Bit*/
    CLR_BIT(TWCR, TWCR_TWSTA);
    1988:	a6 e5       	ldi	r26, 0x56	; 86
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e6 e5       	ldi	r30, 0x56	; 86
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8f 7d       	andi	r24, 0xDF	; 223
    1994:	8c 93       	st	X, r24
    /*Clear The TWINT Flag*/
    SET_BIT(TWCR, TWCR_TWINT);
    1996:	a6 e5       	ldi	r26, 0x56	; 86
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e6 e5       	ldi	r30, 0x56	; 86
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	80 68       	ori	r24, 0x80	; 128
    19a2:	8c 93       	st	X, r24

    /*Polling (Busy Wait) On The TWINT Flag*/
    while(GET_BIT(TWCR, TWCR_TWINT) == 0);
    19a4:	e6 e5       	ldi	r30, 0x56	; 86
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	88 23       	and	r24, r24
    19ac:	dc f7       	brge	.-10     	; 0x19a4 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x42>

    /*Check If The Operation Is Transmitted Successfully*/
    if((TWSR & 0xF8) != 0x18)
    19ae:	e1 e2       	ldi	r30, 0x21	; 33
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	88 7f       	andi	r24, 0xF8	; 248
    19ba:	90 70       	andi	r25, 0x00	; 0
    19bc:	88 31       	cpi	r24, 0x18	; 24
    19be:	91 05       	cpc	r25, r1
    19c0:	11 f0       	breq	.+4      	; 0x19c6 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x64>
    {
        /*Return Error*/
        Local_ErrorStatus = SLA_WError;
    19c2:	83 e0       	ldi	r24, 0x03	; 3
    19c4:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /*Do Nothing*/
    }
    return Local_ErrorStatus;
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <TWI_ErrorStatusSendSlaveAddressWithReadACK>:

TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	8a 83       	std	Y+2, r24	; 0x02
    TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    19de:	19 82       	std	Y+1, r1	; 0x01
    
    /*Set The Slave Address In The TWDR*/
    TWDR = (Copy_u8SlaveAddress << 1);
    19e0:	e3 e2       	ldi	r30, 0x23	; 35
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	88 0f       	add	r24, r24
    19e8:	80 83       	st	Z, r24
    /*Clear Bit 0 In The TWDR Register, W=0, R=1*/
    SET_BIT(TWDR, 0);
    19ea:	a3 e2       	ldi	r26, 0x23	; 35
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e3 e2       	ldi	r30, 0x23	; 35
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	81 60       	ori	r24, 0x01	; 1
    19f6:	8c 93       	st	X, r24
    /*Clear Start Condition Bit*/
    CLR_BIT(TWCR, TWCR_TWSTA);
    19f8:	a6 e5       	ldi	r26, 0x56	; 86
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e6 e5       	ldi	r30, 0x56	; 86
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 7d       	andi	r24, 0xDF	; 223
    1a04:	8c 93       	st	X, r24
    /*Clear The TWINT Flag*/
    SET_BIT(TWCR, TWCR_TWINT);
    1a06:	a6 e5       	ldi	r26, 0x56	; 86
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e6 e5       	ldi	r30, 0x56	; 86
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	80 68       	ori	r24, 0x80	; 128
    1a12:	8c 93       	st	X, r24

    /*Polling (Busy Wait) On The TWINT Flag*/
    while(GET_BIT(TWCR, TWCR_TWINT) == 0);
    1a14:	e6 e5       	ldi	r30, 0x56	; 86
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	88 23       	and	r24, r24
    1a1c:	dc f7       	brge	.-10     	; 0x1a14 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x42>

    /*Check If The Operation Is Transmitted Successfully*/
    if((TWSR & 0xF8) != 0x40)
    1a1e:	e1 e2       	ldi	r30, 0x21	; 33
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	88 7f       	andi	r24, 0xF8	; 248
    1a2a:	90 70       	andi	r25, 0x00	; 0
    1a2c:	80 34       	cpi	r24, 0x40	; 64
    1a2e:	91 05       	cpc	r25, r1
    1a30:	11 f0       	breq	.+4      	; 0x1a36 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x64>
    {
        /*Return Error*/
        Local_ErrorStatus = SLA_WError;
    1a32:	83 e0       	ldi	r24, 0x03	; 3
    1a34:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /*Do Nothing*/
    }
    return Local_ErrorStatus;
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <TWI_ErrorStatusMasterWriteDataByteWithACK>:

TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8Data)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
    TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1a4e:	19 82       	std	Y+1, r1	; 0x01
    
    /*Set The Data In The TWDR Register*/
    TWDR = Copy_u8Data;
    1a50:	e3 e2       	ldi	r30, 0x23	; 35
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	80 83       	st	Z, r24
    /*Clear The TWINT Flag*/
    SET_BIT(TWCR, TWCR_TWINT);
    1a58:	a6 e5       	ldi	r26, 0x56	; 86
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e6 e5       	ldi	r30, 0x56	; 86
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 68       	ori	r24, 0x80	; 128
    1a64:	8c 93       	st	X, r24

    /*Polling (Busy Wait) On The TWINT Flag*/
    while(GET_BIT(TWCR, TWCR_TWINT) == 0);
    1a66:	e6 e5       	ldi	r30, 0x56	; 86
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	88 23       	and	r24, r24
    1a6e:	dc f7       	brge	.-10     	; 0x1a66 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

    /*Check If The Operation Is Transmitted Successfully*/
    if((TWSR & 0xF8) != 0x28)
    1a70:	e1 e2       	ldi	r30, 0x21	; 33
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	88 7f       	andi	r24, 0xF8	; 248
    1a7c:	90 70       	andi	r25, 0x00	; 0
    1a7e:	88 32       	cpi	r24, 0x28	; 40
    1a80:	91 05       	cpc	r25, r1
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
    {
        /*Return Error*/
        Local_ErrorStatus = MasterWriteDataError;
    1a84:	85 e0       	ldi	r24, 0x05	; 5
    1a86:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /*Do Nothing*/
    }
    return Local_ErrorStatus;
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <TWI_ErrorStatusMasterReadDataByteWithACK>:

TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedData)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
    1a9a:	0f 92       	push	r0
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	9b 83       	std	Y+3, r25	; 0x03
    1aa2:	8a 83       	std	Y+2, r24	; 0x02
    TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1aa4:	19 82       	std	Y+1, r1	; 0x01
    /*Clear The TWINT Flag To Make The Slave Send Its Data*/
    SET_BIT(TWCR, TWCR_TWINT);
    1aa6:	a6 e5       	ldi	r26, 0x56	; 86
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e6 e5       	ldi	r30, 0x56	; 86
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 68       	ori	r24, 0x80	; 128
    1ab2:	8c 93       	st	X, r24
    /*Polling (Busy Wait) On The TWINT Flag*/
    while(GET_BIT(TWCR, TWCR_TWINT) == 0);
    1ab4:	e6 e5       	ldi	r30, 0x56	; 86
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	88 23       	and	r24, r24
    1abc:	dc f7       	brge	.-10     	; 0x1ab4 <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>
    /*Check If The Operation Is Transmitted Successfully*/
    if((TWSR & 0xF8) != 0x50)
    1abe:	e1 e2       	ldi	r30, 0x21	; 33
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	88 7f       	andi	r24, 0xF8	; 248
    1aca:	90 70       	andi	r25, 0x00	; 0
    1acc:	80 35       	cpi	r24, 0x50	; 80
    1ace:	91 05       	cpc	r25, r1
    1ad0:	19 f0       	breq	.+6      	; 0x1ad8 <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
    {
        /*Return Error*/
        Local_ErrorStatus = MasterReadDataError;
    1ad2:	86 e0       	ldi	r24, 0x06	; 6
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	06 c0       	rjmp	.+12     	; 0x1ae4 <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
    }
    else
    {
        /*Read The TWDR Received Data*/
        *Copy_pu8ReceivedData = TWDR;
    1ad8:	e3 e2       	ldi	r30, 0x23	; 35
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae2:	80 83       	st	Z, r24
    }
    return Local_ErrorStatus;
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <TWI_voidStopCondition>:

void TWI_voidStopCondition(void)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    /*Set Stop Condition Bit*/    
    SET_BIT(TWCR, TWCR_TWSTO);
    1afa:	a6 e5       	ldi	r26, 0x56	; 86
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e6 e5       	ldi	r30, 0x56	; 86
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	80 61       	ori	r24, 0x10	; 16
    1b06:	8c 93       	st	X, r24
    /*Clear The TWINT Flag To Make The Slave Send Its Data*/
    SET_BIT(TWCR, TWCR_TWINT);
    1b08:	a6 e5       	ldi	r26, 0x56	; 86
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e6 e5       	ldi	r30, 0x56	; 86
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 68       	ori	r24, 0x80	; 128
    1b14:	8c 93       	st	X, r24

}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <T0_voidInit>:

void __vector_10(void) __attribute__((signal));
void __vector_11(void) __attribute__((signal));

void T0_voidInit(TIMER0_CONFIG *Ptr_Str)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	28 97       	sbiw	r28, 0x08	; 8
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
	if((Ptr_Str ->WF_MODE ==NORMAL_MODE) ||(Ptr_Str ->WF_MODE ==CTC_MODE))
    1b34:	e9 81       	ldd	r30, Y+1	; 0x01
    1b36:	fa 81       	ldd	r31, Y+2	; 0x02
    1b38:	80 81       	ld	r24, Z
    1b3a:	88 23       	and	r24, r24
    1b3c:	29 f0       	breq	.+10     	; 0x1b48 <T0_voidInit+0x2c>
    1b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b40:	fa 81       	ldd	r31, Y+2	; 0x02
    1b42:	80 81       	ld	r24, Z
    1b44:	82 30       	cpi	r24, 0x02	; 2
    1b46:	41 f4       	brne	.+16     	; 0x1b58 <T0_voidInit+0x3c>
	{
		SET_BIT(TCCR0_REG,FOC0);
    1b48:	a3 e5       	ldi	r26, 0x53	; 83
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e3 e5       	ldi	r30, 0x53	; 83
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	80 68       	ori	r24, 0x80	; 128
    1b54:	8c 93       	st	X, r24
    1b56:	07 c0       	rjmp	.+14     	; 0x1b66 <T0_voidInit+0x4a>
	}else
	{
		CLR_BIT(TCCR0_REG,FOC0);
    1b58:	a3 e5       	ldi	r26, 0x53	; 83
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e3 e5       	ldi	r30, 0x53	; 83
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8f 77       	andi	r24, 0x7F	; 127
    1b64:	8c 93       	st	X, r24
	}

	//Select Operating Wave Form Mode
	switch(Ptr_Str->WF_MODE)
    1b66:	e9 81       	ldd	r30, Y+1	; 0x01
    1b68:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6a:	80 81       	ld	r24, Z
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	38 87       	std	Y+8, r19	; 0x08
    1b72:	2f 83       	std	Y+7, r18	; 0x07
    1b74:	8f 81       	ldd	r24, Y+7	; 0x07
    1b76:	98 85       	ldd	r25, Y+8	; 0x08
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	31 f1       	breq	.+76     	; 0x1bca <T0_voidInit+0xae>
    1b7e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b80:	38 85       	ldd	r19, Y+8	; 0x08
    1b82:	22 30       	cpi	r18, 0x02	; 2
    1b84:	31 05       	cpc	r19, r1
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <T0_voidInit+0x76>
    1b88:	8f 81       	ldd	r24, Y+7	; 0x07
    1b8a:	98 85       	ldd	r25, Y+8	; 0x08
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	71 f0       	breq	.+28     	; 0x1bac <T0_voidInit+0x90>
    1b90:	96 c0       	rjmp	.+300    	; 0x1cbe <T0_voidInit+0x1a2>
    1b92:	2f 81       	ldd	r18, Y+7	; 0x07
    1b94:	38 85       	ldd	r19, Y+8	; 0x08
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <T0_voidInit+0x82>
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <T0_voidInit+0x100>
    1b9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba0:	98 85       	ldd	r25, Y+8	; 0x08
    1ba2:	83 30       	cpi	r24, 0x03	; 3
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <T0_voidInit+0x8e>
    1ba8:	62 c0       	rjmp	.+196    	; 0x1c6e <T0_voidInit+0x152>
    1baa:	89 c0       	rjmp	.+274    	; 0x1cbe <T0_voidInit+0x1a2>
	{
	case NORMAL_MODE:

		CLR_BIT(TCCR0_REG,WGM00);
    1bac:	a3 e5       	ldi	r26, 0x53	; 83
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e3 e5       	ldi	r30, 0x53	; 83
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8f 7b       	andi	r24, 0xBF	; 191
    1bb8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,WGM01);
    1bba:	a3 e5       	ldi	r26, 0x53	; 83
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e3 e5       	ldi	r30, 0x53	; 83
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	87 7f       	andi	r24, 0xF7	; 247
    1bc6:	8c 93       	st	X, r24
    1bc8:	7a c0       	rjmp	.+244    	; 0x1cbe <T0_voidInit+0x1a2>
		break;

	case PHASE_PWM_MODE:

		SET_BIT(TCCR0_REG,WGM00);
    1bca:	a3 e5       	ldi	r26, 0x53	; 83
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e3 e5       	ldi	r30, 0x53	; 83
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 64       	ori	r24, 0x40	; 64
    1bd6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,WGM01);
    1bd8:	a3 e5       	ldi	r26, 0x53	; 83
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e3 e5       	ldi	r30, 0x53	; 83
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	87 7f       	andi	r24, 0xF7	; 247
    1be4:	8c 93       	st	X, r24
		//OC0_Options
		TCCR0_REG &= 0xcf;
    1be6:	a3 e5       	ldi	r26, 0x53	; 83
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e3 e5       	ldi	r30, 0x53	; 83
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8f 7c       	andi	r24, 0xCF	; 207
    1bf2:	8c 93       	st	X, r24
		TCCR0_REG |= ((Ptr_Str -> PHASE_OC0) <<4);
    1bf4:	a3 e5       	ldi	r26, 0x53	; 83
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e3 e5       	ldi	r30, 0x53	; 83
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	28 2f       	mov	r18, r24
    1c00:	e9 81       	ldd	r30, Y+1	; 0x01
    1c02:	fa 81       	ldd	r31, Y+2	; 0x02
    1c04:	83 81       	ldd	r24, Z+3	; 0x03
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	82 95       	swap	r24
    1c0c:	92 95       	swap	r25
    1c0e:	90 7f       	andi	r25, 0xF0	; 240
    1c10:	98 27       	eor	r25, r24
    1c12:	80 7f       	andi	r24, 0xF0	; 240
    1c14:	98 27       	eor	r25, r24
    1c16:	82 2b       	or	r24, r18
    1c18:	8c 93       	st	X, r24
    1c1a:	51 c0       	rjmp	.+162    	; 0x1cbe <T0_voidInit+0x1a2>

		break;

	case CTC_MODE:
		CLR_BIT(TCCR0_REG,WGM00);
    1c1c:	a3 e5       	ldi	r26, 0x53	; 83
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e3 e5       	ldi	r30, 0x53	; 83
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	8f 7b       	andi	r24, 0xBF	; 191
    1c28:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,WGM01);
    1c2a:	a3 e5       	ldi	r26, 0x53	; 83
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e3 e5       	ldi	r30, 0x53	; 83
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	88 60       	ori	r24, 0x08	; 8
    1c36:	8c 93       	st	X, r24
		//OC0_Options
		TCCR0_REG &= 0xcf;
    1c38:	a3 e5       	ldi	r26, 0x53	; 83
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e3 e5       	ldi	r30, 0x53	; 83
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	8f 7c       	andi	r24, 0xCF	; 207
    1c44:	8c 93       	st	X, r24
		TCCR0_REG |= ((Ptr_Str -> CTC_OC0) <<4);
    1c46:	a3 e5       	ldi	r26, 0x53	; 83
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e3 e5       	ldi	r30, 0x53	; 83
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	28 2f       	mov	r18, r24
    1c52:	e9 81       	ldd	r30, Y+1	; 0x01
    1c54:	fa 81       	ldd	r31, Y+2	; 0x02
    1c56:	81 81       	ldd	r24, Z+1	; 0x01
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	82 95       	swap	r24
    1c5e:	92 95       	swap	r25
    1c60:	90 7f       	andi	r25, 0xF0	; 240
    1c62:	98 27       	eor	r25, r24
    1c64:	80 7f       	andi	r24, 0xF0	; 240
    1c66:	98 27       	eor	r25, r24
    1c68:	82 2b       	or	r24, r18
    1c6a:	8c 93       	st	X, r24
    1c6c:	28 c0       	rjmp	.+80     	; 0x1cbe <T0_voidInit+0x1a2>
		break;

	case FAST_PWM:
		SET_BIT(TCCR0_REG,WGM00);
    1c6e:	a3 e5       	ldi	r26, 0x53	; 83
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e3 e5       	ldi	r30, 0x53	; 83
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	80 64       	ori	r24, 0x40	; 64
    1c7a:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,WGM01);
    1c7c:	a3 e5       	ldi	r26, 0x53	; 83
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e3 e5       	ldi	r30, 0x53	; 83
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	88 60       	ori	r24, 0x08	; 8
    1c88:	8c 93       	st	X, r24
		//OC0_Options
		TCCR0_REG &= 0xcf;
    1c8a:	a3 e5       	ldi	r26, 0x53	; 83
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e3 e5       	ldi	r30, 0x53	; 83
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	8f 7c       	andi	r24, 0xCF	; 207
    1c96:	8c 93       	st	X, r24
		TCCR0_REG |= ((Ptr_Str -> FASTPWM_OC0) <<4);
    1c98:	a3 e5       	ldi	r26, 0x53	; 83
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e3 e5       	ldi	r30, 0x53	; 83
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	82 95       	swap	r24
    1cb0:	92 95       	swap	r25
    1cb2:	90 7f       	andi	r25, 0xF0	; 240
    1cb4:	98 27       	eor	r25, r24
    1cb6:	80 7f       	andi	r24, 0xF0	; 240
    1cb8:	98 27       	eor	r25, r24
    1cba:	82 2b       	or	r24, r18
    1cbc:	8c 93       	st	X, r24
		break;
	}

	//Select CLock
	TCCR0_REG &=0xf8;
    1cbe:	a3 e5       	ldi	r26, 0x53	; 83
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e3 e5       	ldi	r30, 0x53	; 83
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	88 7f       	andi	r24, 0xF8	; 248
    1cca:	8c 93       	st	X, r24
	TCCR0_REG |= (Ptr_Str->CLOCK_MODE);
    1ccc:	a3 e5       	ldi	r26, 0x53	; 83
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e3 e5       	ldi	r30, 0x53	; 83
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	90 81       	ld	r25, Z
    1cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cda:	84 81       	ldd	r24, Z+4	; 0x04
    1cdc:	89 2b       	or	r24, r25
    1cde:	8c 93       	st	X, r24

	//Choose Polling Or Interrupt
	//Enable PIE
	switch(Ptr_Str->TECHNIQUE)
    1ce0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce4:	85 81       	ldd	r24, Z+5	; 0x05
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	3e 83       	std	Y+6, r19	; 0x06
    1cec:	2d 83       	std	Y+5, r18	; 0x05
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	29 f1       	breq	.+74     	; 0x1d40 <T0_voidInit+0x224>
    1cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cfa:	21 30       	cpi	r18, 0x01	; 1
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	01 f5       	brne	.+64     	; 0x1d40 <T0_voidInit+0x224>
	{
	case Polling:
		break;

	case Interrupt:
		switch(Ptr_Str->WF_MODE)
    1d00:	e9 81       	ldd	r30, Y+1	; 0x01
    1d02:	fa 81       	ldd	r31, Y+2	; 0x02
    1d04:	80 81       	ld	r24, Z
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	3c 83       	std	Y+4, r19	; 0x04
    1d0c:	2b 83       	std	Y+3, r18	; 0x03
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	31 f0       	breq	.+12     	; 0x1d22 <T0_voidInit+0x206>
    1d16:	2b 81       	ldd	r18, Y+3	; 0x03
    1d18:	3c 81       	ldd	r19, Y+4	; 0x04
    1d1a:	22 30       	cpi	r18, 0x02	; 2
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	49 f0       	breq	.+18     	; 0x1d32 <T0_voidInit+0x216>
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <T0_voidInit+0x224>
		{
		case NORMAL_MODE:
			SET_BIT(TIMSK_REG,0);
    1d22:	a9 e5       	ldi	r26, 0x59	; 89
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e9 e5       	ldi	r30, 0x59	; 89
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	81 60       	ori	r24, 0x01	; 1
    1d2e:	8c 93       	st	X, r24
    1d30:	07 c0       	rjmp	.+14     	; 0x1d40 <T0_voidInit+0x224>
			break;

		case CTC_MODE:
			SET_BIT(TIMSK_REG,1);
    1d32:	a9 e5       	ldi	r26, 0x59	; 89
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e9 e5       	ldi	r30, 0x59	; 89
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	82 60       	ori	r24, 0x02	; 2
    1d3e:	8c 93       	st	X, r24

		}
		break;
	}

}
    1d40:	28 96       	adiw	r28, 0x08	; 8
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <T0_voidStartTimer>:

void T0_voidStartTimer(TIMER0_CONFIG *Ptr_Str)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <T0_voidStartTimer+0x6>
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <T0_voidStartTimer+0x8>
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
	switch(Ptr_Str->WF_MODE)
    1d62:	e9 81       	ldd	r30, Y+1	; 0x01
    1d64:	fa 81       	ldd	r31, Y+2	; 0x02
    1d66:	80 81       	ld	r24, Z
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3c 83       	std	Y+4, r19	; 0x04
    1d6e:	2b 83       	std	Y+3, r18	; 0x03
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <T0_voidStartTimer+0x2a>
    1d7a:	54 c0       	rjmp	.+168    	; 0x1e24 <T0_voidStartTimer+0xd2>
    1d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d80:	22 30       	cpi	r18, 0x02	; 2
    1d82:	31 05       	cpc	r19, r1
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <T0_voidStartTimer+0x3e>
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	69 f0       	breq	.+26     	; 0x1da8 <T0_voidStartTimer+0x56>
    1d8e:	5b c0       	rjmp	.+182    	; 0x1e46 <T0_voidStartTimer+0xf4>
    1d90:	2b 81       	ldd	r18, Y+3	; 0x03
    1d92:	3c 81       	ldd	r19, Y+4	; 0x04
    1d94:	22 30       	cpi	r18, 0x02	; 2
    1d96:	31 05       	cpc	r19, r1
    1d98:	31 f1       	breq	.+76     	; 0x1de6 <T0_voidStartTimer+0x94>
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	83 30       	cpi	r24, 0x03	; 3
    1da0:	91 05       	cpc	r25, r1
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <T0_voidStartTimer+0x54>
    1da4:	48 c0       	rjmp	.+144    	; 0x1e36 <T0_voidStartTimer+0xe4>
    1da6:	4f c0       	rjmp	.+158    	; 0x1e46 <T0_voidStartTimer+0xf4>
	{
	case NORMAL_MODE:
		TCNT0_REG	= Ptr_Str->Preload_value;
    1da8:	a2 e5       	ldi	r26, 0x52	; 82
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e9 81       	ldd	r30, Y+1	; 0x01
    1dae:	fa 81       	ldd	r31, Y+2	; 0x02
    1db0:	86 81       	ldd	r24, Z+6	; 0x06
    1db2:	8c 93       	st	X, r24
		switch(Ptr_Str->TECHNIQUE)
    1db4:	e9 81       	ldd	r30, Y+1	; 0x01
    1db6:	fa 81       	ldd	r31, Y+2	; 0x02
    1db8:	85 81       	ldd	r24, Z+5	; 0x05
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <T0_voidStartTimer+0x72>
    1dc2:	41 c0       	rjmp	.+130    	; 0x1e46 <T0_voidStartTimer+0xf4>
		{
		case Polling:
			//wait till flag
			while(GET_BIT(TIFR_REG,0) ==0);
    1dc4:	e8 e5       	ldi	r30, 0x58	; 88
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	81 70       	andi	r24, 0x01	; 1
    1dd0:	90 70       	andi	r25, 0x00	; 0
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	b9 f3       	breq	.-18     	; 0x1dc4 <T0_voidStartTimer+0x72>
			//clear flag
			SET_BIT(TIFR_REG,0);
    1dd6:	a8 e5       	ldi	r26, 0x58	; 88
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e8 e5       	ldi	r30, 0x58	; 88
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	81 60       	ori	r24, 0x01	; 1
    1de2:	8c 93       	st	X, r24
    1de4:	30 c0       	rjmp	.+96     	; 0x1e46 <T0_voidStartTimer+0xf4>

		}
		break;

		case CTC_MODE:
			OCR0_REG	= Ptr_Str->Compare_value;
    1de6:	ac e5       	ldi	r26, 0x5C	; 92
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e9 81       	ldd	r30, Y+1	; 0x01
    1dec:	fa 81       	ldd	r31, Y+2	; 0x02
    1dee:	87 81       	ldd	r24, Z+7	; 0x07
    1df0:	8c 93       	st	X, r24
			switch(Ptr_Str->TECHNIQUE)
    1df2:	e9 81       	ldd	r30, Y+1	; 0x01
    1df4:	fa 81       	ldd	r31, Y+2	; 0x02
    1df6:	85 81       	ldd	r24, Z+5	; 0x05
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	19 f5       	brne	.+70     	; 0x1e46 <T0_voidStartTimer+0xf4>
			{
			case Polling:
				//wait till flag
				while(GET_BIT(TIFR_REG,1) ==0);
    1e00:	e8 e5       	ldi	r30, 0x58	; 88
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	86 95       	lsr	r24
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	81 70       	andi	r24, 0x01	; 1
    1e0e:	90 70       	andi	r25, 0x00	; 0
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	b1 f3       	breq	.-20     	; 0x1e00 <T0_voidStartTimer+0xae>
				//clear flag
				SET_BIT(TIFR_REG,1);
    1e14:	a8 e5       	ldi	r26, 0x58	; 88
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e8 e5       	ldi	r30, 0x58	; 88
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	82 60       	ori	r24, 0x02	; 2
    1e20:	8c 93       	st	X, r24
    1e22:	11 c0       	rjmp	.+34     	; 0x1e46 <T0_voidStartTimer+0xf4>
				break;
			}
			break;

			case PHASE_PWM_MODE:
				OCR0_REG	= Ptr_Str->Compare_value;
    1e24:	ec e5       	ldi	r30, 0x5C	; 92
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	a9 81       	ldd	r26, Y+1	; 0x01
    1e2a:	ba 81       	ldd	r27, Y+2	; 0x02
    1e2c:	17 96       	adiw	r26, 0x07	; 7
    1e2e:	8c 91       	ld	r24, X
    1e30:	17 97       	sbiw	r26, 0x07	; 7
    1e32:	80 83       	st	Z, r24
    1e34:	08 c0       	rjmp	.+16     	; 0x1e46 <T0_voidStartTimer+0xf4>

				break;


			case FAST_PWM:
				OCR0_REG	= Ptr_Str->Compare_value;
    1e36:	ec e5       	ldi	r30, 0x5C	; 92
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	a9 81       	ldd	r26, Y+1	; 0x01
    1e3c:	ba 81       	ldd	r27, Y+2	; 0x02
    1e3e:	17 96       	adiw	r26, 0x07	; 7
    1e40:	8c 91       	ld	r24, X
    1e42:	17 97       	sbiw	r26, 0x07	; 7
    1e44:	80 83       	st	Z, r24




	}
}
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <T0_SetCallBack>:



void T0_SetCallBack(void (*PF)(void))
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <T0_SetCallBack+0x6>
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
	if(PF !=NULL)
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	31 f0       	breq	.+12     	; 0x1e76 <T0_SetCallBack+0x22>
	{
		GP_Notification=PF;
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	90 93 9e 01 	sts	0x019E, r25
    1e72:	80 93 9d 01 	sts	0x019D, r24

	}

}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <__vector_10>:


void __vector_10(void){
    1e80:	1f 92       	push	r1
    1e82:	0f 92       	push	r0
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	0f 92       	push	r0
    1e88:	11 24       	eor	r1, r1
    1e8a:	2f 93       	push	r18
    1e8c:	3f 93       	push	r19
    1e8e:	4f 93       	push	r20
    1e90:	5f 93       	push	r21
    1e92:	6f 93       	push	r22
    1e94:	7f 93       	push	r23
    1e96:	8f 93       	push	r24
    1e98:	9f 93       	push	r25
    1e9a:	af 93       	push	r26
    1e9c:	bf 93       	push	r27
    1e9e:	ef 93       	push	r30
    1ea0:	ff 93       	push	r31
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62

	if(GP_Notification !=NULL)
    1eaa:	80 91 9d 01 	lds	r24, 0x019D
    1eae:	90 91 9e 01 	lds	r25, 0x019E
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	29 f0       	breq	.+10     	; 0x1ec0 <__vector_10+0x40>
	{
		GP_Notification();
    1eb6:	e0 91 9d 01 	lds	r30, 0x019D
    1eba:	f0 91 9e 01 	lds	r31, 0x019E
    1ebe:	09 95       	icall

	}

}
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	ff 91       	pop	r31
    1ec6:	ef 91       	pop	r30
    1ec8:	bf 91       	pop	r27
    1eca:	af 91       	pop	r26
    1ecc:	9f 91       	pop	r25
    1ece:	8f 91       	pop	r24
    1ed0:	7f 91       	pop	r23
    1ed2:	6f 91       	pop	r22
    1ed4:	5f 91       	pop	r21
    1ed6:	4f 91       	pop	r20
    1ed8:	3f 91       	pop	r19
    1eda:	2f 91       	pop	r18
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <__vector_11>:
void __vector_11(void){
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	2f 93       	push	r18
    1ef2:	3f 93       	push	r19
    1ef4:	4f 93       	push	r20
    1ef6:	5f 93       	push	r21
    1ef8:	6f 93       	push	r22
    1efa:	7f 93       	push	r23
    1efc:	8f 93       	push	r24
    1efe:	9f 93       	push	r25
    1f00:	af 93       	push	r26
    1f02:	bf 93       	push	r27
    1f04:	ef 93       	push	r30
    1f06:	ff 93       	push	r31
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62

	if(GP_Notification !=NULL)
    1f10:	80 91 9d 01 	lds	r24, 0x019D
    1f14:	90 91 9e 01 	lds	r25, 0x019E
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	29 f0       	breq	.+10     	; 0x1f26 <__vector_11+0x40>
	{
		GP_Notification();
    1f1c:	e0 91 9d 01 	lds	r30, 0x019D
    1f20:	f0 91 9e 01 	lds	r31, 0x019E
    1f24:	09 95       	icall

	}

}
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	ff 91       	pop	r31
    1f2c:	ef 91       	pop	r30
    1f2e:	bf 91       	pop	r27
    1f30:	af 91       	pop	r26
    1f32:	9f 91       	pop	r25
    1f34:	8f 91       	pop	r24
    1f36:	7f 91       	pop	r23
    1f38:	6f 91       	pop	r22
    1f3a:	5f 91       	pop	r21
    1f3c:	4f 91       	pop	r20
    1f3e:	3f 91       	pop	r19
    1f40:	2f 91       	pop	r18
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

00001f4c <T0_ReadTCNT0Value>:

u8 T0_ReadTCNT0Value(void)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62

	return TCNT0_REG;
    1f54:	e2 e5       	ldi	r30, 0x52	; 82
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
}
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <SPI_voidMasterInit>:




void SPI_voidMasterInit(Clock_mode Clock)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	89 83       	std	Y+1, r24	; 0x01
	/*configure DIO pins*/
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_OUTPUT);//SS
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	64 e0       	ldi	r22, 0x04	; 4
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);//MOSI
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	65 e0       	ldi	r22, 0x05	; 5
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_INPUT);//MISO
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	66 e0       	ldi	r22, 0x06	; 6
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);//SCK
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	67 e0       	ldi	r22, 0x07	; 7
    1f8e:	41 e0       	ldi	r20, 0x01	; 1
    1f90:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	/*choose data order*/
	CLR_BIT(SPCR_REG,DORD); //MSB first
    1f94:	ad e2       	ldi	r26, 0x2D	; 45
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	ed e2       	ldi	r30, 0x2D	; 45
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8f 7d       	andi	r24, 0xDF	; 223
    1fa0:	8c 93       	st	X, r24

	/*enable Master*/
	SET_BIT(SPCR_REG,MSTR);
    1fa2:	ad e2       	ldi	r26, 0x2D	; 45
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ed e2       	ldi	r30, 0x2D	; 45
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 61       	ori	r24, 0x10	; 16
    1fae:	8c 93       	st	X, r24

	/*Clock Polarity*/
	CLR_BIT(SPCR_REG,CPOL); //leading-->rising
    1fb0:	ad e2       	ldi	r26, 0x2D	; 45
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	ed e2       	ldi	r30, 0x2D	; 45
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	87 7f       	andi	r24, 0xF7	; 247
    1fbc:	8c 93       	st	X, r24

	/*Clock Phase*/
	CLR_BIT(SPCR_REG,CPHA); //sample at leading
    1fbe:	ad e2       	ldi	r26, 0x2D	; 45
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	ed e2       	ldi	r30, 0x2D	; 45
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8b 7f       	andi	r24, 0xFB	; 251
    1fca:	8c 93       	st	X, r24

	/*Clock Rate*/
	SPCR_REG &= 0xFC;
    1fcc:	ad e2       	ldi	r26, 0x2D	; 45
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	ed e2       	ldi	r30, 0x2D	; 45
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	8c 7f       	andi	r24, 0xFC	; 252
    1fd8:	8c 93       	st	X, r24
	SPCR_REG |= Clock;
    1fda:	ad e2       	ldi	r26, 0x2D	; 45
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	ed e2       	ldi	r30, 0x2D	; 45
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	90 81       	ld	r25, Z
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	89 2b       	or	r24, r25
    1fe8:	8c 93       	st	X, r24


	/*enable SPI*/
	SET_BIT(SPCR_REG,SPE);
    1fea:	ad e2       	ldi	r26, 0x2D	; 45
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ed e2       	ldi	r30, 0x2D	; 45
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 64       	ori	r24, 0x40	; 64
    1ff6:	8c 93       	st	X, r24



}
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <SPI_voidMasterTransmit>:
void SPI_voidMasterTransmit(u8 Copy_u8DataTransmited)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	0f 92       	push	r0
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	89 83       	std	Y+1, r24	; 0x01
	/* transmit DATA */
	SPDR_REG=Copy_u8DataTransmited;
    200c:	ef e2       	ldi	r30, 0x2F	; 47
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	80 83       	st	Z, r24

	/*wait till transmission is Complete*/
	while(GET_BIT(SPSR_REG,SPIF)!=1);
    2014:	ee e2       	ldi	r30, 0x2E	; 46
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	88 1f       	adc	r24, r24
    201c:	88 27       	eor	r24, r24
    201e:	88 1f       	adc	r24, r24
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	c1 f7       	brne	.-16     	; 0x2014 <SPI_voidMasterTransmit+0x14>



}
    2024:	0f 90       	pop	r0
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <SPI_voidSlaveInit>:
void SPI_voidSlaveInit()
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
	/*configure DIO pins*/
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_INPUT);//SS
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	64 e0       	ldi	r22, 0x04	; 4
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_PORTB,DIO_PIN4,DIO_HIGH);//SS input_PullUp
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	64 e0       	ldi	r22, 0x04	; 4
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_INPUT);//MOSI
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	65 e0       	ldi	r22, 0x05	; 5
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);//MISO
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	66 e0       	ldi	r22, 0x06	; 6
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_INPUT);//SCK
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	67 e0       	ldi	r22, 0x07	; 7
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>

	/*enable SPI*/
	SET_BIT(SPCR_REG,SPE);
    2066:	ad e2       	ldi	r26, 0x2D	; 45
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	ed e2       	ldi	r30, 0x2D	; 45
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	80 64       	ori	r24, 0x40	; 64
    2072:	8c 93       	st	X, r24

	/*choose data order*/
	CLR_BIT(SPCR_REG,DORD); //MSB first
    2074:	ad e2       	ldi	r26, 0x2D	; 45
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	ed e2       	ldi	r30, 0x2D	; 45
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	8f 7d       	andi	r24, 0xDF	; 223
    2080:	8c 93       	st	X, r24

	/*enable Slave*/
	CLR_BIT(SPCR_REG,MSTR);
    2082:	ad e2       	ldi	r26, 0x2D	; 45
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	ed e2       	ldi	r30, 0x2D	; 45
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	8f 7e       	andi	r24, 0xEF	; 239
    208e:	8c 93       	st	X, r24

}
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <SPI_voidSlaveRecive>:
u8 SPI_voidSlaveRecive()
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPSR_REG,SPIF)!=1);
    209e:	ee e2       	ldi	r30, 0x2E	; 46
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	88 1f       	adc	r24, r24
    20a6:	88 27       	eor	r24, r24
    20a8:	88 1f       	adc	r24, r24
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	c1 f7       	brne	.-16     	; 0x209e <SPI_voidSlaveRecive+0x8>
	return SPDR_REG;
    20ae:	ef e2       	ldi	r30, 0x2F	; 47
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
}
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <GIE_voidEnable>:
#include "GIE_Private.h"



void GIE_voidEnable()
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG_REG,7);
    20c2:	af e5       	ldi	r26, 0x5F	; 95
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	ef e5       	ldi	r30, 0x5F	; 95
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	80 68       	ori	r24, 0x80	; 128
    20ce:	8c 93       	st	X, r24

}
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <GIE_voidDisable>:
void GIE_voidDisable()
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,7);
    20de:	af e5       	ldi	r26, 0x5F	; 95
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	ef e5       	ldi	r30, 0x5F	; 95
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8f 77       	andi	r24, 0x7F	; 127
    20ea:	8c 93       	st	X, r24



}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <E_Interrupt_voidInit>:
static void (*PF_Notification[3]) (void) = {NULL,NULL,NULL};

void __vector_1(void) __attribute__((signal));

void E_Interrupt_voidInit(u8 Copy_u8IntID	,u8 Copy_u8SenseControl	)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	2a 97       	sbiw	r28, 0x0a	; 10
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8IntID)
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	3a 87       	std	Y+10, r19	; 0x0a
    2112:	29 87       	std	Y+9, r18	; 0x09
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	91 05       	cpc	r25, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <E_Interrupt_voidInit+0x2e>
    211e:	66 c0       	rjmp	.+204    	; 0x21ec <E_Interrupt_voidInit+0xfa>
    2120:	29 85       	ldd	r18, Y+9	; 0x09
    2122:	3a 85       	ldd	r19, Y+10	; 0x0a
    2124:	22 30       	cpi	r18, 0x02	; 2
    2126:	31 05       	cpc	r19, r1
    2128:	09 f4       	brne	.+2      	; 0x212c <E_Interrupt_voidInit+0x3a>
    212a:	bb c0       	rjmp	.+374    	; 0x22a2 <E_Interrupt_voidInit+0x1b0>
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	09 f0       	breq	.+2      	; 0x2136 <E_Interrupt_voidInit+0x44>
    2134:	d4 c0       	rjmp	.+424    	; 0x22de <E_Interrupt_voidInit+0x1ec>
	{

	case E_INT0:

		switch(Copy_u8SenseControl)
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	38 87       	std	Y+8, r19	; 0x08
    213e:	2f 83       	std	Y+7, r18	; 0x07
    2140:	8f 81       	ldd	r24, Y+7	; 0x07
    2142:	98 85       	ldd	r25, Y+8	; 0x08
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	91 05       	cpc	r25, r1
    2148:	21 f1       	breq	.+72     	; 0x2192 <E_Interrupt_voidInit+0xa0>
    214a:	2f 81       	ldd	r18, Y+7	; 0x07
    214c:	38 85       	ldd	r19, Y+8	; 0x08
    214e:	22 30       	cpi	r18, 0x02	; 2
    2150:	31 05       	cpc	r19, r1
    2152:	2c f4       	brge	.+10     	; 0x215e <E_Interrupt_voidInit+0x6c>
    2154:	8f 81       	ldd	r24, Y+7	; 0x07
    2156:	98 85       	ldd	r25, Y+8	; 0x08
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	61 f0       	breq	.+24     	; 0x2174 <E_Interrupt_voidInit+0x82>
    215c:	c0 c0       	rjmp	.+384    	; 0x22de <E_Interrupt_voidInit+0x1ec>
    215e:	2f 81       	ldd	r18, Y+7	; 0x07
    2160:	38 85       	ldd	r19, Y+8	; 0x08
    2162:	22 30       	cpi	r18, 0x02	; 2
    2164:	31 05       	cpc	r19, r1
    2166:	21 f1       	breq	.+72     	; 0x21b0 <E_Interrupt_voidInit+0xbe>
    2168:	8f 81       	ldd	r24, Y+7	; 0x07
    216a:	98 85       	ldd	r25, Y+8	; 0x08
    216c:	83 30       	cpi	r24, 0x03	; 3
    216e:	91 05       	cpc	r25, r1
    2170:	71 f1       	breq	.+92     	; 0x21ce <E_Interrupt_voidInit+0xdc>
    2172:	b5 c0       	rjmp	.+362    	; 0x22de <E_Interrupt_voidInit+0x1ec>
		{
		case E_Interrupt_FallingEdge:
			SET_BIT(MCUCR_REG,1);
    2174:	a5 e5       	ldi	r26, 0x55	; 85
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e5 e5       	ldi	r30, 0x55	; 85
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	82 60       	ori	r24, 0x02	; 2
    2180:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,0);
    2182:	a5 e5       	ldi	r26, 0x55	; 85
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e5 e5       	ldi	r30, 0x55	; 85
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	8e 7f       	andi	r24, 0xFE	; 254
    218e:	8c 93       	st	X, r24
    2190:	a6 c0       	rjmp	.+332    	; 0x22de <E_Interrupt_voidInit+0x1ec>

			break;

		case E_Interrupt_RisingEdge:
			SET_BIT(MCUCR_REG,1);
    2192:	a5 e5       	ldi	r26, 0x55	; 85
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e5 e5       	ldi	r30, 0x55	; 85
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	82 60       	ori	r24, 0x02	; 2
    219e:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,0);
    21a0:	a5 e5       	ldi	r26, 0x55	; 85
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e5 e5       	ldi	r30, 0x55	; 85
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	81 60       	ori	r24, 0x01	; 1
    21ac:	8c 93       	st	X, r24
    21ae:	97 c0       	rjmp	.+302    	; 0x22de <E_Interrupt_voidInit+0x1ec>

			break;

		case E_Interrupt_OnChange:
			SET_BIT(MCUCR_REG,0);
    21b0:	a5 e5       	ldi	r26, 0x55	; 85
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e5 e5       	ldi	r30, 0x55	; 85
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	81 60       	ori	r24, 0x01	; 1
    21bc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,1);
    21be:	a5 e5       	ldi	r26, 0x55	; 85
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e5 e5       	ldi	r30, 0x55	; 85
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8d 7f       	andi	r24, 0xFD	; 253
    21ca:	8c 93       	st	X, r24
    21cc:	88 c0       	rjmp	.+272    	; 0x22de <E_Interrupt_voidInit+0x1ec>
			break;

		case E_Interrupt_LowLevel:
			CLR_BIT(MCUCR_REG,1);
    21ce:	a5 e5       	ldi	r26, 0x55	; 85
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e5 e5       	ldi	r30, 0x55	; 85
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	8d 7f       	andi	r24, 0xFD	; 253
    21da:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,0);
    21dc:	a5 e5       	ldi	r26, 0x55	; 85
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e5 e5       	ldi	r30, 0x55	; 85
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8e 7f       	andi	r24, 0xFE	; 254
    21e8:	8c 93       	st	X, r24
    21ea:	79 c0       	rjmp	.+242    	; 0x22de <E_Interrupt_voidInit+0x1ec>


		break;

		case E_INT1:
			switch(Copy_u8SenseControl){
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	3e 83       	std	Y+6, r19	; 0x06
    21f4:	2d 83       	std	Y+5, r18	; 0x05
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	21 f1       	breq	.+72     	; 0x2248 <E_Interrupt_voidInit+0x156>
    2200:	2d 81       	ldd	r18, Y+5	; 0x05
    2202:	3e 81       	ldd	r19, Y+6	; 0x06
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	2c f4       	brge	.+10     	; 0x2214 <E_Interrupt_voidInit+0x122>
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	61 f0       	breq	.+24     	; 0x222a <E_Interrupt_voidInit+0x138>
    2212:	65 c0       	rjmp	.+202    	; 0x22de <E_Interrupt_voidInit+0x1ec>
    2214:	2d 81       	ldd	r18, Y+5	; 0x05
    2216:	3e 81       	ldd	r19, Y+6	; 0x06
    2218:	22 30       	cpi	r18, 0x02	; 2
    221a:	31 05       	cpc	r19, r1
    221c:	21 f1       	breq	.+72     	; 0x2266 <E_Interrupt_voidInit+0x174>
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	83 30       	cpi	r24, 0x03	; 3
    2224:	91 05       	cpc	r25, r1
    2226:	71 f1       	breq	.+92     	; 0x2284 <E_Interrupt_voidInit+0x192>
    2228:	5a c0       	rjmp	.+180    	; 0x22de <E_Interrupt_voidInit+0x1ec>
			case E_Interrupt_FallingEdge:
				SET_BIT(MCUCR_REG,3);
    222a:	a5 e5       	ldi	r26, 0x55	; 85
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e5 e5       	ldi	r30, 0x55	; 85
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	88 60       	ori	r24, 0x08	; 8
    2236:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,2);
    2238:	a5 e5       	ldi	r26, 0x55	; 85
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e5 e5       	ldi	r30, 0x55	; 85
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8b 7f       	andi	r24, 0xFB	; 251
    2244:	8c 93       	st	X, r24
    2246:	4b c0       	rjmp	.+150    	; 0x22de <E_Interrupt_voidInit+0x1ec>

				break;

			case E_Interrupt_RisingEdge:
				SET_BIT(MCUCR_REG,3);
    2248:	a5 e5       	ldi	r26, 0x55	; 85
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e5 e5       	ldi	r30, 0x55	; 85
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	88 60       	ori	r24, 0x08	; 8
    2254:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,2);
    2256:	a5 e5       	ldi	r26, 0x55	; 85
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e5 e5       	ldi	r30, 0x55	; 85
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	84 60       	ori	r24, 0x04	; 4
    2262:	8c 93       	st	X, r24
    2264:	3c c0       	rjmp	.+120    	; 0x22de <E_Interrupt_voidInit+0x1ec>

				break;

			case E_Interrupt_OnChange:
				SET_BIT(MCUCR_REG,2);
    2266:	a5 e5       	ldi	r26, 0x55	; 85
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e5 e5       	ldi	r30, 0x55	; 85
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	84 60       	ori	r24, 0x04	; 4
    2272:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,3);
    2274:	a5 e5       	ldi	r26, 0x55	; 85
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e5 e5       	ldi	r30, 0x55	; 85
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	87 7f       	andi	r24, 0xF7	; 247
    2280:	8c 93       	st	X, r24
    2282:	2d c0       	rjmp	.+90     	; 0x22de <E_Interrupt_voidInit+0x1ec>
				break;

			case E_Interrupt_LowLevel:
				CLR_BIT(MCUCR_REG,3);
    2284:	a5 e5       	ldi	r26, 0x55	; 85
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e5 e5       	ldi	r30, 0x55	; 85
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	87 7f       	andi	r24, 0xF7	; 247
    2290:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,2);
    2292:	a5 e5       	ldi	r26, 0x55	; 85
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e5 e5       	ldi	r30, 0x55	; 85
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	8b 7f       	andi	r24, 0xFB	; 251
    229e:	8c 93       	st	X, r24
    22a0:	1e c0       	rjmp	.+60     	; 0x22de <E_Interrupt_voidInit+0x1ec>

			break;


			case E_INT2:
				switch(Copy_u8SenseControl){
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	3c 83       	std	Y+4, r19	; 0x04
    22aa:	2b 83       	std	Y+3, r18	; 0x03
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	31 f0       	breq	.+12     	; 0x22c0 <E_Interrupt_voidInit+0x1ce>
    22b4:	2b 81       	ldd	r18, Y+3	; 0x03
    22b6:	3c 81       	ldd	r19, Y+4	; 0x04
    22b8:	21 30       	cpi	r18, 0x01	; 1
    22ba:	31 05       	cpc	r19, r1
    22bc:	49 f0       	breq	.+18     	; 0x22d0 <E_Interrupt_voidInit+0x1de>
    22be:	0f c0       	rjmp	.+30     	; 0x22de <E_Interrupt_voidInit+0x1ec>
				case E_Interrupt_FallingEdge:
					CLR_BIT(MCUCSR_REG,6);
    22c0:	a4 e5       	ldi	r26, 0x54	; 84
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e4 e5       	ldi	r30, 0x54	; 84
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8f 7b       	andi	r24, 0xBF	; 191
    22cc:	8c 93       	st	X, r24
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <E_Interrupt_voidInit+0x1ec>
					break;

				case E_Interrupt_RisingEdge:
					SET_BIT(MCUCSR_REG,6);
    22d0:	a4 e5       	ldi	r26, 0x54	; 84
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e4 e5       	ldi	r30, 0x54	; 84
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	80 64       	ori	r24, 0x40	; 64
    22dc:	8c 93       	st	X, r24
				}

				break;
	}

}
    22de:	2a 96       	adiw	r28, 0x0a	; 10
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <E_Interrupt_EnablePIE>:

void E_Interrupt_EnablePIE(u8 Copy_u8IntID)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <E_Interrupt_EnablePIE+0x6>
    22f6:	0f 92       	push	r0
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntID)
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	3b 83       	std	Y+3, r19	; 0x03
    2306:	2a 83       	std	Y+2, r18	; 0x02
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	9b 81       	ldd	r25, Y+3	; 0x03
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	91 05       	cpc	r25, r1
    2310:	89 f0       	breq	.+34     	; 0x2334 <E_Interrupt_EnablePIE+0x44>
    2312:	2a 81       	ldd	r18, Y+2	; 0x02
    2314:	3b 81       	ldd	r19, Y+3	; 0x03
    2316:	22 30       	cpi	r18, 0x02	; 2
    2318:	31 05       	cpc	r19, r1
    231a:	a1 f0       	breq	.+40     	; 0x2344 <E_Interrupt_EnablePIE+0x54>
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	b9 f4       	brne	.+46     	; 0x2352 <E_Interrupt_EnablePIE+0x62>
	{


	case E_INT0:
		SET_BIT(GICR_REG,6);
    2324:	ab e5       	ldi	r26, 0x5B	; 91
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	eb e5       	ldi	r30, 0x5B	; 91
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	80 64       	ori	r24, 0x40	; 64
    2330:	8c 93       	st	X, r24
    2332:	0f c0       	rjmp	.+30     	; 0x2352 <E_Interrupt_EnablePIE+0x62>
		break;

	case E_INT1:
		SET_BIT(GICR_REG,7);
    2334:	ab e5       	ldi	r26, 0x5B	; 91
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	eb e5       	ldi	r30, 0x5B	; 91
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	80 68       	ori	r24, 0x80	; 128
    2340:	8c 93       	st	X, r24
    2342:	07 c0       	rjmp	.+14     	; 0x2352 <E_Interrupt_EnablePIE+0x62>
		break;

	case E_INT2:
		SET_BIT(GICR_REG,5);
    2344:	ab e5       	ldi	r26, 0x5B	; 91
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	eb e5       	ldi	r30, 0x5B	; 91
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	80 62       	ori	r24, 0x20	; 32
    2350:	8c 93       	st	X, r24
		break;

	}

}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <E_Interrupt_DisablePIE>:

void E_Interrupt_DisablePIE(u8 Copy_u8IntID)
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	00 d0       	rcall	.+0      	; 0x2364 <E_Interrupt_DisablePIE+0x6>
    2364:	0f 92       	push	r0
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntID)
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	3b 83       	std	Y+3, r19	; 0x03
    2374:	2a 83       	std	Y+2, r18	; 0x02
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	9b 81       	ldd	r25, Y+3	; 0x03
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	91 05       	cpc	r25, r1
    237e:	89 f0       	breq	.+34     	; 0x23a2 <E_Interrupt_DisablePIE+0x44>
    2380:	2a 81       	ldd	r18, Y+2	; 0x02
    2382:	3b 81       	ldd	r19, Y+3	; 0x03
    2384:	22 30       	cpi	r18, 0x02	; 2
    2386:	31 05       	cpc	r19, r1
    2388:	a1 f0       	breq	.+40     	; 0x23b2 <E_Interrupt_DisablePIE+0x54>
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	9b 81       	ldd	r25, Y+3	; 0x03
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	b9 f4       	brne	.+46     	; 0x23c0 <E_Interrupt_DisablePIE+0x62>
	{


	case E_INT0:
		CLR_BIT(GICR_REG,6);
    2392:	ab e5       	ldi	r26, 0x5B	; 91
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	eb e5       	ldi	r30, 0x5B	; 91
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	8f 7b       	andi	r24, 0xBF	; 191
    239e:	8c 93       	st	X, r24
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <E_Interrupt_DisablePIE+0x62>
		break;

	case E_INT1:
		CLR_BIT(GICR_REG,7);
    23a2:	ab e5       	ldi	r26, 0x5B	; 91
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	eb e5       	ldi	r30, 0x5B	; 91
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	8f 77       	andi	r24, 0x7F	; 127
    23ae:	8c 93       	st	X, r24
    23b0:	07 c0       	rjmp	.+14     	; 0x23c0 <E_Interrupt_DisablePIE+0x62>
		break;

	case E_INT2:
		CLR_BIT(GICR_REG,5);
    23b2:	ab e5       	ldi	r26, 0x5B	; 91
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	eb e5       	ldi	r30, 0x5B	; 91
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	8f 7d       	andi	r24, 0xDF	; 223
    23be:	8c 93       	st	X, r24
		break;

	}
}
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <E_InterruptSetCallBack>:

void E_InterruptSetCallBack(u8 Copy_u8IntID,void (*PF)(void))
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <E_InterruptSetCallBack+0x6>
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <E_InterruptSetCallBack+0x8>
    23d4:	0f 92       	push	r0
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	7b 83       	std	Y+3, r23	; 0x03
    23de:	6a 83       	std	Y+2, r22	; 0x02


switch(Copy_u8IntID)
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	3d 83       	std	Y+5, r19	; 0x05
    23e8:	2c 83       	std	Y+4, r18	; 0x04
    23ea:	8c 81       	ldd	r24, Y+4	; 0x04
    23ec:	9d 81       	ldd	r25, Y+5	; 0x05
    23ee:	81 30       	cpi	r24, 0x01	; 1
    23f0:	91 05       	cpc	r25, r1
    23f2:	a1 f0       	breq	.+40     	; 0x241c <E_InterruptSetCallBack+0x50>
    23f4:	2c 81       	ldd	r18, Y+4	; 0x04
    23f6:	3d 81       	ldd	r19, Y+5	; 0x05
    23f8:	22 30       	cpi	r18, 0x02	; 2
    23fa:	31 05       	cpc	r19, r1
    23fc:	d1 f0       	breq	.+52     	; 0x2432 <E_InterruptSetCallBack+0x66>
    23fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2400:	9d 81       	ldd	r25, Y+5	; 0x05
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	01 f5       	brne	.+64     	; 0x2446 <E_InterruptSetCallBack+0x7a>
{

case E_INT0:


	if(PF!=NULL)
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	9b 81       	ldd	r25, Y+3	; 0x03
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	e1 f0       	breq	.+56     	; 0x2446 <E_InterruptSetCallBack+0x7a>
	{
		PF_Notification[0]=PF;
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	9b 81       	ldd	r25, Y+3	; 0x03
    2412:	90 93 a0 01 	sts	0x01A0, r25
    2416:	80 93 9f 01 	sts	0x019F, r24
    241a:	15 c0       	rjmp	.+42     	; 0x2446 <E_InterruptSetCallBack+0x7a>
	}
	break;

case E_INT1:
	if(PF!=NULL)
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	9b 81       	ldd	r25, Y+3	; 0x03
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	89 f0       	breq	.+34     	; 0x2446 <E_InterruptSetCallBack+0x7a>
	{
		PF_Notification[1]=PF;
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	9b 81       	ldd	r25, Y+3	; 0x03
    2428:	90 93 a2 01 	sts	0x01A2, r25
    242c:	80 93 a1 01 	sts	0x01A1, r24
    2430:	0a c0       	rjmp	.+20     	; 0x2446 <E_InterruptSetCallBack+0x7a>

	break;

case E_INT2:

	if(PF!=NULL)
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	9b 81       	ldd	r25, Y+3	; 0x03
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	31 f0       	breq	.+12     	; 0x2446 <E_InterruptSetCallBack+0x7a>
	{
		PF_Notification[2]=PF;
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	90 93 a4 01 	sts	0x01A4, r25
    2442:	80 93 a3 01 	sts	0x01A3, r24
	}

	break;
}

}
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <__vector_1>:



void __vector_1(void)
{
    2456:	1f 92       	push	r1
    2458:	0f 92       	push	r0
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	0f 92       	push	r0
    245e:	11 24       	eor	r1, r1
    2460:	2f 93       	push	r18
    2462:	3f 93       	push	r19
    2464:	4f 93       	push	r20
    2466:	5f 93       	push	r21
    2468:	6f 93       	push	r22
    246a:	7f 93       	push	r23
    246c:	8f 93       	push	r24
    246e:	9f 93       	push	r25
    2470:	af 93       	push	r26
    2472:	bf 93       	push	r27
    2474:	ef 93       	push	r30
    2476:	ff 93       	push	r31
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62

	if(PF_Notification[0]!=NULL)
    2480:	80 91 9f 01 	lds	r24, 0x019F
    2484:	90 91 a0 01 	lds	r25, 0x01A0
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	29 f0       	breq	.+10     	; 0x2496 <__vector_1+0x40>
	{

		PF_Notification[0]();
    248c:	e0 91 9f 01 	lds	r30, 0x019F
    2490:	f0 91 a0 01 	lds	r31, 0x01A0
    2494:	09 95       	icall

	}

}
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	0f 90       	pop	r0
    24b8:	1f 90       	pop	r1
    24ba:	18 95       	reti

000024bc <__vector_2>:

void __vector_2(void)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62

	if(PF_Notification[1]!=NULL)
    24c4:	80 91 a1 01 	lds	r24, 0x01A1
    24c8:	90 91 a2 01 	lds	r25, 0x01A2
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	29 f0       	breq	.+10     	; 0x24da <__vector_2+0x1e>
	{

		PF_Notification[1]();
    24d0:	e0 91 a1 01 	lds	r30, 0x01A1
    24d4:	f0 91 a2 01 	lds	r31, 0x01A2
    24d8:	09 95       	icall

	}

}
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <__vector_3>:


void __vector_3(void)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62

	if(PF_Notification[2]!=NULL)
    24e8:	80 91 a3 01 	lds	r24, 0x01A3
    24ec:	90 91 a4 01 	lds	r25, 0x01A4
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	29 f0       	breq	.+10     	; 0x24fe <__vector_3+0x1e>
	{

		PF_Notification[2]();
    24f4:	e0 91 a3 01 	lds	r30, 0x01A3
    24f8:	f0 91 a4 01 	lds	r31, 0x01A4
    24fc:	09 95       	icall

	}

}
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <E_Interrupt_voidChangeSenseControl>:

void E_Interrupt_voidChangeSenseControl(u8 Copy_u8IntId , u8 Copy_u8SenseControl)
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	2a 97       	sbiw	r28, 0x0a	; 10
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8IntId)
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	3a 87       	std	Y+10, r19	; 0x0a
    2524:	29 87       	std	Y+9, r18	; 0x09
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	91 05       	cpc	r25, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <E_Interrupt_voidChangeSenseControl+0x2e>
    2530:	66 c0       	rjmp	.+204    	; 0x25fe <E_Interrupt_voidChangeSenseControl+0xfa>
    2532:	29 85       	ldd	r18, Y+9	; 0x09
    2534:	3a 85       	ldd	r19, Y+10	; 0x0a
    2536:	22 30       	cpi	r18, 0x02	; 2
    2538:	31 05       	cpc	r19, r1
    253a:	09 f4       	brne	.+2      	; 0x253e <E_Interrupt_voidChangeSenseControl+0x3a>
    253c:	bb c0       	rjmp	.+374    	; 0x26b4 <E_Interrupt_voidChangeSenseControl+0x1b0>
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	09 f0       	breq	.+2      	; 0x2548 <E_Interrupt_voidChangeSenseControl+0x44>
    2546:	d3 c0       	rjmp	.+422    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
	{
	case E_INT0:
		switch(Copy_u8SenseControl)
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	38 87       	std	Y+8, r19	; 0x08
    2550:	2f 83       	std	Y+7, r18	; 0x07
    2552:	8f 81       	ldd	r24, Y+7	; 0x07
    2554:	98 85       	ldd	r25, Y+8	; 0x08
    2556:	81 30       	cpi	r24, 0x01	; 1
    2558:	91 05       	cpc	r25, r1
    255a:	a9 f0       	breq	.+42     	; 0x2586 <E_Interrupt_voidChangeSenseControl+0x82>
    255c:	2f 81       	ldd	r18, Y+7	; 0x07
    255e:	38 85       	ldd	r19, Y+8	; 0x08
    2560:	22 30       	cpi	r18, 0x02	; 2
    2562:	31 05       	cpc	r19, r1
    2564:	2c f4       	brge	.+10     	; 0x2570 <E_Interrupt_voidChangeSenseControl+0x6c>
    2566:	8f 81       	ldd	r24, Y+7	; 0x07
    2568:	98 85       	ldd	r25, Y+8	; 0x08
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	d9 f0       	breq	.+54     	; 0x25a4 <E_Interrupt_voidChangeSenseControl+0xa0>
    256e:	bf c0       	rjmp	.+382    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
    2570:	2f 81       	ldd	r18, Y+7	; 0x07
    2572:	38 85       	ldd	r19, Y+8	; 0x08
    2574:	22 30       	cpi	r18, 0x02	; 2
    2576:	31 05       	cpc	r19, r1
    2578:	21 f1       	breq	.+72     	; 0x25c2 <E_Interrupt_voidChangeSenseControl+0xbe>
    257a:	8f 81       	ldd	r24, Y+7	; 0x07
    257c:	98 85       	ldd	r25, Y+8	; 0x08
    257e:	83 30       	cpi	r24, 0x03	; 3
    2580:	91 05       	cpc	r25, r1
    2582:	71 f1       	breq	.+92     	; 0x25e0 <E_Interrupt_voidChangeSenseControl+0xdc>
    2584:	b4 c0       	rjmp	.+360    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
		{
		case E_Interrupt_RisingEdge:
			SET_BIT(MCUCR_REG , 1 );
    2586:	a5 e5       	ldi	r26, 0x55	; 85
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e5 e5       	ldi	r30, 0x55	; 85
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	82 60       	ori	r24, 0x02	; 2
    2592:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG , 0 );
    2594:	a5 e5       	ldi	r26, 0x55	; 85
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e5 e5       	ldi	r30, 0x55	; 85
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	81 60       	ori	r24, 0x01	; 1
    25a0:	8c 93       	st	X, r24
    25a2:	a5 c0       	rjmp	.+330    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
			break;

		case E_Interrupt_FallingEdge:
			SET_BIT(MCUCR_REG , 1 );
    25a4:	a5 e5       	ldi	r26, 0x55	; 85
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e5 e5       	ldi	r30, 0x55	; 85
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	82 60       	ori	r24, 0x02	; 2
    25b0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG , 0 );
    25b2:	a5 e5       	ldi	r26, 0x55	; 85
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e5 e5       	ldi	r30, 0x55	; 85
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	8e 7f       	andi	r24, 0xFE	; 254
    25be:	8c 93       	st	X, r24
    25c0:	96 c0       	rjmp	.+300    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>

			break;

		case E_Interrupt_OnChange:
			CLR_BIT(MCUCR_REG , 1 );
    25c2:	a5 e5       	ldi	r26, 0x55	; 85
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e5 e5       	ldi	r30, 0x55	; 85
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	8d 7f       	andi	r24, 0xFD	; 253
    25ce:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG , 0 );
    25d0:	a5 e5       	ldi	r26, 0x55	; 85
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e5 e5       	ldi	r30, 0x55	; 85
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	81 60       	ori	r24, 0x01	; 1
    25dc:	8c 93       	st	X, r24
    25de:	87 c0       	rjmp	.+270    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
			break;


		case E_Interrupt_LowLevel:
			CLR_BIT(MCUCR_REG , 1 );
    25e0:	a5 e5       	ldi	r26, 0x55	; 85
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e5 e5       	ldi	r30, 0x55	; 85
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	8d 7f       	andi	r24, 0xFD	; 253
    25ec:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG , 0 );
    25ee:	a5 e5       	ldi	r26, 0x55	; 85
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e5 e5       	ldi	r30, 0x55	; 85
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8e 7f       	andi	r24, 0xFE	; 254
    25fa:	8c 93       	st	X, r24
    25fc:	78 c0       	rjmp	.+240    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
			break;
		}
		break;

		case E_INT1:
			switch(Copy_u8SenseControl)
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	3e 83       	std	Y+6, r19	; 0x06
    2606:	2d 83       	std	Y+5, r18	; 0x05
    2608:	8d 81       	ldd	r24, Y+5	; 0x05
    260a:	9e 81       	ldd	r25, Y+6	; 0x06
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	91 05       	cpc	r25, r1
    2610:	a9 f0       	breq	.+42     	; 0x263c <E_Interrupt_voidChangeSenseControl+0x138>
    2612:	2d 81       	ldd	r18, Y+5	; 0x05
    2614:	3e 81       	ldd	r19, Y+6	; 0x06
    2616:	22 30       	cpi	r18, 0x02	; 2
    2618:	31 05       	cpc	r19, r1
    261a:	2c f4       	brge	.+10     	; 0x2626 <E_Interrupt_voidChangeSenseControl+0x122>
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	d9 f0       	breq	.+54     	; 0x265a <E_Interrupt_voidChangeSenseControl+0x156>
    2624:	64 c0       	rjmp	.+200    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
    2626:	2d 81       	ldd	r18, Y+5	; 0x05
    2628:	3e 81       	ldd	r19, Y+6	; 0x06
    262a:	22 30       	cpi	r18, 0x02	; 2
    262c:	31 05       	cpc	r19, r1
    262e:	21 f1       	breq	.+72     	; 0x2678 <E_Interrupt_voidChangeSenseControl+0x174>
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	83 30       	cpi	r24, 0x03	; 3
    2636:	91 05       	cpc	r25, r1
    2638:	71 f1       	breq	.+92     	; 0x2696 <E_Interrupt_voidChangeSenseControl+0x192>
    263a:	59 c0       	rjmp	.+178    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
			{
			case E_Interrupt_RisingEdge:
				SET_BIT(MCUCR_REG , 3 );
    263c:	a5 e5       	ldi	r26, 0x55	; 85
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e5 e5       	ldi	r30, 0x55	; 85
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	88 60       	ori	r24, 0x08	; 8
    2648:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG , 2 );
    264a:	a5 e5       	ldi	r26, 0x55	; 85
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e5 e5       	ldi	r30, 0x55	; 85
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	84 60       	ori	r24, 0x04	; 4
    2656:	8c 93       	st	X, r24
    2658:	4a c0       	rjmp	.+148    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
				break;

			case E_Interrupt_FallingEdge:
				SET_BIT(MCUCR_REG , 3 );
    265a:	a5 e5       	ldi	r26, 0x55	; 85
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e5 e5       	ldi	r30, 0x55	; 85
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	88 60       	ori	r24, 0x08	; 8
    2666:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG , 2 );
    2668:	a5 e5       	ldi	r26, 0x55	; 85
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	e5 e5       	ldi	r30, 0x55	; 85
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	8b 7f       	andi	r24, 0xFB	; 251
    2674:	8c 93       	st	X, r24
    2676:	3b c0       	rjmp	.+118    	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
				break;

			case E_Interrupt_OnChange:
				CLR_BIT(MCUCR_REG , 3 );
    2678:	a5 e5       	ldi	r26, 0x55	; 85
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e5 e5       	ldi	r30, 0x55	; 85
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	87 7f       	andi	r24, 0xF7	; 247
    2684:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG , 2 );
    2686:	a5 e5       	ldi	r26, 0x55	; 85
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e5 e5       	ldi	r30, 0x55	; 85
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	84 60       	ori	r24, 0x04	; 4
    2692:	8c 93       	st	X, r24
    2694:	2c c0       	rjmp	.+88     	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>

				break;

			case E_Interrupt_LowLevel:
				CLR_BIT(MCUCR_REG , 3 );
    2696:	a5 e5       	ldi	r26, 0x55	; 85
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e5 e5       	ldi	r30, 0x55	; 85
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	87 7f       	andi	r24, 0xF7	; 247
    26a2:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG , 2 );
    26a4:	a5 e5       	ldi	r26, 0x55	; 85
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e5 e5       	ldi	r30, 0x55	; 85
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	8b 7f       	andi	r24, 0xFB	; 251
    26b0:	8c 93       	st	X, r24
    26b2:	1d c0       	rjmp	.+58     	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
				break;
			}
			break;

			case E_INT2:
				switch(Copy_u8SenseControl)
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	3c 83       	std	Y+4, r19	; 0x04
    26bc:	2b 83       	std	Y+3, r18	; 0x03
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	9c 81       	ldd	r25, Y+4	; 0x04
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	69 f0       	breq	.+26     	; 0x26e0 <E_Interrupt_voidChangeSenseControl+0x1dc>
    26c6:	2b 81       	ldd	r18, Y+3	; 0x03
    26c8:	3c 81       	ldd	r19, Y+4	; 0x04
    26ca:	21 30       	cpi	r18, 0x01	; 1
    26cc:	31 05       	cpc	r19, r1
    26ce:	79 f4       	brne	.+30     	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
				{
				case E_Interrupt_RisingEdge:
					SET_BIT(MCUCSR_REG , 6);
    26d0:	a4 e5       	ldi	r26, 0x54	; 84
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e4 e5       	ldi	r30, 0x54	; 84
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	80 64       	ori	r24, 0x40	; 64
    26dc:	8c 93       	st	X, r24
    26de:	07 c0       	rjmp	.+14     	; 0x26ee <E_Interrupt_voidChangeSenseControl+0x1ea>
					break;

				case E_Interrupt_FallingEdge:
					CLR_BIT(MCUCSR_REG , 6);
    26e0:	a4 e5       	ldi	r26, 0x54	; 84
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e4 e5       	ldi	r30, 0x54	; 84
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	8f 7b       	andi	r24, 0xBF	; 191
    26ec:	8c 93       	st	X, r24
				}
				break;
				default:
					break;
	}
}
    26ee:	2a 96       	adiw	r28, 0x0a	; 10
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <DIO_voidSetPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetPinDirection (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8Direction)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	29 97       	sbiw	r28, 0x09	; 9
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	6a 83       	std	Y+2, r22	; 0x02
    2718:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Direction)
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	39 87       	std	Y+9, r19	; 0x09
    2722:	28 87       	std	Y+8, r18	; 0x08
    2724:	88 85       	ldd	r24, Y+8	; 0x08
    2726:	99 85       	ldd	r25, Y+9	; 0x09
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	09 f4       	brne	.+2      	; 0x272e <DIO_voidSetPinDirection+0x2e>
    272c:	75 c0       	rjmp	.+234    	; 0x2818 <DIO_voidSetPinDirection+0x118>
    272e:	28 85       	ldd	r18, Y+8	; 0x08
    2730:	39 85       	ldd	r19, Y+9	; 0x09
    2732:	21 30       	cpi	r18, 0x01	; 1
    2734:	31 05       	cpc	r19, r1
    2736:	09 f0       	breq	.+2      	; 0x273a <DIO_voidSetPinDirection+0x3a>
    2738:	e2 c0       	rjmp	.+452    	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
	{

	case DIO_OUTPUT:

		switch(Copy_u8PortId)
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	3f 83       	std	Y+7, r19	; 0x07
    2742:	2e 83       	std	Y+6, r18	; 0x06
    2744:	8e 81       	ldd	r24, Y+6	; 0x06
    2746:	9f 81       	ldd	r25, Y+7	; 0x07
    2748:	81 30       	cpi	r24, 0x01	; 1
    274a:	91 05       	cpc	r25, r1
    274c:	49 f1       	breq	.+82     	; 0x27a0 <DIO_voidSetPinDirection+0xa0>
    274e:	2e 81       	ldd	r18, Y+6	; 0x06
    2750:	3f 81       	ldd	r19, Y+7	; 0x07
    2752:	22 30       	cpi	r18, 0x02	; 2
    2754:	31 05       	cpc	r19, r1
    2756:	2c f4       	brge	.+10     	; 0x2762 <DIO_voidSetPinDirection+0x62>
    2758:	8e 81       	ldd	r24, Y+6	; 0x06
    275a:	9f 81       	ldd	r25, Y+7	; 0x07
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	61 f0       	breq	.+24     	; 0x2778 <DIO_voidSetPinDirection+0x78>
    2760:	ce c0       	rjmp	.+412    	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
    2762:	2e 81       	ldd	r18, Y+6	; 0x06
    2764:	3f 81       	ldd	r19, Y+7	; 0x07
    2766:	22 30       	cpi	r18, 0x02	; 2
    2768:	31 05       	cpc	r19, r1
    276a:	71 f1       	breq	.+92     	; 0x27c8 <DIO_voidSetPinDirection+0xc8>
    276c:	8e 81       	ldd	r24, Y+6	; 0x06
    276e:	9f 81       	ldd	r25, Y+7	; 0x07
    2770:	83 30       	cpi	r24, 0x03	; 3
    2772:	91 05       	cpc	r25, r1
    2774:	e9 f1       	breq	.+122    	; 0x27f0 <DIO_voidSetPinDirection+0xf0>
    2776:	c3 c0       	rjmp	.+390    	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
		{
		case DIO_PORTA:
			SET_BIT(DIO_DDRA_REG,Copy_u8PinId);
    2778:	aa e3       	ldi	r26, 0x3A	; 58
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	ea e3       	ldi	r30, 0x3A	; 58
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	48 2f       	mov	r20, r24
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	02 2e       	mov	r0, r18
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <DIO_voidSetPinDirection+0x96>
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	0a 94       	dec	r0
    2798:	e2 f7       	brpl	.-8      	; 0x2792 <DIO_voidSetPinDirection+0x92>
    279a:	84 2b       	or	r24, r20
    279c:	8c 93       	st	X, r24
    279e:	af c0       	rjmp	.+350    	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
		break;

		case DIO_PORTB:
			SET_BIT(DIO_DDRB_REG,Copy_u8PinId);
    27a0:	a7 e3       	ldi	r26, 0x37	; 55
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e7 e3       	ldi	r30, 0x37	; 55
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	48 2f       	mov	r20, r24
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	02 2e       	mov	r0, r18
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <DIO_voidSetPinDirection+0xbe>
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	0a 94       	dec	r0
    27c0:	e2 f7       	brpl	.-8      	; 0x27ba <DIO_voidSetPinDirection+0xba>
    27c2:	84 2b       	or	r24, r20
    27c4:	8c 93       	st	X, r24
    27c6:	9b c0       	rjmp	.+310    	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
		break;

		case DIO_PORTC:
			SET_BIT(DIO_DDRC_REG,Copy_u8PinId);
    27c8:	a4 e3       	ldi	r26, 0x34	; 52
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e4 e3       	ldi	r30, 0x34	; 52
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	48 2f       	mov	r20, r24
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	02 2e       	mov	r0, r18
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <DIO_voidSetPinDirection+0xe6>
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	0a 94       	dec	r0
    27e8:	e2 f7       	brpl	.-8      	; 0x27e2 <DIO_voidSetPinDirection+0xe2>
    27ea:	84 2b       	or	r24, r20
    27ec:	8c 93       	st	X, r24
    27ee:	87 c0       	rjmp	.+270    	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
		break;


		case DIO_PORTD:
			SET_BIT(DIO_DDRD_REG,Copy_u8PinId);
    27f0:	a1 e3       	ldi	r26, 0x31	; 49
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e1 e3       	ldi	r30, 0x31	; 49
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	48 2f       	mov	r20, r24
    27fc:	8a 81       	ldd	r24, Y+2	; 0x02
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	02 2e       	mov	r0, r18
    2808:	02 c0       	rjmp	.+4      	; 0x280e <DIO_voidSetPinDirection+0x10e>
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	0a 94       	dec	r0
    2810:	e2 f7       	brpl	.-8      	; 0x280a <DIO_voidSetPinDirection+0x10a>
    2812:	84 2b       	or	r24, r20
    2814:	8c 93       	st	X, r24
    2816:	73 c0       	rjmp	.+230    	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
		break;


	case DIO_INPUT:

		switch(Copy_u8PortId)
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	3d 83       	std	Y+5, r19	; 0x05
    2820:	2c 83       	std	Y+4, r18	; 0x04
    2822:	8c 81       	ldd	r24, Y+4	; 0x04
    2824:	9d 81       	ldd	r25, Y+5	; 0x05
    2826:	81 30       	cpi	r24, 0x01	; 1
    2828:	91 05       	cpc	r25, r1
    282a:	59 f1       	breq	.+86     	; 0x2882 <DIO_voidSetPinDirection+0x182>
    282c:	2c 81       	ldd	r18, Y+4	; 0x04
    282e:	3d 81       	ldd	r19, Y+5	; 0x05
    2830:	22 30       	cpi	r18, 0x02	; 2
    2832:	31 05       	cpc	r19, r1
    2834:	2c f4       	brge	.+10     	; 0x2840 <DIO_voidSetPinDirection+0x140>
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	9d 81       	ldd	r25, Y+5	; 0x05
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	69 f0       	breq	.+26     	; 0x2858 <DIO_voidSetPinDirection+0x158>
    283e:	5f c0       	rjmp	.+190    	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
    2840:	2c 81       	ldd	r18, Y+4	; 0x04
    2842:	3d 81       	ldd	r19, Y+5	; 0x05
    2844:	22 30       	cpi	r18, 0x02	; 2
    2846:	31 05       	cpc	r19, r1
    2848:	89 f1       	breq	.+98     	; 0x28ac <DIO_voidSetPinDirection+0x1ac>
    284a:	8c 81       	ldd	r24, Y+4	; 0x04
    284c:	9d 81       	ldd	r25, Y+5	; 0x05
    284e:	83 30       	cpi	r24, 0x03	; 3
    2850:	91 05       	cpc	r25, r1
    2852:	09 f4       	brne	.+2      	; 0x2856 <DIO_voidSetPinDirection+0x156>
    2854:	40 c0       	rjmp	.+128    	; 0x28d6 <DIO_voidSetPinDirection+0x1d6>
    2856:	53 c0       	rjmp	.+166    	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
				{
				case DIO_PORTA:
					CLR_BIT(DIO_DDRA_REG,Copy_u8PinId);
    2858:	aa e3       	ldi	r26, 0x3A	; 58
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	ea e3       	ldi	r30, 0x3A	; 58
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	48 2f       	mov	r20, r24
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	28 2f       	mov	r18, r24
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	02 2e       	mov	r0, r18
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <DIO_voidSetPinDirection+0x176>
    2872:	88 0f       	add	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	0a 94       	dec	r0
    2878:	e2 f7       	brpl	.-8      	; 0x2872 <DIO_voidSetPinDirection+0x172>
    287a:	80 95       	com	r24
    287c:	84 23       	and	r24, r20
    287e:	8c 93       	st	X, r24
    2880:	3e c0       	rjmp	.+124    	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
				break;

				case DIO_PORTB:
					CLR_BIT(DIO_DDRB_REG,Copy_u8PinId);
    2882:	a7 e3       	ldi	r26, 0x37	; 55
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e7 e3       	ldi	r30, 0x37	; 55
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	48 2f       	mov	r20, r24
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	02 2e       	mov	r0, r18
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <DIO_voidSetPinDirection+0x1a0>
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	0a 94       	dec	r0
    28a2:	e2 f7       	brpl	.-8      	; 0x289c <DIO_voidSetPinDirection+0x19c>
    28a4:	80 95       	com	r24
    28a6:	84 23       	and	r24, r20
    28a8:	8c 93       	st	X, r24
    28aa:	29 c0       	rjmp	.+82     	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
				break;

				case DIO_PORTC:
					CLR_BIT(DIO_DDRC_REG,Copy_u8PinId);
    28ac:	a4 e3       	ldi	r26, 0x34	; 52
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e4 e3       	ldi	r30, 0x34	; 52
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	48 2f       	mov	r20, r24
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	02 2e       	mov	r0, r18
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <DIO_voidSetPinDirection+0x1ca>
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	0a 94       	dec	r0
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <DIO_voidSetPinDirection+0x1c6>
    28ce:	80 95       	com	r24
    28d0:	84 23       	and	r24, r20
    28d2:	8c 93       	st	X, r24
    28d4:	14 c0       	rjmp	.+40     	; 0x28fe <DIO_voidSetPinDirection+0x1fe>
				break;


				case DIO_PORTD:
					CLR_BIT(DIO_DDRD_REG,Copy_u8PinId);
    28d6:	a1 e3       	ldi	r26, 0x31	; 49
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e1 e3       	ldi	r30, 0x31	; 49
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	48 2f       	mov	r20, r24
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	02 2e       	mov	r0, r18
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <DIO_voidSetPinDirection+0x1f4>
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	0a 94       	dec	r0
    28f6:	e2 f7       	brpl	.-8      	; 0x28f0 <DIO_voidSetPinDirection+0x1f0>
    28f8:	80 95       	com	r24
    28fa:	84 23       	and	r24, r20
    28fc:	8c 93       	st	X, r24
	default:

		break;
	}

}
    28fe:	29 96       	adiw	r28, 0x09	; 9
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <DIO_voidSetPinValue>:




void DIO_voidSetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8Value)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	29 97       	sbiw	r28, 0x09	; 9
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	6a 83       	std	Y+2, r22	; 0x02
    2928:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Value)
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	39 87       	std	Y+9, r19	; 0x09
    2932:	28 87       	std	Y+8, r18	; 0x08
    2934:	88 85       	ldd	r24, Y+8	; 0x08
    2936:	99 85       	ldd	r25, Y+9	; 0x09
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	09 f4       	brne	.+2      	; 0x293e <DIO_voidSetPinValue+0x2e>
    293c:	75 c0       	rjmp	.+234    	; 0x2a28 <DIO_voidSetPinValue+0x118>
    293e:	28 85       	ldd	r18, Y+8	; 0x08
    2940:	39 85       	ldd	r19, Y+9	; 0x09
    2942:	21 30       	cpi	r18, 0x01	; 1
    2944:	31 05       	cpc	r19, r1
    2946:	09 f0       	breq	.+2      	; 0x294a <DIO_voidSetPinValue+0x3a>
    2948:	e2 c0       	rjmp	.+452    	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
		{

		case DIO_HIGH:

			switch(Copy_u8PortId)
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	3f 83       	std	Y+7, r19	; 0x07
    2952:	2e 83       	std	Y+6, r18	; 0x06
    2954:	8e 81       	ldd	r24, Y+6	; 0x06
    2956:	9f 81       	ldd	r25, Y+7	; 0x07
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	91 05       	cpc	r25, r1
    295c:	49 f1       	breq	.+82     	; 0x29b0 <DIO_voidSetPinValue+0xa0>
    295e:	2e 81       	ldd	r18, Y+6	; 0x06
    2960:	3f 81       	ldd	r19, Y+7	; 0x07
    2962:	22 30       	cpi	r18, 0x02	; 2
    2964:	31 05       	cpc	r19, r1
    2966:	2c f4       	brge	.+10     	; 0x2972 <DIO_voidSetPinValue+0x62>
    2968:	8e 81       	ldd	r24, Y+6	; 0x06
    296a:	9f 81       	ldd	r25, Y+7	; 0x07
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	61 f0       	breq	.+24     	; 0x2988 <DIO_voidSetPinValue+0x78>
    2970:	ce c0       	rjmp	.+412    	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
    2972:	2e 81       	ldd	r18, Y+6	; 0x06
    2974:	3f 81       	ldd	r19, Y+7	; 0x07
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	31 05       	cpc	r19, r1
    297a:	71 f1       	breq	.+92     	; 0x29d8 <DIO_voidSetPinValue+0xc8>
    297c:	8e 81       	ldd	r24, Y+6	; 0x06
    297e:	9f 81       	ldd	r25, Y+7	; 0x07
    2980:	83 30       	cpi	r24, 0x03	; 3
    2982:	91 05       	cpc	r25, r1
    2984:	e9 f1       	breq	.+122    	; 0x2a00 <DIO_voidSetPinValue+0xf0>
    2986:	c3 c0       	rjmp	.+390    	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
			{
			case DIO_PORTA:
				SET_BIT(DIO_PORTA_REG,Copy_u8PinId);
    2988:	ab e3       	ldi	r26, 0x3B	; 59
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	eb e3       	ldi	r30, 0x3B	; 59
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	48 2f       	mov	r20, r24
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	02 2e       	mov	r0, r18
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <DIO_voidSetPinValue+0x96>
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	0a 94       	dec	r0
    29a8:	e2 f7       	brpl	.-8      	; 0x29a2 <DIO_voidSetPinValue+0x92>
    29aa:	84 2b       	or	r24, r20
    29ac:	8c 93       	st	X, r24
    29ae:	af c0       	rjmp	.+350    	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
			break;

			case DIO_PORTB:
				SET_BIT(DIO_PORTB_REG,Copy_u8PinId);
    29b0:	a8 e3       	ldi	r26, 0x38	; 56
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e8 e3       	ldi	r30, 0x38	; 56
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	48 2f       	mov	r20, r24
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	02 2e       	mov	r0, r18
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <DIO_voidSetPinValue+0xbe>
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	0a 94       	dec	r0
    29d0:	e2 f7       	brpl	.-8      	; 0x29ca <DIO_voidSetPinValue+0xba>
    29d2:	84 2b       	or	r24, r20
    29d4:	8c 93       	st	X, r24
    29d6:	9b c0       	rjmp	.+310    	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
			break;

			case DIO_PORTC:
				SET_BIT(DIO_PORTC_REG,Copy_u8PinId);
    29d8:	a5 e3       	ldi	r26, 0x35	; 53
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e5 e3       	ldi	r30, 0x35	; 53
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	48 2f       	mov	r20, r24
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	02 2e       	mov	r0, r18
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <DIO_voidSetPinValue+0xe6>
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	0a 94       	dec	r0
    29f8:	e2 f7       	brpl	.-8      	; 0x29f2 <DIO_voidSetPinValue+0xe2>
    29fa:	84 2b       	or	r24, r20
    29fc:	8c 93       	st	X, r24
    29fe:	87 c0       	rjmp	.+270    	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
			break;


			case DIO_PORTD:
				SET_BIT(DIO_PORTD_REG,Copy_u8PinId);
    2a00:	a2 e3       	ldi	r26, 0x32	; 50
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e2 e3       	ldi	r30, 0x32	; 50
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	48 2f       	mov	r20, r24
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	02 2e       	mov	r0, r18
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <DIO_voidSetPinValue+0x10e>
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	0a 94       	dec	r0
    2a20:	e2 f7       	brpl	.-8      	; 0x2a1a <DIO_voidSetPinValue+0x10a>
    2a22:	84 2b       	or	r24, r20
    2a24:	8c 93       	st	X, r24
    2a26:	73 c0       	rjmp	.+230    	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
			break;


		case DIO_LOW:

			switch(Copy_u8PortId)
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	3d 83       	std	Y+5, r19	; 0x05
    2a30:	2c 83       	std	Y+4, r18	; 0x04
    2a32:	8c 81       	ldd	r24, Y+4	; 0x04
    2a34:	9d 81       	ldd	r25, Y+5	; 0x05
    2a36:	81 30       	cpi	r24, 0x01	; 1
    2a38:	91 05       	cpc	r25, r1
    2a3a:	59 f1       	breq	.+86     	; 0x2a92 <DIO_voidSetPinValue+0x182>
    2a3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a40:	22 30       	cpi	r18, 0x02	; 2
    2a42:	31 05       	cpc	r19, r1
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <DIO_voidSetPinValue+0x140>
    2a46:	8c 81       	ldd	r24, Y+4	; 0x04
    2a48:	9d 81       	ldd	r25, Y+5	; 0x05
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f0       	breq	.+26     	; 0x2a68 <DIO_voidSetPinValue+0x158>
    2a4e:	5f c0       	rjmp	.+190    	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
    2a50:	2c 81       	ldd	r18, Y+4	; 0x04
    2a52:	3d 81       	ldd	r19, Y+5	; 0x05
    2a54:	22 30       	cpi	r18, 0x02	; 2
    2a56:	31 05       	cpc	r19, r1
    2a58:	89 f1       	breq	.+98     	; 0x2abc <DIO_voidSetPinValue+0x1ac>
    2a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5e:	83 30       	cpi	r24, 0x03	; 3
    2a60:	91 05       	cpc	r25, r1
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <DIO_voidSetPinValue+0x156>
    2a64:	40 c0       	rjmp	.+128    	; 0x2ae6 <DIO_voidSetPinValue+0x1d6>
    2a66:	53 c0       	rjmp	.+166    	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
					{
					case DIO_PORTA:
						CLR_BIT(DIO_PORTA_REG,Copy_u8PinId);
    2a68:	ab e3       	ldi	r26, 0x3B	; 59
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	eb e3       	ldi	r30, 0x3B	; 59
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	48 2f       	mov	r20, r24
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	02 2e       	mov	r0, r18
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <DIO_voidSetPinValue+0x176>
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	0a 94       	dec	r0
    2a88:	e2 f7       	brpl	.-8      	; 0x2a82 <DIO_voidSetPinValue+0x172>
    2a8a:	80 95       	com	r24
    2a8c:	84 23       	and	r24, r20
    2a8e:	8c 93       	st	X, r24
    2a90:	3e c0       	rjmp	.+124    	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
					break;

					case DIO_PORTB:
						CLR_BIT(DIO_PORTB_REG,Copy_u8PinId);
    2a92:	a8 e3       	ldi	r26, 0x38	; 56
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e8 e3       	ldi	r30, 0x38	; 56
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	48 2f       	mov	r20, r24
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	02 2e       	mov	r0, r18
    2aaa:	02 c0       	rjmp	.+4      	; 0x2ab0 <DIO_voidSetPinValue+0x1a0>
    2aac:	88 0f       	add	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	0a 94       	dec	r0
    2ab2:	e2 f7       	brpl	.-8      	; 0x2aac <DIO_voidSetPinValue+0x19c>
    2ab4:	80 95       	com	r24
    2ab6:	84 23       	and	r24, r20
    2ab8:	8c 93       	st	X, r24
    2aba:	29 c0       	rjmp	.+82     	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
					break;

					case DIO_PORTC:
						CLR_BIT(DIO_PORTC_REG,Copy_u8PinId);
    2abc:	a5 e3       	ldi	r26, 0x35	; 53
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	e5 e3       	ldi	r30, 0x35	; 53
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	48 2f       	mov	r20, r24
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	02 2e       	mov	r0, r18
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <DIO_voidSetPinValue+0x1ca>
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	0a 94       	dec	r0
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <DIO_voidSetPinValue+0x1c6>
    2ade:	80 95       	com	r24
    2ae0:	84 23       	and	r24, r20
    2ae2:	8c 93       	st	X, r24
    2ae4:	14 c0       	rjmp	.+40     	; 0x2b0e <DIO_voidSetPinValue+0x1fe>
					break;


					case DIO_PORTD:
						CLR_BIT(DIO_PORTD_REG,Copy_u8PinId);
    2ae6:	a2 e3       	ldi	r26, 0x32	; 50
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e2 e3       	ldi	r30, 0x32	; 50
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	48 2f       	mov	r20, r24
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	02 2e       	mov	r0, r18
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <DIO_voidSetPinValue+0x1f4>
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	0a 94       	dec	r0
    2b06:	e2 f7       	brpl	.-8      	; 0x2b00 <DIO_voidSetPinValue+0x1f0>
    2b08:	80 95       	com	r24
    2b0a:	84 23       	and	r24, r20
    2b0c:	8c 93       	st	X, r24

			break;
		}


}
    2b0e:	29 96       	adiw	r28, 0x09	; 9
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <DIO_u8GetPinValue+0x6>
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <DIO_u8GetPinValue+0x8>
    2b28:	0f 92       	push	r0
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	8a 83       	std	Y+2, r24	; 0x02
    2b30:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ReturnedValue=255;
    2b32:	8f ef       	ldi	r24, 0xFF	; 255
    2b34:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortId)
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	3d 83       	std	Y+5, r19	; 0x05
    2b3e:	2c 83       	std	Y+4, r18	; 0x04
    2b40:	4c 81       	ldd	r20, Y+4	; 0x04
    2b42:	5d 81       	ldd	r21, Y+5	; 0x05
    2b44:	41 30       	cpi	r20, 0x01	; 1
    2b46:	51 05       	cpc	r21, r1
    2b48:	41 f1       	breq	.+80     	; 0x2b9a <DIO_u8GetPinValue+0x7a>
    2b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4e:	82 30       	cpi	r24, 0x02	; 2
    2b50:	91 05       	cpc	r25, r1
    2b52:	34 f4       	brge	.+12     	; 0x2b60 <DIO_u8GetPinValue+0x40>
    2b54:	2c 81       	ldd	r18, Y+4	; 0x04
    2b56:	3d 81       	ldd	r19, Y+5	; 0x05
    2b58:	21 15       	cp	r18, r1
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	61 f0       	breq	.+24     	; 0x2b76 <DIO_u8GetPinValue+0x56>
    2b5e:	52 c0       	rjmp	.+164    	; 0x2c04 <DIO_u8GetPinValue+0xe4>
    2b60:	4c 81       	ldd	r20, Y+4	; 0x04
    2b62:	5d 81       	ldd	r21, Y+5	; 0x05
    2b64:	42 30       	cpi	r20, 0x02	; 2
    2b66:	51 05       	cpc	r21, r1
    2b68:	51 f1       	breq	.+84     	; 0x2bbe <DIO_u8GetPinValue+0x9e>
    2b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6e:	83 30       	cpi	r24, 0x03	; 3
    2b70:	91 05       	cpc	r25, r1
    2b72:	b9 f1       	breq	.+110    	; 0x2be2 <DIO_u8GetPinValue+0xc2>
    2b74:	47 c0       	rjmp	.+142    	; 0x2c04 <DIO_u8GetPinValue+0xe4>
						{
						case DIO_PORTA:
						Local_u8ReturnedValue=GET_BIT(DIO_PINA_REG,Copy_u8PinId);
    2b76:	e9 e3       	ldi	r30, 0x39	; 57
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a9 01       	movw	r20, r18
    2b88:	02 c0       	rjmp	.+4      	; 0x2b8e <DIO_u8GetPinValue+0x6e>
    2b8a:	55 95       	asr	r21
    2b8c:	47 95       	ror	r20
    2b8e:	8a 95       	dec	r24
    2b90:	e2 f7       	brpl	.-8      	; 0x2b8a <DIO_u8GetPinValue+0x6a>
    2b92:	ca 01       	movw	r24, r20
    2b94:	81 70       	andi	r24, 0x01	; 1
    2b96:	89 83       	std	Y+1, r24	; 0x01
    2b98:	35 c0       	rjmp	.+106    	; 0x2c04 <DIO_u8GetPinValue+0xe4>
						break;

						case DIO_PORTB:
						Local_u8ReturnedValue=GET_BIT(DIO_PINB_REG,Copy_u8PinId);
    2b9a:	e6 e3       	ldi	r30, 0x36	; 54
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	a9 01       	movw	r20, r18
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <DIO_u8GetPinValue+0x92>
    2bae:	55 95       	asr	r21
    2bb0:	47 95       	ror	r20
    2bb2:	8a 95       	dec	r24
    2bb4:	e2 f7       	brpl	.-8      	; 0x2bae <DIO_u8GetPinValue+0x8e>
    2bb6:	ca 01       	movw	r24, r20
    2bb8:	81 70       	andi	r24, 0x01	; 1
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	23 c0       	rjmp	.+70     	; 0x2c04 <DIO_u8GetPinValue+0xe4>
						break;

						case DIO_PORTC:
						Local_u8ReturnedValue=GET_BIT(DIO_PINC_REG,Copy_u8PinId);
    2bbe:	e3 e3       	ldi	r30, 0x33	; 51
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	28 2f       	mov	r18, r24
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	88 2f       	mov	r24, r24
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	a9 01       	movw	r20, r18
    2bd0:	02 c0       	rjmp	.+4      	; 0x2bd6 <DIO_u8GetPinValue+0xb6>
    2bd2:	55 95       	asr	r21
    2bd4:	47 95       	ror	r20
    2bd6:	8a 95       	dec	r24
    2bd8:	e2 f7       	brpl	.-8      	; 0x2bd2 <DIO_u8GetPinValue+0xb2>
    2bda:	ca 01       	movw	r24, r20
    2bdc:	81 70       	andi	r24, 0x01	; 1
    2bde:	89 83       	std	Y+1, r24	; 0x01
    2be0:	11 c0       	rjmp	.+34     	; 0x2c04 <DIO_u8GetPinValue+0xe4>
						break;


						case DIO_PORTD:
						Local_u8ReturnedValue=GET_BIT(DIO_PIND_REG,Copy_u8PinId);
    2be2:	e0 e3       	ldi	r30, 0x30	; 48
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	88 2f       	mov	r24, r24
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	a9 01       	movw	r20, r18
    2bf4:	02 c0       	rjmp	.+4      	; 0x2bfa <DIO_u8GetPinValue+0xda>
    2bf6:	55 95       	asr	r21
    2bf8:	47 95       	ror	r20
    2bfa:	8a 95       	dec	r24
    2bfc:	e2 f7       	brpl	.-8      	; 0x2bf6 <DIO_u8GetPinValue+0xd6>
    2bfe:	ca 01       	movw	r24, r20
    2c00:	81 70       	andi	r24, 0x01	; 1
    2c02:	89 83       	std	Y+1, r24	; 0x01
						break;
						}



	return Local_u8ReturnedValue;
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection (u8 Copy_u8PortId,u8 Copy_u8Direction)
{
    2c16:	df 93       	push	r29
    2c18:	cf 93       	push	r28
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	28 97       	sbiw	r28, 0x08	; 8
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Direction)
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	38 87       	std	Y+8, r19	; 0x08
    2c36:	2f 83       	std	Y+7, r18	; 0x07
    2c38:	8f 81       	ldd	r24, Y+7	; 0x07
    2c3a:	98 85       	ldd	r25, Y+8	; 0x08
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	c9 f1       	breq	.+114    	; 0x2cb2 <DIO_voidSetPortDirection+0x9c>
    2c40:	2f 81       	ldd	r18, Y+7	; 0x07
    2c42:	38 85       	ldd	r19, Y+8	; 0x08
    2c44:	21 30       	cpi	r18, 0x01	; 1
    2c46:	31 05       	cpc	r19, r1
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <DIO_voidSetPortDirection+0x36>
    2c4a:	61 c0       	rjmp	.+194    	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
	{

	case DIO_OUTPUT:

		switch(Copy_u8PortId)
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	28 2f       	mov	r18, r24
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	3e 83       	std	Y+6, r19	; 0x06
    2c54:	2d 83       	std	Y+5, r18	; 0x05
    2c56:	8d 81       	ldd	r24, Y+5	; 0x05
    2c58:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5a:	81 30       	cpi	r24, 0x01	; 1
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	d1 f0       	breq	.+52     	; 0x2c94 <DIO_voidSetPortDirection+0x7e>
    2c60:	2d 81       	ldd	r18, Y+5	; 0x05
    2c62:	3e 81       	ldd	r19, Y+6	; 0x06
    2c64:	22 30       	cpi	r18, 0x02	; 2
    2c66:	31 05       	cpc	r19, r1
    2c68:	2c f4       	brge	.+10     	; 0x2c74 <DIO_voidSetPortDirection+0x5e>
    2c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6e:	00 97       	sbiw	r24, 0x00	; 0
    2c70:	61 f0       	breq	.+24     	; 0x2c8a <DIO_voidSetPortDirection+0x74>
    2c72:	4d c0       	rjmp	.+154    	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
    2c74:	2d 81       	ldd	r18, Y+5	; 0x05
    2c76:	3e 81       	ldd	r19, Y+6	; 0x06
    2c78:	22 30       	cpi	r18, 0x02	; 2
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	81 f0       	breq	.+32     	; 0x2c9e <DIO_voidSetPortDirection+0x88>
    2c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c80:	9e 81       	ldd	r25, Y+6	; 0x06
    2c82:	83 30       	cpi	r24, 0x03	; 3
    2c84:	91 05       	cpc	r25, r1
    2c86:	81 f0       	breq	.+32     	; 0x2ca8 <DIO_voidSetPortDirection+0x92>
    2c88:	42 c0       	rjmp	.+132    	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
		{
		case DIO_PORTA:
			DIO_DDRA_REG=DIO_PORT_OUTPUT;
    2c8a:	ea e3       	ldi	r30, 0x3A	; 58
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	8f ef       	ldi	r24, 0xFF	; 255
    2c90:	80 83       	st	Z, r24
    2c92:	3d c0       	rjmp	.+122    	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
			break;

		case DIO_PORTB:
			DIO_DDRB_REG=DIO_PORT_OUTPUT;
    2c94:	e7 e3       	ldi	r30, 0x37	; 55
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	8f ef       	ldi	r24, 0xFF	; 255
    2c9a:	80 83       	st	Z, r24
    2c9c:	38 c0       	rjmp	.+112    	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
		break;

		case DIO_PORTC:
			DIO_DDRC_REG=DIO_PORT_OUTPUT;
    2c9e:	e4 e3       	ldi	r30, 0x34	; 52
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	8f ef       	ldi	r24, 0xFF	; 255
    2ca4:	80 83       	st	Z, r24
    2ca6:	33 c0       	rjmp	.+102    	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
		break;


		case DIO_PORTD:
			DIO_DDRD_REG=DIO_PORT_OUTPUT;
    2ca8:	e1 e3       	ldi	r30, 0x31	; 49
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	8f ef       	ldi	r24, 0xFF	; 255
    2cae:	80 83       	st	Z, r24
    2cb0:	2e c0       	rjmp	.+92     	; 0x2d0e <DIO_voidSetPortDirection+0xf8>



	case DIO_INPUT:

		switch(Copy_u8PortId)
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	28 2f       	mov	r18, r24
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	3c 83       	std	Y+4, r19	; 0x04
    2cba:	2b 83       	std	Y+3, r18	; 0x03
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc0:	81 30       	cpi	r24, 0x01	; 1
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	c9 f0       	breq	.+50     	; 0x2cf8 <DIO_voidSetPortDirection+0xe2>
    2cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc8:	3c 81       	ldd	r19, Y+4	; 0x04
    2cca:	22 30       	cpi	r18, 0x02	; 2
    2ccc:	31 05       	cpc	r19, r1
    2cce:	2c f4       	brge	.+10     	; 0x2cda <DIO_voidSetPortDirection+0xc4>
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	61 f0       	breq	.+24     	; 0x2cf0 <DIO_voidSetPortDirection+0xda>
    2cd8:	1a c0       	rjmp	.+52     	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
    2cda:	2b 81       	ldd	r18, Y+3	; 0x03
    2cdc:	3c 81       	ldd	r19, Y+4	; 0x04
    2cde:	22 30       	cpi	r18, 0x02	; 2
    2ce0:	31 05       	cpc	r19, r1
    2ce2:	71 f0       	breq	.+28     	; 0x2d00 <DIO_voidSetPortDirection+0xea>
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce8:	83 30       	cpi	r24, 0x03	; 3
    2cea:	91 05       	cpc	r25, r1
    2cec:	69 f0       	breq	.+26     	; 0x2d08 <DIO_voidSetPortDirection+0xf2>
    2cee:	0f c0       	rjmp	.+30     	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
				{
				case DIO_PORTA:
					DIO_DDRA_REG=DIO_PORT_INPUT;
    2cf0:	ea e3       	ldi	r30, 0x3A	; 58
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	10 82       	st	Z, r1
    2cf6:	0b c0       	rjmp	.+22     	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
				break;

				case DIO_PORTB:
					DIO_DDRB_REG=DIO_PORT_INPUT;
    2cf8:	e7 e3       	ldi	r30, 0x37	; 55
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	10 82       	st	Z, r1
    2cfe:	07 c0       	rjmp	.+14     	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
				break;

				case DIO_PORTC:
					DIO_DDRC_REG=DIO_PORT_INPUT;
    2d00:	e4 e3       	ldi	r30, 0x34	; 52
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	10 82       	st	Z, r1
    2d06:	03 c0       	rjmp	.+6      	; 0x2d0e <DIO_voidSetPortDirection+0xf8>
				break;


				case DIO_PORTD:
					DIO_DDRD_REG=DIO_PORT_INPUT;
    2d08:	e1 e3       	ldi	r30, 0x31	; 49
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	10 82       	st	Z, r1
				break;
				}
	}
}
    2d0e:	28 96       	adiw	r28, 0x08	; 8
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 Copy_u8PortId,u8 Copy_u8Value)
{
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <DIO_voidSetPortValue+0x6>
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <DIO_voidSetPortValue+0x8>
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	89 83       	std	Y+1, r24	; 0x01
    2d2e:	6a 83       	std	Y+2, r22	; 0x02


			switch(Copy_u8PortId)
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	3c 83       	std	Y+4, r19	; 0x04
    2d38:	2b 83       	std	Y+3, r18	; 0x03
    2d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3e:	81 30       	cpi	r24, 0x01	; 1
    2d40:	91 05       	cpc	r25, r1
    2d42:	d1 f0       	breq	.+52     	; 0x2d78 <DIO_voidSetPortValue+0x58>
    2d44:	2b 81       	ldd	r18, Y+3	; 0x03
    2d46:	3c 81       	ldd	r19, Y+4	; 0x04
    2d48:	22 30       	cpi	r18, 0x02	; 2
    2d4a:	31 05       	cpc	r19, r1
    2d4c:	2c f4       	brge	.+10     	; 0x2d58 <DIO_voidSetPortValue+0x38>
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	61 f0       	breq	.+24     	; 0x2d6e <DIO_voidSetPortValue+0x4e>
    2d56:	1e c0       	rjmp	.+60     	; 0x2d94 <DIO_voidSetPortValue+0x74>
    2d58:	2b 81       	ldd	r18, Y+3	; 0x03
    2d5a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d5c:	22 30       	cpi	r18, 0x02	; 2
    2d5e:	31 05       	cpc	r19, r1
    2d60:	81 f0       	breq	.+32     	; 0x2d82 <DIO_voidSetPortValue+0x62>
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	9c 81       	ldd	r25, Y+4	; 0x04
    2d66:	83 30       	cpi	r24, 0x03	; 3
    2d68:	91 05       	cpc	r25, r1
    2d6a:	81 f0       	breq	.+32     	; 0x2d8c <DIO_voidSetPortValue+0x6c>
    2d6c:	13 c0       	rjmp	.+38     	; 0x2d94 <DIO_voidSetPortValue+0x74>
			{
			case DIO_PORTA:
				DIO_PORTA_REG=Copy_u8Value;
    2d6e:	eb e3       	ldi	r30, 0x3B	; 59
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	80 83       	st	Z, r24
    2d76:	0e c0       	rjmp	.+28     	; 0x2d94 <DIO_voidSetPortValue+0x74>
			break;

			case DIO_PORTB:
				DIO_PORTB_REG=Copy_u8Value;
    2d78:	e8 e3       	ldi	r30, 0x38	; 56
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7e:	80 83       	st	Z, r24
    2d80:	09 c0       	rjmp	.+18     	; 0x2d94 <DIO_voidSetPortValue+0x74>
			break;

			case DIO_PORTC:
				DIO_PORTC_REG=Copy_u8Value;
    2d82:	e5 e3       	ldi	r30, 0x35	; 53
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	80 83       	st	Z, r24
    2d8a:	04 c0       	rjmp	.+8      	; 0x2d94 <DIO_voidSetPortValue+0x74>
			break;


			case DIO_PORTD:
				DIO_PORTD_REG=Copy_u8Value;
    2d8c:	e2 e3       	ldi	r30, 0x32	; 50
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	80 83       	st	Z, r24
			break;
			}

}
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <DIO_u8GetPortValue>:




u8 DIO_u8GetPortValue(u8 Copy_u8PortId)
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <DIO_u8GetPortValue+0x6>
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <DIO_u8GetPortValue+0x8>
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ReturnedValue=255;
    2db0:	8f ef       	ldi	r24, 0xFF	; 255
    2db2:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortId)
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	3c 83       	std	Y+4, r19	; 0x04
    2dbc:	2b 83       	std	Y+3, r18	; 0x03
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	81 30       	cpi	r24, 0x01	; 1
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	d1 f0       	breq	.+52     	; 0x2dfc <DIO_u8GetPortValue+0x5a>
    2dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    2dca:	3c 81       	ldd	r19, Y+4	; 0x04
    2dcc:	22 30       	cpi	r18, 0x02	; 2
    2dce:	31 05       	cpc	r19, r1
    2dd0:	2c f4       	brge	.+10     	; 0x2ddc <DIO_u8GetPortValue+0x3a>
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	61 f0       	breq	.+24     	; 0x2df2 <DIO_u8GetPortValue+0x50>
    2dda:	1e c0       	rjmp	.+60     	; 0x2e18 <DIO_u8GetPortValue+0x76>
    2ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dde:	3c 81       	ldd	r19, Y+4	; 0x04
    2de0:	22 30       	cpi	r18, 0x02	; 2
    2de2:	31 05       	cpc	r19, r1
    2de4:	81 f0       	breq	.+32     	; 0x2e06 <DIO_u8GetPortValue+0x64>
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	83 30       	cpi	r24, 0x03	; 3
    2dec:	91 05       	cpc	r25, r1
    2dee:	81 f0       	breq	.+32     	; 0x2e10 <DIO_u8GetPortValue+0x6e>
    2df0:	13 c0       	rjmp	.+38     	; 0x2e18 <DIO_u8GetPortValue+0x76>
						{
						case DIO_PORTA:
						Local_u8ReturnedValue=DIO_PINA_REG;
    2df2:	e9 e3       	ldi	r30, 0x39	; 57
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	0e c0       	rjmp	.+28     	; 0x2e18 <DIO_u8GetPortValue+0x76>
						break;

						case DIO_PORTB:
						Local_u8ReturnedValue=DIO_PINB_REG;
    2dfc:	e6 e3       	ldi	r30, 0x36	; 54
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	89 83       	std	Y+1, r24	; 0x01
    2e04:	09 c0       	rjmp	.+18     	; 0x2e18 <DIO_u8GetPortValue+0x76>
						break;

						case DIO_PORTC:
						Local_u8ReturnedValue=DIO_PINC_REG;
    2e06:	e3 e3       	ldi	r30, 0x33	; 51
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	04 c0       	rjmp	.+8      	; 0x2e18 <DIO_u8GetPortValue+0x76>
						break;


						case DIO_PORTD:
						Local_u8ReturnedValue=DIO_PIND_REG;
    2e10:	e0 e3       	ldi	r30, 0x30	; 48
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	89 83       	std	Y+1, r24	; 0x01
						break;
						}



	return Local_u8ReturnedValue;
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <ADC_voidInit>:




void ADC_voidInit(u8 Copy_u8ADC_V_Mode	,	u8 Copy_u8ADC_Mode	,	u8 Copy_u8ADC_Adjust)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	29 97       	sbiw	r28, 0x09	; 9
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	6a 83       	std	Y+2, r22	; 0x02
    2e40:	4b 83       	std	Y+3, r20	; 0x03


	//Select Division Factor 64
	CLR_BIT(ADCSRA_REG,0);
    2e42:	a6 e2       	ldi	r26, 0x26	; 38
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	e6 e2       	ldi	r30, 0x26	; 38
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	8e 7f       	andi	r24, 0xFE	; 254
    2e4e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,1);
    2e50:	a6 e2       	ldi	r26, 0x26	; 38
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	e6 e2       	ldi	r30, 0x26	; 38
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	82 60       	ori	r24, 0x02	; 2
    2e5c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,2);
    2e5e:	a6 e2       	ldi	r26, 0x26	; 38
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e6 e2       	ldi	r30, 0x26	; 38
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	84 60       	ori	r24, 0x04	; 4
    2e6a:	8c 93       	st	X, r24

	switch(Copy_u8ADC_V_Mode)
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	39 87       	std	Y+9, r19	; 0x09
    2e74:	28 87       	std	Y+8, r18	; 0x08
    2e76:	88 85       	ldd	r24, Y+8	; 0x08
    2e78:	99 85       	ldd	r25, Y+9	; 0x09
    2e7a:	81 30       	cpi	r24, 0x01	; 1
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	c1 f0       	breq	.+48     	; 0x2eb0 <ADC_voidInit+0x88>
    2e80:	28 85       	ldd	r18, Y+8	; 0x08
    2e82:	39 85       	ldd	r19, Y+9	; 0x09
    2e84:	22 30       	cpi	r18, 0x02	; 2
    2e86:	31 05       	cpc	r19, r1
    2e88:	11 f1       	breq	.+68     	; 0x2ece <ADC_voidInit+0xa6>
    2e8a:	88 85       	ldd	r24, Y+8	; 0x08
    2e8c:	99 85       	ldd	r25, Y+9	; 0x09
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	61 f5       	brne	.+88     	; 0x2eea <ADC_voidInit+0xc2>
	{
	case ADC_AREF:
		CLR_BIT(ADMUX_REG,7);
    2e92:	a7 e2       	ldi	r26, 0x27	; 39
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	e7 e2       	ldi	r30, 0x27	; 39
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	8f 77       	andi	r24, 0x7F	; 127
    2e9e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,6);
    2ea0:	a7 e2       	ldi	r26, 0x27	; 39
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	e7 e2       	ldi	r30, 0x27	; 39
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	8f 7b       	andi	r24, 0xBF	; 191
    2eac:	8c 93       	st	X, r24
    2eae:	1d c0       	rjmp	.+58     	; 0x2eea <ADC_voidInit+0xc2>

		break;

	case ADC_AVCC_Cap:
		CLR_BIT(ADMUX_REG,7);
    2eb0:	a7 e2       	ldi	r26, 0x27	; 39
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	e7 e2       	ldi	r30, 0x27	; 39
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	8f 77       	andi	r24, 0x7F	; 127
    2ebc:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,6);
    2ebe:	a7 e2       	ldi	r26, 0x27	; 39
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	e7 e2       	ldi	r30, 0x27	; 39
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	80 64       	ori	r24, 0x40	; 64
    2eca:	8c 93       	st	X, r24
    2ecc:	0e c0       	rjmp	.+28     	; 0x2eea <ADC_voidInit+0xc2>

		break;


	case ADC_Internal_volt:
		SET_BIT(ADMUX_REG,7);
    2ece:	a7 e2       	ldi	r26, 0x27	; 39
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	e7 e2       	ldi	r30, 0x27	; 39
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	80 68       	ori	r24, 0x80	; 128
    2eda:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,6);
    2edc:	a7 e2       	ldi	r26, 0x27	; 39
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	e7 e2       	ldi	r30, 0x27	; 39
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	80 64       	ori	r24, 0x40	; 64
    2ee8:	8c 93       	st	X, r24
		break;


	}

	switch(Copy_u8ADC_Mode)
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	28 2f       	mov	r18, r24
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	3f 83       	std	Y+7, r19	; 0x07
    2ef2:	2e 83       	std	Y+6, r18	; 0x06
    2ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	31 f0       	breq	.+12     	; 0x2f08 <ADC_voidInit+0xe0>
    2efc:	2e 81       	ldd	r18, Y+6	; 0x06
    2efe:	3f 81       	ldd	r19, Y+7	; 0x07
    2f00:	21 30       	cpi	r18, 0x01	; 1
    2f02:	31 05       	cpc	r19, r1
    2f04:	49 f0       	breq	.+18     	; 0x2f18 <ADC_voidInit+0xf0>
    2f06:	0f c0       	rjmp	.+30     	; 0x2f26 <ADC_voidInit+0xfe>
	{

	case ADC_Auto_Trigger:

		SET_BIT(ADCSRA_REG,5);
    2f08:	a6 e2       	ldi	r26, 0x26	; 38
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	e6 e2       	ldi	r30, 0x26	; 38
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	80 62       	ori	r24, 0x20	; 32
    2f14:	8c 93       	st	X, r24
    2f16:	07 c0       	rjmp	.+14     	; 0x2f26 <ADC_voidInit+0xfe>

		break;


	case ADC_Single_Conversion:
		CLR_BIT(ADCSRA_REG,5);
    2f18:	a6 e2       	ldi	r26, 0x26	; 38
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e6 e2       	ldi	r30, 0x26	; 38
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	8f 7d       	andi	r24, 0xDF	; 223
    2f24:	8c 93       	st	X, r24
		break;

	}


	switch(Copy_u8ADC_Adjust)
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	3d 83       	std	Y+5, r19	; 0x05
    2f2e:	2c 83       	std	Y+4, r18	; 0x04
    2f30:	8c 81       	ldd	r24, Y+4	; 0x04
    2f32:	9d 81       	ldd	r25, Y+5	; 0x05
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	31 f0       	breq	.+12     	; 0x2f44 <ADC_voidInit+0x11c>
    2f38:	2c 81       	ldd	r18, Y+4	; 0x04
    2f3a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f3c:	21 30       	cpi	r18, 0x01	; 1
    2f3e:	31 05       	cpc	r19, r1
    2f40:	49 f0       	breq	.+18     	; 0x2f54 <ADC_voidInit+0x12c>
    2f42:	0f c0       	rjmp	.+30     	; 0x2f62 <ADC_voidInit+0x13a>
	{

	case ADC_Left_Adjust:
		SET_BIT(ADMUX_REG,5);
    2f44:	a7 e2       	ldi	r26, 0x27	; 39
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e7 e2       	ldi	r30, 0x27	; 39
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	80 62       	ori	r24, 0x20	; 32
    2f50:	8c 93       	st	X, r24
    2f52:	07 c0       	rjmp	.+14     	; 0x2f62 <ADC_voidInit+0x13a>

		break;


	case ADC_Right_Adjust:
		CLR_BIT(ADMUX_REG,5);
    2f54:	a7 e2       	ldi	r26, 0x27	; 39
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	e7 e2       	ldi	r30, 0x27	; 39
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	8f 7d       	andi	r24, 0xDF	; 223
    2f60:	8c 93       	st	X, r24
		break;
	}

	//Enable ADC
	SET_BIT(ADCSRA_REG,7);
    2f62:	a6 e2       	ldi	r26, 0x26	; 38
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	e6 e2       	ldi	r30, 0x26	; 38
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	80 68       	ori	r24, 0x80	; 128
    2f6e:	8c 93       	st	X, r24





}
    2f70:	29 96       	adiw	r28, 0x09	; 9
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Copy_u8ADC_Channel)
{
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	00 d0       	rcall	.+0      	; 0x2f88 <ADC_voidStartConversion+0x6>
    2f88:	0f 92       	push	r0
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	89 83       	std	Y+1, r24	; 0x01


	//Select Channel
	switch(Copy_u8ADC_Channel)
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	28 2f       	mov	r18, r24
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	3b 83       	std	Y+3, r19	; 0x03
    2f98:	2a 83       	std	Y+2, r18	; 0x02
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9e:	83 30       	cpi	r24, 0x03	; 3
    2fa0:	91 05       	cpc	r25, r1
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <ADC_voidStartConversion+0x24>
    2fa4:	70 c0       	rjmp	.+224    	; 0x3086 <ADC_voidStartConversion+0x104>
    2fa6:	2a 81       	ldd	r18, Y+2	; 0x02
    2fa8:	3b 81       	ldd	r19, Y+3	; 0x03
    2faa:	24 30       	cpi	r18, 0x04	; 4
    2fac:	31 05       	cpc	r19, r1
    2fae:	84 f4       	brge	.+32     	; 0x2fd0 <ADC_voidStartConversion+0x4e>
    2fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	91 05       	cpc	r25, r1
    2fb8:	d1 f1       	breq	.+116    	; 0x302e <ADC_voidStartConversion+0xac>
    2fba:	2a 81       	ldd	r18, Y+2	; 0x02
    2fbc:	3b 81       	ldd	r19, Y+3	; 0x03
    2fbe:	22 30       	cpi	r18, 0x02	; 2
    2fc0:	31 05       	cpc	r19, r1
    2fc2:	0c f0       	brlt	.+2      	; 0x2fc6 <ADC_voidStartConversion+0x44>
    2fc4:	4a c0       	rjmp	.+148    	; 0x305a <ADC_voidStartConversion+0xd8>
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	d1 f0       	breq	.+52     	; 0x3002 <ADC_voidStartConversion+0x80>
    2fce:	c8 c0       	rjmp	.+400    	; 0x3160 <ADC_voidStartConversion+0x1de>
    2fd0:	2a 81       	ldd	r18, Y+2	; 0x02
    2fd2:	3b 81       	ldd	r19, Y+3	; 0x03
    2fd4:	25 30       	cpi	r18, 0x05	; 5
    2fd6:	31 05       	cpc	r19, r1
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <ADC_voidStartConversion+0x5a>
    2fda:	81 c0       	rjmp	.+258    	; 0x30de <ADC_voidStartConversion+0x15c>
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe0:	85 30       	cpi	r24, 0x05	; 5
    2fe2:	91 05       	cpc	r25, r1
    2fe4:	0c f4       	brge	.+2      	; 0x2fe8 <ADC_voidStartConversion+0x66>
    2fe6:	65 c0       	rjmp	.+202    	; 0x30b2 <ADC_voidStartConversion+0x130>
    2fe8:	2a 81       	ldd	r18, Y+2	; 0x02
    2fea:	3b 81       	ldd	r19, Y+3	; 0x03
    2fec:	26 30       	cpi	r18, 0x06	; 6
    2fee:	31 05       	cpc	r19, r1
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <ADC_voidStartConversion+0x72>
    2ff2:	8b c0       	rjmp	.+278    	; 0x310a <ADC_voidStartConversion+0x188>
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff8:	87 30       	cpi	r24, 0x07	; 7
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <ADC_voidStartConversion+0x7e>
    2ffe:	9b c0       	rjmp	.+310    	; 0x3136 <ADC_voidStartConversion+0x1b4>
    3000:	af c0       	rjmp	.+350    	; 0x3160 <ADC_voidStartConversion+0x1de>
	{

	case ADC_Channel_0:

		CLR_BIT(ADMUX_REG,0);
    3002:	a7 e2       	ldi	r26, 0x27	; 39
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	e7 e2       	ldi	r30, 0x27	; 39
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	8e 7f       	andi	r24, 0xFE	; 254
    300e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,1);
    3010:	a7 e2       	ldi	r26, 0x27	; 39
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	e7 e2       	ldi	r30, 0x27	; 39
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	8d 7f       	andi	r24, 0xFD	; 253
    301c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,2);
    301e:	a7 e2       	ldi	r26, 0x27	; 39
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	e7 e2       	ldi	r30, 0x27	; 39
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	8b 7f       	andi	r24, 0xFB	; 251
    302a:	8c 93       	st	X, r24
    302c:	99 c0       	rjmp	.+306    	; 0x3160 <ADC_voidStartConversion+0x1de>

		break;


	case ADC_Channel_1:
		SET_BIT(ADMUX_REG,0);
    302e:	a7 e2       	ldi	r26, 0x27	; 39
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e7 e2       	ldi	r30, 0x27	; 39
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	81 60       	ori	r24, 0x01	; 1
    303a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,1);
    303c:	a7 e2       	ldi	r26, 0x27	; 39
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e7 e2       	ldi	r30, 0x27	; 39
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	8d 7f       	andi	r24, 0xFD	; 253
    3048:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,2);
    304a:	a7 e2       	ldi	r26, 0x27	; 39
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	e7 e2       	ldi	r30, 0x27	; 39
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	8b 7f       	andi	r24, 0xFB	; 251
    3056:	8c 93       	st	X, r24
    3058:	83 c0       	rjmp	.+262    	; 0x3160 <ADC_voidStartConversion+0x1de>

		break;

	case ADC_Channel_2:

		CLR_BIT(ADMUX_REG,0);
    305a:	a7 e2       	ldi	r26, 0x27	; 39
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e7 e2       	ldi	r30, 0x27	; 39
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	8e 7f       	andi	r24, 0xFE	; 254
    3066:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,1);
    3068:	a7 e2       	ldi	r26, 0x27	; 39
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	e7 e2       	ldi	r30, 0x27	; 39
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	82 60       	ori	r24, 0x02	; 2
    3074:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,2);
    3076:	a7 e2       	ldi	r26, 0x27	; 39
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	e7 e2       	ldi	r30, 0x27	; 39
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	8b 7f       	andi	r24, 0xFB	; 251
    3082:	8c 93       	st	X, r24
    3084:	6d c0       	rjmp	.+218    	; 0x3160 <ADC_voidStartConversion+0x1de>

		break;

	case ADC_Channel_3:

		SET_BIT(ADMUX_REG,0);
    3086:	a7 e2       	ldi	r26, 0x27	; 39
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e7 e2       	ldi	r30, 0x27	; 39
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	81 60       	ori	r24, 0x01	; 1
    3092:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,1);
    3094:	a7 e2       	ldi	r26, 0x27	; 39
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	e7 e2       	ldi	r30, 0x27	; 39
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	82 60       	ori	r24, 0x02	; 2
    30a0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,2);
    30a2:	a7 e2       	ldi	r26, 0x27	; 39
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	e7 e2       	ldi	r30, 0x27	; 39
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	8b 7f       	andi	r24, 0xFB	; 251
    30ae:	8c 93       	st	X, r24
    30b0:	57 c0       	rjmp	.+174    	; 0x3160 <ADC_voidStartConversion+0x1de>

		break;
	case ADC_Channel_4:


		CLR_BIT(ADMUX_REG,0);
    30b2:	a7 e2       	ldi	r26, 0x27	; 39
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	e7 e2       	ldi	r30, 0x27	; 39
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	8e 7f       	andi	r24, 0xFE	; 254
    30be:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,1);
    30c0:	a7 e2       	ldi	r26, 0x27	; 39
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e7 e2       	ldi	r30, 0x27	; 39
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	8d 7f       	andi	r24, 0xFD	; 253
    30cc:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,2);
    30ce:	a7 e2       	ldi	r26, 0x27	; 39
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e7 e2       	ldi	r30, 0x27	; 39
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	84 60       	ori	r24, 0x04	; 4
    30da:	8c 93       	st	X, r24
    30dc:	41 c0       	rjmp	.+130    	; 0x3160 <ADC_voidStartConversion+0x1de>
		break;
	case ADC_Channel_5:
		SET_BIT(ADMUX_REG,0);
    30de:	a7 e2       	ldi	r26, 0x27	; 39
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e7 e2       	ldi	r30, 0x27	; 39
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	81 60       	ori	r24, 0x01	; 1
    30ea:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,1);
    30ec:	a7 e2       	ldi	r26, 0x27	; 39
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e7 e2       	ldi	r30, 0x27	; 39
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	8d 7f       	andi	r24, 0xFD	; 253
    30f8:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,2);
    30fa:	a7 e2       	ldi	r26, 0x27	; 39
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e7 e2       	ldi	r30, 0x27	; 39
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	84 60       	ori	r24, 0x04	; 4
    3106:	8c 93       	st	X, r24
    3108:	2b c0       	rjmp	.+86     	; 0x3160 <ADC_voidStartConversion+0x1de>

		break;

	case ADC_Channel_6:

		CLR_BIT(ADMUX_REG,0);
    310a:	a7 e2       	ldi	r26, 0x27	; 39
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e7 e2       	ldi	r30, 0x27	; 39
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	8e 7f       	andi	r24, 0xFE	; 254
    3116:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,1);
    3118:	a7 e2       	ldi	r26, 0x27	; 39
    311a:	b0 e0       	ldi	r27, 0x00	; 0
    311c:	e7 e2       	ldi	r30, 0x27	; 39
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	82 60       	ori	r24, 0x02	; 2
    3124:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,2);
    3126:	a7 e2       	ldi	r26, 0x27	; 39
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e7 e2       	ldi	r30, 0x27	; 39
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	84 60       	ori	r24, 0x04	; 4
    3132:	8c 93       	st	X, r24
    3134:	15 c0       	rjmp	.+42     	; 0x3160 <ADC_voidStartConversion+0x1de>
		break;



	case ADC_Channel_7:
		SET_BIT(ADMUX_REG,0);
    3136:	a7 e2       	ldi	r26, 0x27	; 39
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	e7 e2       	ldi	r30, 0x27	; 39
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	81 60       	ori	r24, 0x01	; 1
    3142:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,1);
    3144:	a7 e2       	ldi	r26, 0x27	; 39
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	e7 e2       	ldi	r30, 0x27	; 39
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	82 60       	ori	r24, 0x02	; 2
    3150:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,2);
    3152:	a7 e2       	ldi	r26, 0x27	; 39
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	e7 e2       	ldi	r30, 0x27	; 39
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	84 60       	ori	r24, 0x04	; 4
    315e:	8c 93       	st	X, r24

		break;
	}

	//Single Conversion Start
	SET_BIT(ADCSRA_REG,6);
    3160:	a6 e2       	ldi	r26, 0x26	; 38
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	e6 e2       	ldi	r30, 0x26	; 38
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	80 64       	ori	r24, 0x40	; 64
    316c:	8c 93       	st	X, r24


}
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	08 95       	ret

0000317a <ADC_voidRead>:

u16 ADC_voidRead(){
    317a:	df 93       	push	r29
    317c:	cf 93       	push	r28
    317e:	00 d0       	rcall	.+0      	; 0x3180 <ADC_voidRead+0x6>
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62

	u16 Local_Data;
	//wait for end of conversion
	while(GET_BIT(ADCSRA_REG,4)!=1);
    3184:	e6 e2       	ldi	r30, 0x26	; 38
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	82 95       	swap	r24
    318c:	8f 70       	andi	r24, 0x0F	; 15
    318e:	88 2f       	mov	r24, r24
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	81 70       	andi	r24, 0x01	; 1
    3194:	90 70       	andi	r25, 0x00	; 0
    3196:	00 97       	sbiw	r24, 0x00	; 0
    3198:	a9 f3       	breq	.-22     	; 0x3184 <ADC_voidRead+0xa>

	//clear flag
	SET_BIT(ADCSRA_REG,4);
    319a:	a6 e2       	ldi	r26, 0x26	; 38
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e6 e2       	ldi	r30, 0x26	; 38
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	80 61       	ori	r24, 0x10	; 16
    31a6:	8c 93       	st	X, r24

	if(GET_BIT(ADMUX_REG,5)==0)
    31a8:	e7 e2       	ldi	r30, 0x27	; 39
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	82 95       	swap	r24
    31b0:	86 95       	lsr	r24
    31b2:	87 70       	andi	r24, 0x07	; 7
    31b4:	88 2f       	mov	r24, r24
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	81 70       	andi	r24, 0x01	; 1
    31ba:	90 70       	andi	r25, 0x00	; 0
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	39 f4       	brne	.+14     	; 0x31ce <ADC_voidRead+0x54>
	{
		Local_Data =ADCLH_REG;
    31c0:	e4 e2       	ldi	r30, 0x24	; 36
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	9a 83       	std	Y+2, r25	; 0x02
    31ca:	89 83       	std	Y+1, r24	; 0x01
    31cc:	1b c0       	rjmp	.+54     	; 0x3204 <ADC_voidRead+0x8a>

	}else
	{
		Local_Data=(ADCL_REG>>6);
    31ce:	e4 e2       	ldi	r30, 0x24	; 36
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	82 95       	swap	r24
    31d6:	86 95       	lsr	r24
    31d8:	86 95       	lsr	r24
    31da:	83 70       	andi	r24, 0x03	; 3
    31dc:	88 2f       	mov	r24, r24
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	9a 83       	std	Y+2, r25	; 0x02
    31e2:	89 83       	std	Y+1, r24	; 0x01
		Local_Data|=(ADCH_REG<<2);
    31e4:	e5 e2       	ldi	r30, 0x25	; 37
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	9c 01       	movw	r18, r24
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	9a 81       	ldd	r25, Y+2	; 0x02
    31fc:	82 2b       	or	r24, r18
    31fe:	93 2b       	or	r25, r19
    3200:	9a 83       	std	Y+2, r25	; 0x02
    3202:	89 83       	std	Y+1, r24	; 0x01
	}


	//return data stored
	return Local_Data;
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02

}
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <Stepper_voidInit>:
#include"Stepper_Private.h"
#include <util/delay.h>


void Stepper_voidInit()
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_OUTPUT);
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT,STEPPER_Pink_PIN,DIO_OUTPUT);
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	61 e0       	ldi	r22, 0x01	; 1
    3228:	41 e0       	ldi	r20, 0x01	; 1
    322a:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_OUTPUT);
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	62 e0       	ldi	r22, 0x02	; 2
    3232:	41 e0       	ldi	r20, 0x01	; 1
    3234:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT,STEPPER_Orange_PIN,DIO_OUTPUT);
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	63 e0       	ldi	r22, 0x03	; 3
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>


		DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	61 e0       	ldi	r22, 0x01	; 1
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	62 e0       	ldi	r22, 0x02	; 2
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	63 e0       	ldi	r22, 0x03	; 3
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>


}
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <Stepper_voidON>:
void Stepper_voidON(u8 Copy_u8StepMode,u8 Copy_u8Direction,u16 Copy_u16Degree)
{
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	00 d0       	rcall	.+0      	; 0x3276 <Stepper_voidON+0x6>
    3276:	00 d0       	rcall	.+0      	; 0x3278 <Stepper_voidON+0x8>
    3278:	00 d0       	rcall	.+0      	; 0x327a <Stepper_voidON+0xa>
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	8b 83       	std	Y+3, r24	; 0x03
    3280:	6c 83       	std	Y+4, r22	; 0x04
    3282:	5e 83       	std	Y+6, r21	; 0x06
    3284:	4d 83       	std	Y+5, r20	; 0x05

	u16 Local_u16Counter;

	if(Copy_u8StepMode==STEPPER_FULL_STEP)
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	88 23       	and	r24, r24
    328a:	09 f0       	breq	.+2      	; 0x328e <Stepper_voidON+0x1e>
    328c:	4b c0       	rjmp	.+150    	; 0x3324 <Stepper_voidON+0xb4>
	{
		if(Copy_u8Direction==STEPPER_ClockWise)
    328e:	8c 81       	ldd	r24, Y+4	; 0x04
    3290:	88 23       	and	r24, r24
    3292:	11 f5       	brne	.+68     	; 0x32d8 <Stepper_voidON+0x68>
		{
			for(Local_u16Counter=0;Local_u16Counter<((64*Copy_u16Degree)/45);Local_u16Counter++)
    3294:	1a 82       	std	Y+2, r1	; 0x02
    3296:	19 82       	std	Y+1, r1	; 0x01
    3298:	07 c0       	rjmp	.+14     	; 0x32a8 <Stepper_voidON+0x38>
			{

				Stepper_ClockWise_FullStep();
    329a:	0e 94 e6 19 	call	0x33cc	; 0x33cc <Stepper_ClockWise_FullStep>

	if(Copy_u8StepMode==STEPPER_FULL_STEP)
	{
		if(Copy_u8Direction==STEPPER_ClockWise)
		{
			for(Local_u16Counter=0;Local_u16Counter<((64*Copy_u16Degree)/45);Local_u16Counter++)
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	9a 81       	ldd	r25, Y+2	; 0x02
    32a2:	01 96       	adiw	r24, 0x01	; 1
    32a4:	9a 83       	std	Y+2, r25	; 0x02
    32a6:	89 83       	std	Y+1, r24	; 0x01
    32a8:	8d 81       	ldd	r24, Y+5	; 0x05
    32aa:	9e 81       	ldd	r25, Y+6	; 0x06
    32ac:	00 24       	eor	r0, r0
    32ae:	96 95       	lsr	r25
    32b0:	87 95       	ror	r24
    32b2:	07 94       	ror	r0
    32b4:	96 95       	lsr	r25
    32b6:	87 95       	ror	r24
    32b8:	07 94       	ror	r0
    32ba:	98 2f       	mov	r25, r24
    32bc:	80 2d       	mov	r24, r0
    32be:	2d e2       	ldi	r18, 0x2D	; 45
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	b9 01       	movw	r22, r18
    32c4:	0e 94 1d 33 	call	0x663a	; 0x663a <__udivmodhi4>
    32c8:	cb 01       	movw	r24, r22
    32ca:	9c 01       	movw	r18, r24
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	9a 81       	ldd	r25, Y+2	; 0x02
    32d0:	82 17       	cp	r24, r18
    32d2:	93 07       	cpc	r25, r19
    32d4:	10 f3       	brcs	.-60     	; 0x329a <Stepper_voidON+0x2a>
    32d6:	71 c0       	rjmp	.+226    	; 0x33ba <Stepper_voidON+0x14a>

				Stepper_ClockWise_FullStep();
			}


		}else if(Copy_u8Direction==STEPPER_CounterClockWise)
    32d8:	8c 81       	ldd	r24, Y+4	; 0x04
    32da:	81 30       	cpi	r24, 0x01	; 1
    32dc:	09 f0       	breq	.+2      	; 0x32e0 <Stepper_voidON+0x70>
    32de:	6d c0       	rjmp	.+218    	; 0x33ba <Stepper_voidON+0x14a>
		{
			for(Local_u16Counter=0;Local_u16Counter<((64*Copy_u16Degree)/45);Local_u16Counter++)
    32e0:	1a 82       	std	Y+2, r1	; 0x02
    32e2:	19 82       	std	Y+1, r1	; 0x01
    32e4:	07 c0       	rjmp	.+14     	; 0x32f4 <Stepper_voidON+0x84>
			{

				Stepper_CounterClockWise_FullStep();
    32e6:	0e 94 11 1c 	call	0x3822	; 0x3822 <Stepper_CounterClockWise_FullStep>
			}


		}else if(Copy_u8Direction==STEPPER_CounterClockWise)
		{
			for(Local_u16Counter=0;Local_u16Counter<((64*Copy_u16Degree)/45);Local_u16Counter++)
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	9a 81       	ldd	r25, Y+2	; 0x02
    32ee:	01 96       	adiw	r24, 0x01	; 1
    32f0:	9a 83       	std	Y+2, r25	; 0x02
    32f2:	89 83       	std	Y+1, r24	; 0x01
    32f4:	8d 81       	ldd	r24, Y+5	; 0x05
    32f6:	9e 81       	ldd	r25, Y+6	; 0x06
    32f8:	00 24       	eor	r0, r0
    32fa:	96 95       	lsr	r25
    32fc:	87 95       	ror	r24
    32fe:	07 94       	ror	r0
    3300:	96 95       	lsr	r25
    3302:	87 95       	ror	r24
    3304:	07 94       	ror	r0
    3306:	98 2f       	mov	r25, r24
    3308:	80 2d       	mov	r24, r0
    330a:	2d e2       	ldi	r18, 0x2D	; 45
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	b9 01       	movw	r22, r18
    3310:	0e 94 1d 33 	call	0x663a	; 0x663a <__udivmodhi4>
    3314:	cb 01       	movw	r24, r22
    3316:	9c 01       	movw	r18, r24
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	9a 81       	ldd	r25, Y+2	; 0x02
    331c:	82 17       	cp	r24, r18
    331e:	93 07       	cpc	r25, r19
    3320:	10 f3       	brcs	.-60     	; 0x32e6 <Stepper_voidON+0x76>
    3322:	4b c0       	rjmp	.+150    	; 0x33ba <Stepper_voidON+0x14a>
		}



	}
	else if(Copy_u8StepMode==STEPPER_HALF_STEP)
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	81 30       	cpi	r24, 0x01	; 1
    3328:	09 f0       	breq	.+2      	; 0x332c <Stepper_voidON+0xbc>
    332a:	47 c0       	rjmp	.+142    	; 0x33ba <Stepper_voidON+0x14a>
	{
		if(Copy_u8Direction==STEPPER_ClockWise)
    332c:	8c 81       	ldd	r24, Y+4	; 0x04
    332e:	88 23       	and	r24, r24
    3330:	09 f5       	brne	.+66     	; 0x3374 <Stepper_voidON+0x104>
		{
			for(Local_u16Counter=0;Local_u16Counter<((32*Copy_u16Degree)/45);Local_u16Counter++)
    3332:	1a 82       	std	Y+2, r1	; 0x02
    3334:	19 82       	std	Y+1, r1	; 0x01
    3336:	07 c0       	rjmp	.+14     	; 0x3346 <Stepper_voidON+0xd6>
			{

				Stepper_ClockWise_HalfStep();
    3338:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <Stepper_ClockWise_HalfStep>
	}
	else if(Copy_u8StepMode==STEPPER_HALF_STEP)
	{
		if(Copy_u8Direction==STEPPER_ClockWise)
		{
			for(Local_u16Counter=0;Local_u16Counter<((32*Copy_u16Degree)/45);Local_u16Counter++)
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	9a 81       	ldd	r25, Y+2	; 0x02
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	9a 83       	std	Y+2, r25	; 0x02
    3344:	89 83       	std	Y+1, r24	; 0x01
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	88 0f       	add	r24, r24
    334c:	99 1f       	adc	r25, r25
    334e:	82 95       	swap	r24
    3350:	92 95       	swap	r25
    3352:	90 7f       	andi	r25, 0xF0	; 240
    3354:	98 27       	eor	r25, r24
    3356:	80 7f       	andi	r24, 0xF0	; 240
    3358:	98 27       	eor	r25, r24
    335a:	2d e2       	ldi	r18, 0x2D	; 45
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	b9 01       	movw	r22, r18
    3360:	0e 94 1d 33 	call	0x663a	; 0x663a <__udivmodhi4>
    3364:	cb 01       	movw	r24, r22
    3366:	9c 01       	movw	r18, r24
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	9a 81       	ldd	r25, Y+2	; 0x02
    336c:	82 17       	cp	r24, r18
    336e:	93 07       	cpc	r25, r19
    3370:	18 f3       	brcs	.-58     	; 0x3338 <Stepper_voidON+0xc8>
    3372:	23 c0       	rjmp	.+70     	; 0x33ba <Stepper_voidON+0x14a>

				Stepper_ClockWise_HalfStep();
			}


		}else if(Copy_u8Direction==STEPPER_CounterClockWise)
    3374:	8c 81       	ldd	r24, Y+4	; 0x04
    3376:	81 30       	cpi	r24, 0x01	; 1
    3378:	01 f5       	brne	.+64     	; 0x33ba <Stepper_voidON+0x14a>
		{
			for(Local_u16Counter=0;Local_u16Counter<((32*Copy_u16Degree)/45);Local_u16Counter++)
    337a:	1a 82       	std	Y+2, r1	; 0x02
    337c:	19 82       	std	Y+1, r1	; 0x01
    337e:	07 c0       	rjmp	.+14     	; 0x338e <Stepper_voidON+0x11e>
			{

				Stepper_CounterClockWise_HalfStep();
    3380:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <Stepper_CounterClockWise_HalfStep>
			}


		}else if(Copy_u8Direction==STEPPER_CounterClockWise)
		{
			for(Local_u16Counter=0;Local_u16Counter<((32*Copy_u16Degree)/45);Local_u16Counter++)
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	9a 81       	ldd	r25, Y+2	; 0x02
    3388:	01 96       	adiw	r24, 0x01	; 1
    338a:	9a 83       	std	Y+2, r25	; 0x02
    338c:	89 83       	std	Y+1, r24	; 0x01
    338e:	8d 81       	ldd	r24, Y+5	; 0x05
    3390:	9e 81       	ldd	r25, Y+6	; 0x06
    3392:	88 0f       	add	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	82 95       	swap	r24
    3398:	92 95       	swap	r25
    339a:	90 7f       	andi	r25, 0xF0	; 240
    339c:	98 27       	eor	r25, r24
    339e:	80 7f       	andi	r24, 0xF0	; 240
    33a0:	98 27       	eor	r25, r24
    33a2:	2d e2       	ldi	r18, 0x2D	; 45
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	b9 01       	movw	r22, r18
    33a8:	0e 94 1d 33 	call	0x663a	; 0x663a <__udivmodhi4>
    33ac:	cb 01       	movw	r24, r22
    33ae:	9c 01       	movw	r18, r24
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	9a 81       	ldd	r25, Y+2	; 0x02
    33b4:	82 17       	cp	r24, r18
    33b6:	93 07       	cpc	r25, r19
    33b8:	18 f3       	brcs	.-58     	; 0x3380 <Stepper_voidON+0x110>

		}


	}
}
    33ba:	26 96       	adiw	r28, 0x06	; 6
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	cd bf       	out	0x3d, r28	; 61
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <Stepper_ClockWise_FullStep>:


void Stepper_ClockWise_FullStep()
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	e8 97       	sbiw	r28, 0x38	; 56
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
	//Step1
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	40 e0       	ldi	r20, 0x00	; 0
    33e6:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	61 e0       	ldi	r22, 0x01	; 1
    33ee:	41 e0       	ldi	r20, 0x01	; 1
    33f0:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	62 e0       	ldi	r22, 0x02	; 2
    33f8:	41 e0       	ldi	r20, 0x01	; 1
    33fa:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	63 e0       	ldi	r22, 0x03	; 3
    3402:	41 e0       	ldi	r20, 0x01	; 1
    3404:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	aa e7       	ldi	r26, 0x7A	; 122
    340e:	b4 e4       	ldi	r27, 0x44	; 68
    3410:	8d ab       	std	Y+53, r24	; 0x35
    3412:	9e ab       	std	Y+54, r25	; 0x36
    3414:	af ab       	std	Y+55, r26	; 0x37
    3416:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3418:	6d a9       	ldd	r22, Y+53	; 0x35
    341a:	7e a9       	ldd	r23, Y+54	; 0x36
    341c:	8f a9       	ldd	r24, Y+55	; 0x37
    341e:	98 ad       	ldd	r25, Y+56	; 0x38
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	4a ef       	ldi	r20, 0xFA	; 250
    3426:	54 e4       	ldi	r21, 0x44	; 68
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	89 ab       	std	Y+49, r24	; 0x31
    3432:	9a ab       	std	Y+50, r25	; 0x32
    3434:	ab ab       	std	Y+51, r26	; 0x33
    3436:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3438:	69 a9       	ldd	r22, Y+49	; 0x31
    343a:	7a a9       	ldd	r23, Y+50	; 0x32
    343c:	8b a9       	ldd	r24, Y+51	; 0x33
    343e:	9c a9       	ldd	r25, Y+52	; 0x34
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e8       	ldi	r20, 0x80	; 128
    3446:	5f e3       	ldi	r21, 0x3F	; 63
    3448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    344c:	88 23       	and	r24, r24
    344e:	2c f4       	brge	.+10     	; 0x345a <Stepper_ClockWise_FullStep+0x8e>
		__ticks = 1;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	98 ab       	std	Y+48, r25	; 0x30
    3456:	8f a7       	std	Y+47, r24	; 0x2f
    3458:	3f c0       	rjmp	.+126    	; 0x34d8 <Stepper_ClockWise_FullStep+0x10c>
	else if (__tmp > 65535)
    345a:	69 a9       	ldd	r22, Y+49	; 0x31
    345c:	7a a9       	ldd	r23, Y+50	; 0x32
    345e:	8b a9       	ldd	r24, Y+51	; 0x33
    3460:	9c a9       	ldd	r25, Y+52	; 0x34
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	3f ef       	ldi	r19, 0xFF	; 255
    3466:	4f e7       	ldi	r20, 0x7F	; 127
    3468:	57 e4       	ldi	r21, 0x47	; 71
    346a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    346e:	18 16       	cp	r1, r24
    3470:	4c f5       	brge	.+82     	; 0x34c4 <Stepper_ClockWise_FullStep+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3472:	6d a9       	ldd	r22, Y+53	; 0x35
    3474:	7e a9       	ldd	r23, Y+54	; 0x36
    3476:	8f a9       	ldd	r24, Y+55	; 0x37
    3478:	98 ad       	ldd	r25, Y+56	; 0x38
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e2       	ldi	r20, 0x20	; 32
    3480:	51 e4       	ldi	r21, 0x41	; 65
    3482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	98 ab       	std	Y+48, r25	; 0x30
    3498:	8f a7       	std	Y+47, r24	; 0x2f
    349a:	0f c0       	rjmp	.+30     	; 0x34ba <Stepper_ClockWise_FullStep+0xee>
    349c:	88 ec       	ldi	r24, 0xC8	; 200
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	9e a7       	std	Y+46, r25	; 0x2e
    34a2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    34a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <Stepper_ClockWise_FullStep+0xdc>
    34ac:	9e a7       	std	Y+46, r25	; 0x2e
    34ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b2:	98 a9       	ldd	r25, Y+48	; 0x30
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	98 ab       	std	Y+48, r25	; 0x30
    34b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    34bc:	98 a9       	ldd	r25, Y+48	; 0x30
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	69 f7       	brne	.-38     	; 0x349c <Stepper_ClockWise_FullStep+0xd0>
    34c2:	14 c0       	rjmp	.+40     	; 0x34ec <Stepper_ClockWise_FullStep+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c4:	69 a9       	ldd	r22, Y+49	; 0x31
    34c6:	7a a9       	ldd	r23, Y+50	; 0x32
    34c8:	8b a9       	ldd	r24, Y+51	; 0x33
    34ca:	9c a9       	ldd	r25, Y+52	; 0x34
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	98 ab       	std	Y+48, r25	; 0x30
    34d6:	8f a7       	std	Y+47, r24	; 0x2f
    34d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    34da:	98 a9       	ldd	r25, Y+48	; 0x30
    34dc:	9c a7       	std	Y+44, r25	; 0x2c
    34de:	8b a7       	std	Y+43, r24	; 0x2b
    34e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    34e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <Stepper_ClockWise_FullStep+0x118>
    34e8:	9c a7       	std	Y+44, r25	; 0x2c
    34ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(freq);

	//Step2
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	60 e0       	ldi	r22, 0x00	; 0
    34f0:	41 e0       	ldi	r20, 0x01	; 1
    34f2:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	61 e0       	ldi	r22, 0x01	; 1
    34fa:	40 e0       	ldi	r20, 0x00	; 0
    34fc:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	62 e0       	ldi	r22, 0x02	; 2
    3504:	41 e0       	ldi	r20, 0x01	; 1
    3506:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	63 e0       	ldi	r22, 0x03	; 3
    350e:	41 e0       	ldi	r20, 0x01	; 1
    3510:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	aa e7       	ldi	r26, 0x7A	; 122
    351a:	b4 e4       	ldi	r27, 0x44	; 68
    351c:	8f a3       	std	Y+39, r24	; 0x27
    351e:	98 a7       	std	Y+40, r25	; 0x28
    3520:	a9 a7       	std	Y+41, r26	; 0x29
    3522:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3524:	6f a1       	ldd	r22, Y+39	; 0x27
    3526:	78 a5       	ldd	r23, Y+40	; 0x28
    3528:	89 a5       	ldd	r24, Y+41	; 0x29
    352a:	9a a5       	ldd	r25, Y+42	; 0x2a
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	4a ef       	ldi	r20, 0xFA	; 250
    3532:	54 e4       	ldi	r21, 0x44	; 68
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	8b a3       	std	Y+35, r24	; 0x23
    353e:	9c a3       	std	Y+36, r25	; 0x24
    3540:	ad a3       	std	Y+37, r26	; 0x25
    3542:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3544:	6b a1       	ldd	r22, Y+35	; 0x23
    3546:	7c a1       	ldd	r23, Y+36	; 0x24
    3548:	8d a1       	ldd	r24, Y+37	; 0x25
    354a:	9e a1       	ldd	r25, Y+38	; 0x26
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3558:	88 23       	and	r24, r24
    355a:	2c f4       	brge	.+10     	; 0x3566 <Stepper_ClockWise_FullStep+0x19a>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	9a a3       	std	Y+34, r25	; 0x22
    3562:	89 a3       	std	Y+33, r24	; 0x21
    3564:	3f c0       	rjmp	.+126    	; 0x35e4 <Stepper_ClockWise_FullStep+0x218>
	else if (__tmp > 65535)
    3566:	6b a1       	ldd	r22, Y+35	; 0x23
    3568:	7c a1       	ldd	r23, Y+36	; 0x24
    356a:	8d a1       	ldd	r24, Y+37	; 0x25
    356c:	9e a1       	ldd	r25, Y+38	; 0x26
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	3f ef       	ldi	r19, 0xFF	; 255
    3572:	4f e7       	ldi	r20, 0x7F	; 127
    3574:	57 e4       	ldi	r21, 0x47	; 71
    3576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    357a:	18 16       	cp	r1, r24
    357c:	4c f5       	brge	.+82     	; 0x35d0 <Stepper_ClockWise_FullStep+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357e:	6f a1       	ldd	r22, Y+39	; 0x27
    3580:	78 a5       	ldd	r23, Y+40	; 0x28
    3582:	89 a5       	ldd	r24, Y+41	; 0x29
    3584:	9a a5       	ldd	r25, Y+42	; 0x2a
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e2       	ldi	r20, 0x20	; 32
    358c:	51 e4       	ldi	r21, 0x41	; 65
    358e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	9a a3       	std	Y+34, r25	; 0x22
    35a4:	89 a3       	std	Y+33, r24	; 0x21
    35a6:	0f c0       	rjmp	.+30     	; 0x35c6 <Stepper_ClockWise_FullStep+0x1fa>
    35a8:	88 ec       	ldi	r24, 0xC8	; 200
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	98 a3       	std	Y+32, r25	; 0x20
    35ae:	8f 8f       	std	Y+31, r24	; 0x1f
    35b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35b2:	98 a1       	ldd	r25, Y+32	; 0x20
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	f1 f7       	brne	.-4      	; 0x35b4 <Stepper_ClockWise_FullStep+0x1e8>
    35b8:	98 a3       	std	Y+32, r25	; 0x20
    35ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35bc:	89 a1       	ldd	r24, Y+33	; 0x21
    35be:	9a a1       	ldd	r25, Y+34	; 0x22
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	9a a3       	std	Y+34, r25	; 0x22
    35c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c6:	89 a1       	ldd	r24, Y+33	; 0x21
    35c8:	9a a1       	ldd	r25, Y+34	; 0x22
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	69 f7       	brne	.-38     	; 0x35a8 <Stepper_ClockWise_FullStep+0x1dc>
    35ce:	14 c0       	rjmp	.+40     	; 0x35f8 <Stepper_ClockWise_FullStep+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d0:	6b a1       	ldd	r22, Y+35	; 0x23
    35d2:	7c a1       	ldd	r23, Y+36	; 0x24
    35d4:	8d a1       	ldd	r24, Y+37	; 0x25
    35d6:	9e a1       	ldd	r25, Y+38	; 0x26
    35d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	9a a3       	std	Y+34, r25	; 0x22
    35e2:	89 a3       	std	Y+33, r24	; 0x21
    35e4:	89 a1       	ldd	r24, Y+33	; 0x21
    35e6:	9a a1       	ldd	r25, Y+34	; 0x22
    35e8:	9e 8f       	std	Y+30, r25	; 0x1e
    35ea:	8d 8f       	std	Y+29, r24	; 0x1d
    35ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <Stepper_ClockWise_FullStep+0x224>
    35f4:	9e 8f       	std	Y+30, r25	; 0x1e
    35f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(freq);


	//Step3
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	41 e0       	ldi	r20, 0x01	; 1
    35fe:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	61 e0       	ldi	r22, 0x01	; 1
    3606:	41 e0       	ldi	r20, 0x01	; 1
    3608:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	62 e0       	ldi	r22, 0x02	; 2
    3610:	40 e0       	ldi	r20, 0x00	; 0
    3612:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	63 e0       	ldi	r22, 0x03	; 3
    361a:	41 e0       	ldi	r20, 0x01	; 1
    361c:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	aa e7       	ldi	r26, 0x7A	; 122
    3626:	b4 e4       	ldi	r27, 0x44	; 68
    3628:	89 8f       	std	Y+25, r24	; 0x19
    362a:	9a 8f       	std	Y+26, r25	; 0x1a
    362c:	ab 8f       	std	Y+27, r26	; 0x1b
    362e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3630:	69 8d       	ldd	r22, Y+25	; 0x19
    3632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	4a ef       	ldi	r20, 0xFA	; 250
    363e:	54 e4       	ldi	r21, 0x44	; 68
    3640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	8d 8b       	std	Y+21, r24	; 0x15
    364a:	9e 8b       	std	Y+22, r25	; 0x16
    364c:	af 8b       	std	Y+23, r26	; 0x17
    364e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3650:	6d 89       	ldd	r22, Y+21	; 0x15
    3652:	7e 89       	ldd	r23, Y+22	; 0x16
    3654:	8f 89       	ldd	r24, Y+23	; 0x17
    3656:	98 8d       	ldd	r25, Y+24	; 0x18
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e8       	ldi	r20, 0x80	; 128
    365e:	5f e3       	ldi	r21, 0x3F	; 63
    3660:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3664:	88 23       	and	r24, r24
    3666:	2c f4       	brge	.+10     	; 0x3672 <Stepper_ClockWise_FullStep+0x2a6>
		__ticks = 1;
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	9c 8b       	std	Y+20, r25	; 0x14
    366e:	8b 8b       	std	Y+19, r24	; 0x13
    3670:	3f c0       	rjmp	.+126    	; 0x36f0 <Stepper_ClockWise_FullStep+0x324>
	else if (__tmp > 65535)
    3672:	6d 89       	ldd	r22, Y+21	; 0x15
    3674:	7e 89       	ldd	r23, Y+22	; 0x16
    3676:	8f 89       	ldd	r24, Y+23	; 0x17
    3678:	98 8d       	ldd	r25, Y+24	; 0x18
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	3f ef       	ldi	r19, 0xFF	; 255
    367e:	4f e7       	ldi	r20, 0x7F	; 127
    3680:	57 e4       	ldi	r21, 0x47	; 71
    3682:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3686:	18 16       	cp	r1, r24
    3688:	4c f5       	brge	.+82     	; 0x36dc <Stepper_ClockWise_FullStep+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    368a:	69 8d       	ldd	r22, Y+25	; 0x19
    368c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    368e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3690:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	40 e2       	ldi	r20, 0x20	; 32
    3698:	51 e4       	ldi	r21, 0x41	; 65
    369a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	bc 01       	movw	r22, r24
    36a4:	cd 01       	movw	r24, r26
    36a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	9c 8b       	std	Y+20, r25	; 0x14
    36b0:	8b 8b       	std	Y+19, r24	; 0x13
    36b2:	0f c0       	rjmp	.+30     	; 0x36d2 <Stepper_ClockWise_FullStep+0x306>
    36b4:	88 ec       	ldi	r24, 0xC8	; 200
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	9a 8b       	std	Y+18, r25	; 0x12
    36ba:	89 8b       	std	Y+17, r24	; 0x11
    36bc:	89 89       	ldd	r24, Y+17	; 0x11
    36be:	9a 89       	ldd	r25, Y+18	; 0x12
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <Stepper_ClockWise_FullStep+0x2f4>
    36c4:	9a 8b       	std	Y+18, r25	; 0x12
    36c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c8:	8b 89       	ldd	r24, Y+19	; 0x13
    36ca:	9c 89       	ldd	r25, Y+20	; 0x14
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	9c 8b       	std	Y+20, r25	; 0x14
    36d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d2:	8b 89       	ldd	r24, Y+19	; 0x13
    36d4:	9c 89       	ldd	r25, Y+20	; 0x14
    36d6:	00 97       	sbiw	r24, 0x00	; 0
    36d8:	69 f7       	brne	.-38     	; 0x36b4 <Stepper_ClockWise_FullStep+0x2e8>
    36da:	14 c0       	rjmp	.+40     	; 0x3704 <Stepper_ClockWise_FullStep+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36dc:	6d 89       	ldd	r22, Y+21	; 0x15
    36de:	7e 89       	ldd	r23, Y+22	; 0x16
    36e0:	8f 89       	ldd	r24, Y+23	; 0x17
    36e2:	98 8d       	ldd	r25, Y+24	; 0x18
    36e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	9c 8b       	std	Y+20, r25	; 0x14
    36ee:	8b 8b       	std	Y+19, r24	; 0x13
    36f0:	8b 89       	ldd	r24, Y+19	; 0x13
    36f2:	9c 89       	ldd	r25, Y+20	; 0x14
    36f4:	98 8b       	std	Y+16, r25	; 0x10
    36f6:	8f 87       	std	Y+15, r24	; 0x0f
    36f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36fa:	98 89       	ldd	r25, Y+16	; 0x10
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	f1 f7       	brne	.-4      	; 0x36fc <Stepper_ClockWise_FullStep+0x330>
    3700:	98 8b       	std	Y+16, r25	; 0x10
    3702:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(freq);


	//Step4
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	60 e0       	ldi	r22, 0x00	; 0
    3708:	41 e0       	ldi	r20, 0x01	; 1
    370a:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	61 e0       	ldi	r22, 0x01	; 1
    3712:	41 e0       	ldi	r20, 0x01	; 1
    3714:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	62 e0       	ldi	r22, 0x02	; 2
    371c:	41 e0       	ldi	r20, 0x01	; 1
    371e:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	63 e0       	ldi	r22, 0x03	; 3
    3726:	40 e0       	ldi	r20, 0x00	; 0
    3728:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	aa e7       	ldi	r26, 0x7A	; 122
    3732:	b4 e4       	ldi	r27, 0x44	; 68
    3734:	8b 87       	std	Y+11, r24	; 0x0b
    3736:	9c 87       	std	Y+12, r25	; 0x0c
    3738:	ad 87       	std	Y+13, r26	; 0x0d
    373a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373c:	6b 85       	ldd	r22, Y+11	; 0x0b
    373e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3740:	8d 85       	ldd	r24, Y+13	; 0x0d
    3742:	9e 85       	ldd	r25, Y+14	; 0x0e
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	4a ef       	ldi	r20, 0xFA	; 250
    374a:	54 e4       	ldi	r21, 0x44	; 68
    374c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	8f 83       	std	Y+7, r24	; 0x07
    3756:	98 87       	std	Y+8, r25	; 0x08
    3758:	a9 87       	std	Y+9, r26	; 0x09
    375a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    375c:	6f 81       	ldd	r22, Y+7	; 0x07
    375e:	78 85       	ldd	r23, Y+8	; 0x08
    3760:	89 85       	ldd	r24, Y+9	; 0x09
    3762:	9a 85       	ldd	r25, Y+10	; 0x0a
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e8       	ldi	r20, 0x80	; 128
    376a:	5f e3       	ldi	r21, 0x3F	; 63
    376c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3770:	88 23       	and	r24, r24
    3772:	2c f4       	brge	.+10     	; 0x377e <Stepper_ClockWise_FullStep+0x3b2>
		__ticks = 1;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9e 83       	std	Y+6, r25	; 0x06
    377a:	8d 83       	std	Y+5, r24	; 0x05
    377c:	3f c0       	rjmp	.+126    	; 0x37fc <Stepper_ClockWise_FullStep+0x430>
	else if (__tmp > 65535)
    377e:	6f 81       	ldd	r22, Y+7	; 0x07
    3780:	78 85       	ldd	r23, Y+8	; 0x08
    3782:	89 85       	ldd	r24, Y+9	; 0x09
    3784:	9a 85       	ldd	r25, Y+10	; 0x0a
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	3f ef       	ldi	r19, 0xFF	; 255
    378a:	4f e7       	ldi	r20, 0x7F	; 127
    378c:	57 e4       	ldi	r21, 0x47	; 71
    378e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3792:	18 16       	cp	r1, r24
    3794:	4c f5       	brge	.+82     	; 0x37e8 <Stepper_ClockWise_FullStep+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3796:	6b 85       	ldd	r22, Y+11	; 0x0b
    3798:	7c 85       	ldd	r23, Y+12	; 0x0c
    379a:	8d 85       	ldd	r24, Y+13	; 0x0d
    379c:	9e 85       	ldd	r25, Y+14	; 0x0e
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 e2       	ldi	r20, 0x20	; 32
    37a4:	51 e4       	ldi	r21, 0x41	; 65
    37a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	bc 01       	movw	r22, r24
    37b0:	cd 01       	movw	r24, r26
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9e 83       	std	Y+6, r25	; 0x06
    37bc:	8d 83       	std	Y+5, r24	; 0x05
    37be:	0f c0       	rjmp	.+30     	; 0x37de <Stepper_ClockWise_FullStep+0x412>
    37c0:	88 ec       	ldi	r24, 0xC8	; 200
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	9c 83       	std	Y+4, r25	; 0x04
    37c6:	8b 83       	std	Y+3, r24	; 0x03
    37c8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ca:	9c 81       	ldd	r25, Y+4	; 0x04
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <Stepper_ClockWise_FullStep+0x400>
    37d0:	9c 83       	std	Y+4, r25	; 0x04
    37d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d4:	8d 81       	ldd	r24, Y+5	; 0x05
    37d6:	9e 81       	ldd	r25, Y+6	; 0x06
    37d8:	01 97       	sbiw	r24, 0x01	; 1
    37da:	9e 83       	std	Y+6, r25	; 0x06
    37dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37de:	8d 81       	ldd	r24, Y+5	; 0x05
    37e0:	9e 81       	ldd	r25, Y+6	; 0x06
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	69 f7       	brne	.-38     	; 0x37c0 <Stepper_ClockWise_FullStep+0x3f4>
    37e6:	14 c0       	rjmp	.+40     	; 0x3810 <Stepper_ClockWise_FullStep+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e8:	6f 81       	ldd	r22, Y+7	; 0x07
    37ea:	78 85       	ldd	r23, Y+8	; 0x08
    37ec:	89 85       	ldd	r24, Y+9	; 0x09
    37ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	9e 83       	std	Y+6, r25	; 0x06
    37fa:	8d 83       	std	Y+5, r24	; 0x05
    37fc:	8d 81       	ldd	r24, Y+5	; 0x05
    37fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	89 83       	std	Y+1, r24	; 0x01
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	9a 81       	ldd	r25, Y+2	; 0x02
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	f1 f7       	brne	.-4      	; 0x3808 <Stepper_ClockWise_FullStep+0x43c>
    380c:	9a 83       	std	Y+2, r25	; 0x02
    380e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(freq);



}
    3810:	e8 96       	adiw	r28, 0x38	; 56
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	cf 91       	pop	r28
    381e:	df 91       	pop	r29
    3820:	08 95       	ret

00003822 <Stepper_CounterClockWise_FullStep>:
void Stepper_CounterClockWise_FullStep()
{
    3822:	df 93       	push	r29
    3824:	cf 93       	push	r28
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
    382a:	e8 97       	sbiw	r28, 0x38	; 56
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	f8 94       	cli
    3830:	de bf       	out	0x3e, r29	; 62
    3832:	0f be       	out	0x3f, r0	; 63
    3834:	cd bf       	out	0x3d, r28	; 61

	//Step1
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	60 e0       	ldi	r22, 0x00	; 0
    383a:	40 e0       	ldi	r20, 0x00	; 0
    383c:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	61 e0       	ldi	r22, 0x01	; 1
    3844:	40 e0       	ldi	r20, 0x00	; 0
    3846:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	62 e0       	ldi	r22, 0x02	; 2
    384e:	40 e0       	ldi	r20, 0x00	; 0
    3850:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	63 e0       	ldi	r22, 0x03	; 3
    3858:	41 e0       	ldi	r20, 0x01	; 1
    385a:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	aa e7       	ldi	r26, 0x7A	; 122
    3864:	b4 e4       	ldi	r27, 0x44	; 68
    3866:	8d ab       	std	Y+53, r24	; 0x35
    3868:	9e ab       	std	Y+54, r25	; 0x36
    386a:	af ab       	std	Y+55, r26	; 0x37
    386c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386e:	6d a9       	ldd	r22, Y+53	; 0x35
    3870:	7e a9       	ldd	r23, Y+54	; 0x36
    3872:	8f a9       	ldd	r24, Y+55	; 0x37
    3874:	98 ad       	ldd	r25, Y+56	; 0x38
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	4a ef       	ldi	r20, 0xFA	; 250
    387c:	54 e4       	ldi	r21, 0x44	; 68
    387e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	89 ab       	std	Y+49, r24	; 0x31
    3888:	9a ab       	std	Y+50, r25	; 0x32
    388a:	ab ab       	std	Y+51, r26	; 0x33
    388c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    388e:	69 a9       	ldd	r22, Y+49	; 0x31
    3890:	7a a9       	ldd	r23, Y+50	; 0x32
    3892:	8b a9       	ldd	r24, Y+51	; 0x33
    3894:	9c a9       	ldd	r25, Y+52	; 0x34
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	40 e8       	ldi	r20, 0x80	; 128
    389c:	5f e3       	ldi	r21, 0x3F	; 63
    389e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38a2:	88 23       	and	r24, r24
    38a4:	2c f4       	brge	.+10     	; 0x38b0 <Stepper_CounterClockWise_FullStep+0x8e>
		__ticks = 1;
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	98 ab       	std	Y+48, r25	; 0x30
    38ac:	8f a7       	std	Y+47, r24	; 0x2f
    38ae:	3f c0       	rjmp	.+126    	; 0x392e <Stepper_CounterClockWise_FullStep+0x10c>
	else if (__tmp > 65535)
    38b0:	69 a9       	ldd	r22, Y+49	; 0x31
    38b2:	7a a9       	ldd	r23, Y+50	; 0x32
    38b4:	8b a9       	ldd	r24, Y+51	; 0x33
    38b6:	9c a9       	ldd	r25, Y+52	; 0x34
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	3f ef       	ldi	r19, 0xFF	; 255
    38bc:	4f e7       	ldi	r20, 0x7F	; 127
    38be:	57 e4       	ldi	r21, 0x47	; 71
    38c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c4:	18 16       	cp	r1, r24
    38c6:	4c f5       	brge	.+82     	; 0x391a <Stepper_CounterClockWise_FullStep+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c8:	6d a9       	ldd	r22, Y+53	; 0x35
    38ca:	7e a9       	ldd	r23, Y+54	; 0x36
    38cc:	8f a9       	ldd	r24, Y+55	; 0x37
    38ce:	98 ad       	ldd	r25, Y+56	; 0x38
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	40 e2       	ldi	r20, 0x20	; 32
    38d6:	51 e4       	ldi	r21, 0x41	; 65
    38d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	bc 01       	movw	r22, r24
    38e2:	cd 01       	movw	r24, r26
    38e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	98 ab       	std	Y+48, r25	; 0x30
    38ee:	8f a7       	std	Y+47, r24	; 0x2f
    38f0:	0f c0       	rjmp	.+30     	; 0x3910 <Stepper_CounterClockWise_FullStep+0xee>
    38f2:	88 ec       	ldi	r24, 0xC8	; 200
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	9e a7       	std	Y+46, r25	; 0x2e
    38f8:	8d a7       	std	Y+45, r24	; 0x2d
    38fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    38fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <Stepper_CounterClockWise_FullStep+0xdc>
    3902:	9e a7       	std	Y+46, r25	; 0x2e
    3904:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3906:	8f a5       	ldd	r24, Y+47	; 0x2f
    3908:	98 a9       	ldd	r25, Y+48	; 0x30
    390a:	01 97       	sbiw	r24, 0x01	; 1
    390c:	98 ab       	std	Y+48, r25	; 0x30
    390e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3910:	8f a5       	ldd	r24, Y+47	; 0x2f
    3912:	98 a9       	ldd	r25, Y+48	; 0x30
    3914:	00 97       	sbiw	r24, 0x00	; 0
    3916:	69 f7       	brne	.-38     	; 0x38f2 <Stepper_CounterClockWise_FullStep+0xd0>
    3918:	14 c0       	rjmp	.+40     	; 0x3942 <Stepper_CounterClockWise_FullStep+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    391a:	69 a9       	ldd	r22, Y+49	; 0x31
    391c:	7a a9       	ldd	r23, Y+50	; 0x32
    391e:	8b a9       	ldd	r24, Y+51	; 0x33
    3920:	9c a9       	ldd	r25, Y+52	; 0x34
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	98 ab       	std	Y+48, r25	; 0x30
    392c:	8f a7       	std	Y+47, r24	; 0x2f
    392e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3930:	98 a9       	ldd	r25, Y+48	; 0x30
    3932:	9c a7       	std	Y+44, r25	; 0x2c
    3934:	8b a7       	std	Y+43, r24	; 0x2b
    3936:	8b a5       	ldd	r24, Y+43	; 0x2b
    3938:	9c a5       	ldd	r25, Y+44	; 0x2c
    393a:	01 97       	sbiw	r24, 0x01	; 1
    393c:	f1 f7       	brne	.-4      	; 0x393a <Stepper_CounterClockWise_FullStep+0x118>
    393e:	9c a7       	std	Y+44, r25	; 0x2c
    3940:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(freq);

	//Step2
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	60 e0       	ldi	r22, 0x00	; 0
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	61 e0       	ldi	r22, 0x01	; 1
    3950:	40 e0       	ldi	r20, 0x00	; 0
    3952:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	62 e0       	ldi	r22, 0x02	; 2
    395a:	41 e0       	ldi	r20, 0x01	; 1
    395c:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	63 e0       	ldi	r22, 0x03	; 3
    3964:	40 e0       	ldi	r20, 0x00	; 0
    3966:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	aa e7       	ldi	r26, 0x7A	; 122
    3970:	b4 e4       	ldi	r27, 0x44	; 68
    3972:	8f a3       	std	Y+39, r24	; 0x27
    3974:	98 a7       	std	Y+40, r25	; 0x28
    3976:	a9 a7       	std	Y+41, r26	; 0x29
    3978:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    397a:	6f a1       	ldd	r22, Y+39	; 0x27
    397c:	78 a5       	ldd	r23, Y+40	; 0x28
    397e:	89 a5       	ldd	r24, Y+41	; 0x29
    3980:	9a a5       	ldd	r25, Y+42	; 0x2a
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	4a ef       	ldi	r20, 0xFA	; 250
    3988:	54 e4       	ldi	r21, 0x44	; 68
    398a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	8b a3       	std	Y+35, r24	; 0x23
    3994:	9c a3       	std	Y+36, r25	; 0x24
    3996:	ad a3       	std	Y+37, r26	; 0x25
    3998:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    399a:	6b a1       	ldd	r22, Y+35	; 0x23
    399c:	7c a1       	ldd	r23, Y+36	; 0x24
    399e:	8d a1       	ldd	r24, Y+37	; 0x25
    39a0:	9e a1       	ldd	r25, Y+38	; 0x26
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	40 e8       	ldi	r20, 0x80	; 128
    39a8:	5f e3       	ldi	r21, 0x3F	; 63
    39aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ae:	88 23       	and	r24, r24
    39b0:	2c f4       	brge	.+10     	; 0x39bc <Stepper_CounterClockWise_FullStep+0x19a>
		__ticks = 1;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	9a a3       	std	Y+34, r25	; 0x22
    39b8:	89 a3       	std	Y+33, r24	; 0x21
    39ba:	3f c0       	rjmp	.+126    	; 0x3a3a <Stepper_CounterClockWise_FullStep+0x218>
	else if (__tmp > 65535)
    39bc:	6b a1       	ldd	r22, Y+35	; 0x23
    39be:	7c a1       	ldd	r23, Y+36	; 0x24
    39c0:	8d a1       	ldd	r24, Y+37	; 0x25
    39c2:	9e a1       	ldd	r25, Y+38	; 0x26
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	3f ef       	ldi	r19, 0xFF	; 255
    39c8:	4f e7       	ldi	r20, 0x7F	; 127
    39ca:	57 e4       	ldi	r21, 0x47	; 71
    39cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39d0:	18 16       	cp	r1, r24
    39d2:	4c f5       	brge	.+82     	; 0x3a26 <Stepper_CounterClockWise_FullStep+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d4:	6f a1       	ldd	r22, Y+39	; 0x27
    39d6:	78 a5       	ldd	r23, Y+40	; 0x28
    39d8:	89 a5       	ldd	r24, Y+41	; 0x29
    39da:	9a a5       	ldd	r25, Y+42	; 0x2a
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	40 e2       	ldi	r20, 0x20	; 32
    39e2:	51 e4       	ldi	r21, 0x41	; 65
    39e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	9a a3       	std	Y+34, r25	; 0x22
    39fa:	89 a3       	std	Y+33, r24	; 0x21
    39fc:	0f c0       	rjmp	.+30     	; 0x3a1c <Stepper_CounterClockWise_FullStep+0x1fa>
    39fe:	88 ec       	ldi	r24, 0xC8	; 200
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	98 a3       	std	Y+32, r25	; 0x20
    3a04:	8f 8f       	std	Y+31, r24	; 0x1f
    3a06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a08:	98 a1       	ldd	r25, Y+32	; 0x20
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	f1 f7       	brne	.-4      	; 0x3a0a <Stepper_CounterClockWise_FullStep+0x1e8>
    3a0e:	98 a3       	std	Y+32, r25	; 0x20
    3a10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a12:	89 a1       	ldd	r24, Y+33	; 0x21
    3a14:	9a a1       	ldd	r25, Y+34	; 0x22
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	9a a3       	std	Y+34, r25	; 0x22
    3a1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a1c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a1e:	9a a1       	ldd	r25, Y+34	; 0x22
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	69 f7       	brne	.-38     	; 0x39fe <Stepper_CounterClockWise_FullStep+0x1dc>
    3a24:	14 c0       	rjmp	.+40     	; 0x3a4e <Stepper_CounterClockWise_FullStep+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a26:	6b a1       	ldd	r22, Y+35	; 0x23
    3a28:	7c a1       	ldd	r23, Y+36	; 0x24
    3a2a:	8d a1       	ldd	r24, Y+37	; 0x25
    3a2c:	9e a1       	ldd	r25, Y+38	; 0x26
    3a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	9a a3       	std	Y+34, r25	; 0x22
    3a38:	89 a3       	std	Y+33, r24	; 0x21
    3a3a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a3c:	9a a1       	ldd	r25, Y+34	; 0x22
    3a3e:	9e 8f       	std	Y+30, r25	; 0x1e
    3a40:	8d 8f       	std	Y+29, r24	; 0x1d
    3a42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	f1 f7       	brne	.-4      	; 0x3a46 <Stepper_CounterClockWise_FullStep+0x224>
    3a4a:	9e 8f       	std	Y+30, r25	; 0x1e
    3a4c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(freq);

	//Step3
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	60 e0       	ldi	r22, 0x00	; 0
    3a52:	40 e0       	ldi	r20, 0x00	; 0
    3a54:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	61 e0       	ldi	r22, 0x01	; 1
    3a5c:	41 e0       	ldi	r20, 0x01	; 1
    3a5e:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	62 e0       	ldi	r22, 0x02	; 2
    3a66:	40 e0       	ldi	r20, 0x00	; 0
    3a68:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	63 e0       	ldi	r22, 0x03	; 3
    3a70:	40 e0       	ldi	r20, 0x00	; 0
    3a72:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	aa e7       	ldi	r26, 0x7A	; 122
    3a7c:	b4 e4       	ldi	r27, 0x44	; 68
    3a7e:	89 8f       	std	Y+25, r24	; 0x19
    3a80:	9a 8f       	std	Y+26, r25	; 0x1a
    3a82:	ab 8f       	std	Y+27, r26	; 0x1b
    3a84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a86:	69 8d       	ldd	r22, Y+25	; 0x19
    3a88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	4a ef       	ldi	r20, 0xFA	; 250
    3a94:	54 e4       	ldi	r21, 0x44	; 68
    3a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	8d 8b       	std	Y+21, r24	; 0x15
    3aa0:	9e 8b       	std	Y+22, r25	; 0x16
    3aa2:	af 8b       	std	Y+23, r26	; 0x17
    3aa4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    3aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    3aac:	98 8d       	ldd	r25, Y+24	; 0x18
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	40 e8       	ldi	r20, 0x80	; 128
    3ab4:	5f e3       	ldi	r21, 0x3F	; 63
    3ab6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aba:	88 23       	and	r24, r24
    3abc:	2c f4       	brge	.+10     	; 0x3ac8 <Stepper_CounterClockWise_FullStep+0x2a6>
		__ticks = 1;
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	9c 8b       	std	Y+20, r25	; 0x14
    3ac4:	8b 8b       	std	Y+19, r24	; 0x13
    3ac6:	3f c0       	rjmp	.+126    	; 0x3b46 <Stepper_CounterClockWise_FullStep+0x324>
	else if (__tmp > 65535)
    3ac8:	6d 89       	ldd	r22, Y+21	; 0x15
    3aca:	7e 89       	ldd	r23, Y+22	; 0x16
    3acc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ace:	98 8d       	ldd	r25, Y+24	; 0x18
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	3f ef       	ldi	r19, 0xFF	; 255
    3ad4:	4f e7       	ldi	r20, 0x7F	; 127
    3ad6:	57 e4       	ldi	r21, 0x47	; 71
    3ad8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3adc:	18 16       	cp	r1, r24
    3ade:	4c f5       	brge	.+82     	; 0x3b32 <Stepper_CounterClockWise_FullStep+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	40 e2       	ldi	r20, 0x20	; 32
    3aee:	51 e4       	ldi	r21, 0x41	; 65
    3af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	bc 01       	movw	r22, r24
    3afa:	cd 01       	movw	r24, r26
    3afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	9c 8b       	std	Y+20, r25	; 0x14
    3b06:	8b 8b       	std	Y+19, r24	; 0x13
    3b08:	0f c0       	rjmp	.+30     	; 0x3b28 <Stepper_CounterClockWise_FullStep+0x306>
    3b0a:	88 ec       	ldi	r24, 0xC8	; 200
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	9a 8b       	std	Y+18, r25	; 0x12
    3b10:	89 8b       	std	Y+17, r24	; 0x11
    3b12:	89 89       	ldd	r24, Y+17	; 0x11
    3b14:	9a 89       	ldd	r25, Y+18	; 0x12
    3b16:	01 97       	sbiw	r24, 0x01	; 1
    3b18:	f1 f7       	brne	.-4      	; 0x3b16 <Stepper_CounterClockWise_FullStep+0x2f4>
    3b1a:	9a 8b       	std	Y+18, r25	; 0x12
    3b1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b20:	9c 89       	ldd	r25, Y+20	; 0x14
    3b22:	01 97       	sbiw	r24, 0x01	; 1
    3b24:	9c 8b       	std	Y+20, r25	; 0x14
    3b26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b28:	8b 89       	ldd	r24, Y+19	; 0x13
    3b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b2c:	00 97       	sbiw	r24, 0x00	; 0
    3b2e:	69 f7       	brne	.-38     	; 0x3b0a <Stepper_CounterClockWise_FullStep+0x2e8>
    3b30:	14 c0       	rjmp	.+40     	; 0x3b5a <Stepper_CounterClockWise_FullStep+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b32:	6d 89       	ldd	r22, Y+21	; 0x15
    3b34:	7e 89       	ldd	r23, Y+22	; 0x16
    3b36:	8f 89       	ldd	r24, Y+23	; 0x17
    3b38:	98 8d       	ldd	r25, Y+24	; 0x18
    3b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	9c 8b       	std	Y+20, r25	; 0x14
    3b44:	8b 8b       	std	Y+19, r24	; 0x13
    3b46:	8b 89       	ldd	r24, Y+19	; 0x13
    3b48:	9c 89       	ldd	r25, Y+20	; 0x14
    3b4a:	98 8b       	std	Y+16, r25	; 0x10
    3b4c:	8f 87       	std	Y+15, r24	; 0x0f
    3b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b50:	98 89       	ldd	r25, Y+16	; 0x10
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	f1 f7       	brne	.-4      	; 0x3b52 <Stepper_CounterClockWise_FullStep+0x330>
    3b56:	98 8b       	std	Y+16, r25	; 0x10
    3b58:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(freq);

	//Step4
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	60 e0       	ldi	r22, 0x00	; 0
    3b5e:	41 e0       	ldi	r20, 0x01	; 1
    3b60:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	61 e0       	ldi	r22, 0x01	; 1
    3b68:	40 e0       	ldi	r20, 0x00	; 0
    3b6a:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	62 e0       	ldi	r22, 0x02	; 2
    3b72:	40 e0       	ldi	r20, 0x00	; 0
    3b74:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	63 e0       	ldi	r22, 0x03	; 3
    3b7c:	40 e0       	ldi	r20, 0x00	; 0
    3b7e:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	aa e7       	ldi	r26, 0x7A	; 122
    3b88:	b4 e4       	ldi	r27, 0x44	; 68
    3b8a:	8b 87       	std	Y+11, r24	; 0x0b
    3b8c:	9c 87       	std	Y+12, r25	; 0x0c
    3b8e:	ad 87       	std	Y+13, r26	; 0x0d
    3b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	4a ef       	ldi	r20, 0xFA	; 250
    3ba0:	54 e4       	ldi	r21, 0x44	; 68
    3ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	8f 83       	std	Y+7, r24	; 0x07
    3bac:	98 87       	std	Y+8, r25	; 0x08
    3bae:	a9 87       	std	Y+9, r26	; 0x09
    3bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb4:	78 85       	ldd	r23, Y+8	; 0x08
    3bb6:	89 85       	ldd	r24, Y+9	; 0x09
    3bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e8       	ldi	r20, 0x80	; 128
    3bc0:	5f e3       	ldi	r21, 0x3F	; 63
    3bc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bc6:	88 23       	and	r24, r24
    3bc8:	2c f4       	brge	.+10     	; 0x3bd4 <Stepper_CounterClockWise_FullStep+0x3b2>
		__ticks = 1;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	9e 83       	std	Y+6, r25	; 0x06
    3bd0:	8d 83       	std	Y+5, r24	; 0x05
    3bd2:	3f c0       	rjmp	.+126    	; 0x3c52 <Stepper_CounterClockWise_FullStep+0x430>
	else if (__tmp > 65535)
    3bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd6:	78 85       	ldd	r23, Y+8	; 0x08
    3bd8:	89 85       	ldd	r24, Y+9	; 0x09
    3bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	3f ef       	ldi	r19, 0xFF	; 255
    3be0:	4f e7       	ldi	r20, 0x7F	; 127
    3be2:	57 e4       	ldi	r21, 0x47	; 71
    3be4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3be8:	18 16       	cp	r1, r24
    3bea:	4c f5       	brge	.+82     	; 0x3c3e <Stepper_CounterClockWise_FullStep+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bec:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bee:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	40 e2       	ldi	r20, 0x20	; 32
    3bfa:	51 e4       	ldi	r21, 0x41	; 65
    3bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	bc 01       	movw	r22, r24
    3c06:	cd 01       	movw	r24, r26
    3c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	9e 83       	std	Y+6, r25	; 0x06
    3c12:	8d 83       	std	Y+5, r24	; 0x05
    3c14:	0f c0       	rjmp	.+30     	; 0x3c34 <Stepper_CounterClockWise_FullStep+0x412>
    3c16:	88 ec       	ldi	r24, 0xC8	; 200
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	9c 83       	std	Y+4, r25	; 0x04
    3c1c:	8b 83       	std	Y+3, r24	; 0x03
    3c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c20:	9c 81       	ldd	r25, Y+4	; 0x04
    3c22:	01 97       	sbiw	r24, 0x01	; 1
    3c24:	f1 f7       	brne	.-4      	; 0x3c22 <Stepper_CounterClockWise_FullStep+0x400>
    3c26:	9c 83       	std	Y+4, r25	; 0x04
    3c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	9e 83       	std	Y+6, r25	; 0x06
    3c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c34:	8d 81       	ldd	r24, Y+5	; 0x05
    3c36:	9e 81       	ldd	r25, Y+6	; 0x06
    3c38:	00 97       	sbiw	r24, 0x00	; 0
    3c3a:	69 f7       	brne	.-38     	; 0x3c16 <Stepper_CounterClockWise_FullStep+0x3f4>
    3c3c:	14 c0       	rjmp	.+40     	; 0x3c66 <Stepper_CounterClockWise_FullStep+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c40:	78 85       	ldd	r23, Y+8	; 0x08
    3c42:	89 85       	ldd	r24, Y+9	; 0x09
    3c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	9e 83       	std	Y+6, r25	; 0x06
    3c50:	8d 83       	std	Y+5, r24	; 0x05
    3c52:	8d 81       	ldd	r24, Y+5	; 0x05
    3c54:	9e 81       	ldd	r25, Y+6	; 0x06
    3c56:	9a 83       	std	Y+2, r25	; 0x02
    3c58:	89 83       	std	Y+1, r24	; 0x01
    3c5a:	89 81       	ldd	r24, Y+1	; 0x01
    3c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5e:	01 97       	sbiw	r24, 0x01	; 1
    3c60:	f1 f7       	brne	.-4      	; 0x3c5e <Stepper_CounterClockWise_FullStep+0x43c>
    3c62:	9a 83       	std	Y+2, r25	; 0x02
    3c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(freq);
}
    3c66:	e8 96       	adiw	r28, 0x38	; 56
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	de bf       	out	0x3e, r29	; 62
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	cd bf       	out	0x3d, r28	; 61
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	08 95       	ret

00003c78 <Stepper_ClockWise_HalfStep>:


void Stepper_ClockWise_HalfStep()
{
    3c78:	0f 93       	push	r16
    3c7a:	1f 93       	push	r17
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
    3c84:	c0 57       	subi	r28, 0x70	; 112
    3c86:	d0 40       	sbci	r29, 0x00	; 0
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	f8 94       	cli
    3c8c:	de bf       	out	0x3e, r29	; 62
    3c8e:	0f be       	out	0x3f, r0	; 63
    3c90:	cd bf       	out	0x3d, r28	; 61
	//Step1
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	60 e0       	ldi	r22, 0x00	; 0
    3c96:	41 e0       	ldi	r20, 0x01	; 1
    3c98:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	61 e0       	ldi	r22, 0x01	; 1
    3ca0:	40 e0       	ldi	r20, 0x00	; 0
    3ca2:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	62 e0       	ldi	r22, 0x02	; 2
    3caa:	40 e0       	ldi	r20, 0x00	; 0
    3cac:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	63 e0       	ldi	r22, 0x03	; 3
    3cb4:	41 e0       	ldi	r20, 0x01	; 1
    3cb6:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    3cba:	fe 01       	movw	r30, r28
    3cbc:	e3 59       	subi	r30, 0x93	; 147
    3cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	aa e7       	ldi	r26, 0x7A	; 122
    3cc6:	b4 e4       	ldi	r27, 0x44	; 68
    3cc8:	80 83       	st	Z, r24
    3cca:	91 83       	std	Z+1, r25	; 0x01
    3ccc:	a2 83       	std	Z+2, r26	; 0x02
    3cce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cd0:	8e 01       	movw	r16, r28
    3cd2:	07 59       	subi	r16, 0x97	; 151
    3cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	e3 59       	subi	r30, 0x93	; 147
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	60 81       	ld	r22, Z
    3cde:	71 81       	ldd	r23, Z+1	; 0x01
    3ce0:	82 81       	ldd	r24, Z+2	; 0x02
    3ce2:	93 81       	ldd	r25, Z+3	; 0x03
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	4a ef       	ldi	r20, 0xFA	; 250
    3cea:	54 e4       	ldi	r21, 0x44	; 68
    3cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	80 83       	st	Z, r24
    3cf8:	91 83       	std	Z+1, r25	; 0x01
    3cfa:	a2 83       	std	Z+2, r26	; 0x02
    3cfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cfe:	fe 01       	movw	r30, r28
    3d00:	e7 59       	subi	r30, 0x97	; 151
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	60 81       	ld	r22, Z
    3d06:	71 81       	ldd	r23, Z+1	; 0x01
    3d08:	82 81       	ldd	r24, Z+2	; 0x02
    3d0a:	93 81       	ldd	r25, Z+3	; 0x03
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	40 e8       	ldi	r20, 0x80	; 128
    3d12:	5f e3       	ldi	r21, 0x3F	; 63
    3d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d18:	88 23       	and	r24, r24
    3d1a:	44 f4       	brge	.+16     	; 0x3d2c <Stepper_ClockWise_HalfStep+0xb4>
		__ticks = 1;
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	e9 59       	subi	r30, 0x99	; 153
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	80 83       	st	Z, r24
    3d2a:	64 c0       	rjmp	.+200    	; 0x3df4 <Stepper_ClockWise_HalfStep+0x17c>
	else if (__tmp > 65535)
    3d2c:	fe 01       	movw	r30, r28
    3d2e:	e7 59       	subi	r30, 0x97	; 151
    3d30:	ff 4f       	sbci	r31, 0xFF	; 255
    3d32:	60 81       	ld	r22, Z
    3d34:	71 81       	ldd	r23, Z+1	; 0x01
    3d36:	82 81       	ldd	r24, Z+2	; 0x02
    3d38:	93 81       	ldd	r25, Z+3	; 0x03
    3d3a:	20 e0       	ldi	r18, 0x00	; 0
    3d3c:	3f ef       	ldi	r19, 0xFF	; 255
    3d3e:	4f e7       	ldi	r20, 0x7F	; 127
    3d40:	57 e4       	ldi	r21, 0x47	; 71
    3d42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d46:	18 16       	cp	r1, r24
    3d48:	0c f0       	brlt	.+2      	; 0x3d4c <Stepper_ClockWise_HalfStep+0xd4>
    3d4a:	43 c0       	rjmp	.+134    	; 0x3dd2 <Stepper_ClockWise_HalfStep+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	e3 59       	subi	r30, 0x93	; 147
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	60 81       	ld	r22, Z
    3d54:	71 81       	ldd	r23, Z+1	; 0x01
    3d56:	82 81       	ldd	r24, Z+2	; 0x02
    3d58:	93 81       	ldd	r25, Z+3	; 0x03
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	40 e2       	ldi	r20, 0x20	; 32
    3d60:	51 e4       	ldi	r21, 0x41	; 65
    3d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	8e 01       	movw	r16, r28
    3d6c:	09 59       	subi	r16, 0x99	; 153
    3d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d70:	bc 01       	movw	r22, r24
    3d72:	cd 01       	movw	r24, r26
    3d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	91 83       	std	Z+1, r25	; 0x01
    3d80:	80 83       	st	Z, r24
    3d82:	1f c0       	rjmp	.+62     	; 0x3dc2 <Stepper_ClockWise_HalfStep+0x14a>
    3d84:	fe 01       	movw	r30, r28
    3d86:	eb 59       	subi	r30, 0x9B	; 155
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	88 ec       	ldi	r24, 0xC8	; 200
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	91 83       	std	Z+1, r25	; 0x01
    3d90:	80 83       	st	Z, r24
    3d92:	fe 01       	movw	r30, r28
    3d94:	eb 59       	subi	r30, 0x9B	; 155
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	80 81       	ld	r24, Z
    3d9a:	91 81       	ldd	r25, Z+1	; 0x01
    3d9c:	01 97       	sbiw	r24, 0x01	; 1
    3d9e:	f1 f7       	brne	.-4      	; 0x3d9c <Stepper_ClockWise_HalfStep+0x124>
    3da0:	fe 01       	movw	r30, r28
    3da2:	eb 59       	subi	r30, 0x9B	; 155
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	91 83       	std	Z+1, r25	; 0x01
    3da8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3daa:	de 01       	movw	r26, r28
    3dac:	a9 59       	subi	r26, 0x99	; 153
    3dae:	bf 4f       	sbci	r27, 0xFF	; 255
    3db0:	fe 01       	movw	r30, r28
    3db2:	e9 59       	subi	r30, 0x99	; 153
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	80 81       	ld	r24, Z
    3db8:	91 81       	ldd	r25, Z+1	; 0x01
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	11 96       	adiw	r26, 0x01	; 1
    3dbe:	9c 93       	st	X, r25
    3dc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc2:	fe 01       	movw	r30, r28
    3dc4:	e9 59       	subi	r30, 0x99	; 153
    3dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc8:	80 81       	ld	r24, Z
    3dca:	91 81       	ldd	r25, Z+1	; 0x01
    3dcc:	00 97       	sbiw	r24, 0x00	; 0
    3dce:	d1 f6       	brne	.-76     	; 0x3d84 <Stepper_ClockWise_HalfStep+0x10c>
    3dd0:	27 c0       	rjmp	.+78     	; 0x3e20 <Stepper_ClockWise_HalfStep+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd2:	8e 01       	movw	r16, r28
    3dd4:	09 59       	subi	r16, 0x99	; 153
    3dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e7 59       	subi	r30, 0x97	; 151
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	60 81       	ld	r22, Z
    3de0:	71 81       	ldd	r23, Z+1	; 0x01
    3de2:	82 81       	ldd	r24, Z+2	; 0x02
    3de4:	93 81       	ldd	r25, Z+3	; 0x03
    3de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	f8 01       	movw	r30, r16
    3df0:	91 83       	std	Z+1, r25	; 0x01
    3df2:	80 83       	st	Z, r24
    3df4:	de 01       	movw	r26, r28
    3df6:	ad 59       	subi	r26, 0x9D	; 157
    3df8:	bf 4f       	sbci	r27, 0xFF	; 255
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e9 59       	subi	r30, 0x99	; 153
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	80 81       	ld	r24, Z
    3e02:	91 81       	ldd	r25, Z+1	; 0x01
    3e04:	8d 93       	st	X+, r24
    3e06:	9c 93       	st	X, r25
    3e08:	fe 01       	movw	r30, r28
    3e0a:	ed 59       	subi	r30, 0x9D	; 157
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	80 81       	ld	r24, Z
    3e10:	91 81       	ldd	r25, Z+1	; 0x01
    3e12:	01 97       	sbiw	r24, 0x01	; 1
    3e14:	f1 f7       	brne	.-4      	; 0x3e12 <Stepper_ClockWise_HalfStep+0x19a>
    3e16:	fe 01       	movw	r30, r28
    3e18:	ed 59       	subi	r30, 0x9D	; 157
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	91 83       	std	Z+1, r25	; 0x01
    3e1e:	80 83       	st	Z, r24
	_delay_ms(freq);

	//Step2
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	41 e0       	ldi	r20, 0x01	; 1
    3e26:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	61 e0       	ldi	r22, 0x01	; 1
    3e2e:	40 e0       	ldi	r20, 0x00	; 0
    3e30:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	62 e0       	ldi	r22, 0x02	; 2
    3e38:	40 e0       	ldi	r20, 0x00	; 0
    3e3a:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	63 e0       	ldi	r22, 0x03	; 3
    3e42:	40 e0       	ldi	r20, 0x00	; 0
    3e44:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    3e48:	fe 01       	movw	r30, r28
    3e4a:	e1 5a       	subi	r30, 0xA1	; 161
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	aa e7       	ldi	r26, 0x7A	; 122
    3e54:	b4 e4       	ldi	r27, 0x44	; 68
    3e56:	80 83       	st	Z, r24
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	a2 83       	std	Z+2, r26	; 0x02
    3e5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e5e:	8e 01       	movw	r16, r28
    3e60:	05 5a       	subi	r16, 0xA5	; 165
    3e62:	1f 4f       	sbci	r17, 0xFF	; 255
    3e64:	fe 01       	movw	r30, r28
    3e66:	e1 5a       	subi	r30, 0xA1	; 161
    3e68:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6a:	60 81       	ld	r22, Z
    3e6c:	71 81       	ldd	r23, Z+1	; 0x01
    3e6e:	82 81       	ldd	r24, Z+2	; 0x02
    3e70:	93 81       	ldd	r25, Z+3	; 0x03
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	4a ef       	ldi	r20, 0xFA	; 250
    3e78:	54 e4       	ldi	r21, 0x44	; 68
    3e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	f8 01       	movw	r30, r16
    3e84:	80 83       	st	Z, r24
    3e86:	91 83       	std	Z+1, r25	; 0x01
    3e88:	a2 83       	std	Z+2, r26	; 0x02
    3e8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	e5 5a       	subi	r30, 0xA5	; 165
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	60 81       	ld	r22, Z
    3e94:	71 81       	ldd	r23, Z+1	; 0x01
    3e96:	82 81       	ldd	r24, Z+2	; 0x02
    3e98:	93 81       	ldd	r25, Z+3	; 0x03
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	40 e8       	ldi	r20, 0x80	; 128
    3ea0:	5f e3       	ldi	r21, 0x3F	; 63
    3ea2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ea6:	88 23       	and	r24, r24
    3ea8:	44 f4       	brge	.+16     	; 0x3eba <Stepper_ClockWise_HalfStep+0x242>
		__ticks = 1;
    3eaa:	fe 01       	movw	r30, r28
    3eac:	e7 5a       	subi	r30, 0xA7	; 167
    3eae:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	91 83       	std	Z+1, r25	; 0x01
    3eb6:	80 83       	st	Z, r24
    3eb8:	64 c0       	rjmp	.+200    	; 0x3f82 <Stepper_ClockWise_HalfStep+0x30a>
	else if (__tmp > 65535)
    3eba:	fe 01       	movw	r30, r28
    3ebc:	e5 5a       	subi	r30, 0xA5	; 165
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	60 81       	ld	r22, Z
    3ec2:	71 81       	ldd	r23, Z+1	; 0x01
    3ec4:	82 81       	ldd	r24, Z+2	; 0x02
    3ec6:	93 81       	ldd	r25, Z+3	; 0x03
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	3f ef       	ldi	r19, 0xFF	; 255
    3ecc:	4f e7       	ldi	r20, 0x7F	; 127
    3ece:	57 e4       	ldi	r21, 0x47	; 71
    3ed0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ed4:	18 16       	cp	r1, r24
    3ed6:	0c f0       	brlt	.+2      	; 0x3eda <Stepper_ClockWise_HalfStep+0x262>
    3ed8:	43 c0       	rjmp	.+134    	; 0x3f60 <Stepper_ClockWise_HalfStep+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eda:	fe 01       	movw	r30, r28
    3edc:	e1 5a       	subi	r30, 0xA1	; 161
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	60 81       	ld	r22, Z
    3ee2:	71 81       	ldd	r23, Z+1	; 0x01
    3ee4:	82 81       	ldd	r24, Z+2	; 0x02
    3ee6:	93 81       	ldd	r25, Z+3	; 0x03
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	40 e2       	ldi	r20, 0x20	; 32
    3eee:	51 e4       	ldi	r21, 0x41	; 65
    3ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	8e 01       	movw	r16, r28
    3efa:	07 5a       	subi	r16, 0xA7	; 167
    3efc:	1f 4f       	sbci	r17, 0xFF	; 255
    3efe:	bc 01       	movw	r22, r24
    3f00:	cd 01       	movw	r24, r26
    3f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	f8 01       	movw	r30, r16
    3f0c:	91 83       	std	Z+1, r25	; 0x01
    3f0e:	80 83       	st	Z, r24
    3f10:	1f c0       	rjmp	.+62     	; 0x3f50 <Stepper_ClockWise_HalfStep+0x2d8>
    3f12:	fe 01       	movw	r30, r28
    3f14:	e9 5a       	subi	r30, 0xA9	; 169
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	88 ec       	ldi	r24, 0xC8	; 200
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	91 83       	std	Z+1, r25	; 0x01
    3f1e:	80 83       	st	Z, r24
    3f20:	fe 01       	movw	r30, r28
    3f22:	e9 5a       	subi	r30, 0xA9	; 169
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	80 81       	ld	r24, Z
    3f28:	91 81       	ldd	r25, Z+1	; 0x01
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	f1 f7       	brne	.-4      	; 0x3f2a <Stepper_ClockWise_HalfStep+0x2b2>
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e9 5a       	subi	r30, 0xA9	; 169
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	91 83       	std	Z+1, r25	; 0x01
    3f36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f38:	de 01       	movw	r26, r28
    3f3a:	a7 5a       	subi	r26, 0xA7	; 167
    3f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f3e:	fe 01       	movw	r30, r28
    3f40:	e7 5a       	subi	r30, 0xA7	; 167
    3f42:	ff 4f       	sbci	r31, 0xFF	; 255
    3f44:	80 81       	ld	r24, Z
    3f46:	91 81       	ldd	r25, Z+1	; 0x01
    3f48:	01 97       	sbiw	r24, 0x01	; 1
    3f4a:	11 96       	adiw	r26, 0x01	; 1
    3f4c:	9c 93       	st	X, r25
    3f4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f50:	fe 01       	movw	r30, r28
    3f52:	e7 5a       	subi	r30, 0xA7	; 167
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	80 81       	ld	r24, Z
    3f58:	91 81       	ldd	r25, Z+1	; 0x01
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	d1 f6       	brne	.-76     	; 0x3f12 <Stepper_ClockWise_HalfStep+0x29a>
    3f5e:	27 c0       	rjmp	.+78     	; 0x3fae <Stepper_ClockWise_HalfStep+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f60:	8e 01       	movw	r16, r28
    3f62:	07 5a       	subi	r16, 0xA7	; 167
    3f64:	1f 4f       	sbci	r17, 0xFF	; 255
    3f66:	fe 01       	movw	r30, r28
    3f68:	e5 5a       	subi	r30, 0xA5	; 165
    3f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6c:	60 81       	ld	r22, Z
    3f6e:	71 81       	ldd	r23, Z+1	; 0x01
    3f70:	82 81       	ldd	r24, Z+2	; 0x02
    3f72:	93 81       	ldd	r25, Z+3	; 0x03
    3f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	f8 01       	movw	r30, r16
    3f7e:	91 83       	std	Z+1, r25	; 0x01
    3f80:	80 83       	st	Z, r24
    3f82:	de 01       	movw	r26, r28
    3f84:	ab 5a       	subi	r26, 0xAB	; 171
    3f86:	bf 4f       	sbci	r27, 0xFF	; 255
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e7 5a       	subi	r30, 0xA7	; 167
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01
    3f92:	8d 93       	st	X+, r24
    3f94:	9c 93       	st	X, r25
    3f96:	fe 01       	movw	r30, r28
    3f98:	eb 5a       	subi	r30, 0xAB	; 171
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	80 81       	ld	r24, Z
    3f9e:	91 81       	ldd	r25, Z+1	; 0x01
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
    3fa2:	f1 f7       	brne	.-4      	; 0x3fa0 <Stepper_ClockWise_HalfStep+0x328>
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	eb 5a       	subi	r30, 0xAB	; 171
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	80 83       	st	Z, r24
	_delay_ms(freq);



	//Step3
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	60 e0       	ldi	r22, 0x00	; 0
    3fb2:	41 e0       	ldi	r20, 0x01	; 1
    3fb4:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	61 e0       	ldi	r22, 0x01	; 1
    3fbc:	41 e0       	ldi	r20, 0x01	; 1
    3fbe:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	62 e0       	ldi	r22, 0x02	; 2
    3fc6:	40 e0       	ldi	r20, 0x00	; 0
    3fc8:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	63 e0       	ldi	r22, 0x03	; 3
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	ef 5a       	subi	r30, 0xAF	; 175
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	aa e7       	ldi	r26, 0x7A	; 122
    3fe2:	b4 e4       	ldi	r27, 0x44	; 68
    3fe4:	80 83       	st	Z, r24
    3fe6:	91 83       	std	Z+1, r25	; 0x01
    3fe8:	a2 83       	std	Z+2, r26	; 0x02
    3fea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fec:	8e 01       	movw	r16, r28
    3fee:	03 5b       	subi	r16, 0xB3	; 179
    3ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	ef 5a       	subi	r30, 0xAF	; 175
    3ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff8:	60 81       	ld	r22, Z
    3ffa:	71 81       	ldd	r23, Z+1	; 0x01
    3ffc:	82 81       	ldd	r24, Z+2	; 0x02
    3ffe:	93 81       	ldd	r25, Z+3	; 0x03
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	4a ef       	ldi	r20, 0xFA	; 250
    4006:	54 e4       	ldi	r21, 0x44	; 68
    4008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	f8 01       	movw	r30, r16
    4012:	80 83       	st	Z, r24
    4014:	91 83       	std	Z+1, r25	; 0x01
    4016:	a2 83       	std	Z+2, r26	; 0x02
    4018:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    401a:	fe 01       	movw	r30, r28
    401c:	e3 5b       	subi	r30, 0xB3	; 179
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	60 81       	ld	r22, Z
    4022:	71 81       	ldd	r23, Z+1	; 0x01
    4024:	82 81       	ldd	r24, Z+2	; 0x02
    4026:	93 81       	ldd	r25, Z+3	; 0x03
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	40 e8       	ldi	r20, 0x80	; 128
    402e:	5f e3       	ldi	r21, 0x3F	; 63
    4030:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4034:	88 23       	and	r24, r24
    4036:	44 f4       	brge	.+16     	; 0x4048 <Stepper_ClockWise_HalfStep+0x3d0>
		__ticks = 1;
    4038:	fe 01       	movw	r30, r28
    403a:	e5 5b       	subi	r30, 0xB5	; 181
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	91 83       	std	Z+1, r25	; 0x01
    4044:	80 83       	st	Z, r24
    4046:	64 c0       	rjmp	.+200    	; 0x4110 <Stepper_ClockWise_HalfStep+0x498>
	else if (__tmp > 65535)
    4048:	fe 01       	movw	r30, r28
    404a:	e3 5b       	subi	r30, 0xB3	; 179
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	60 81       	ld	r22, Z
    4050:	71 81       	ldd	r23, Z+1	; 0x01
    4052:	82 81       	ldd	r24, Z+2	; 0x02
    4054:	93 81       	ldd	r25, Z+3	; 0x03
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	3f ef       	ldi	r19, 0xFF	; 255
    405a:	4f e7       	ldi	r20, 0x7F	; 127
    405c:	57 e4       	ldi	r21, 0x47	; 71
    405e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4062:	18 16       	cp	r1, r24
    4064:	0c f0       	brlt	.+2      	; 0x4068 <Stepper_ClockWise_HalfStep+0x3f0>
    4066:	43 c0       	rjmp	.+134    	; 0x40ee <Stepper_ClockWise_HalfStep+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4068:	fe 01       	movw	r30, r28
    406a:	ef 5a       	subi	r30, 0xAF	; 175
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	60 81       	ld	r22, Z
    4070:	71 81       	ldd	r23, Z+1	; 0x01
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	93 81       	ldd	r25, Z+3	; 0x03
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	40 e2       	ldi	r20, 0x20	; 32
    407c:	51 e4       	ldi	r21, 0x41	; 65
    407e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4082:	dc 01       	movw	r26, r24
    4084:	cb 01       	movw	r24, r22
    4086:	8e 01       	movw	r16, r28
    4088:	05 5b       	subi	r16, 0xB5	; 181
    408a:	1f 4f       	sbci	r17, 0xFF	; 255
    408c:	bc 01       	movw	r22, r24
    408e:	cd 01       	movw	r24, r26
    4090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	f8 01       	movw	r30, r16
    409a:	91 83       	std	Z+1, r25	; 0x01
    409c:	80 83       	st	Z, r24
    409e:	1f c0       	rjmp	.+62     	; 0x40de <Stepper_ClockWise_HalfStep+0x466>
    40a0:	fe 01       	movw	r30, r28
    40a2:	e7 5b       	subi	r30, 0xB7	; 183
    40a4:	ff 4f       	sbci	r31, 0xFF	; 255
    40a6:	88 ec       	ldi	r24, 0xC8	; 200
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	91 83       	std	Z+1, r25	; 0x01
    40ac:	80 83       	st	Z, r24
    40ae:	fe 01       	movw	r30, r28
    40b0:	e7 5b       	subi	r30, 0xB7	; 183
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	80 81       	ld	r24, Z
    40b6:	91 81       	ldd	r25, Z+1	; 0x01
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	f1 f7       	brne	.-4      	; 0x40b8 <Stepper_ClockWise_HalfStep+0x440>
    40bc:	fe 01       	movw	r30, r28
    40be:	e7 5b       	subi	r30, 0xB7	; 183
    40c0:	ff 4f       	sbci	r31, 0xFF	; 255
    40c2:	91 83       	std	Z+1, r25	; 0x01
    40c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c6:	de 01       	movw	r26, r28
    40c8:	a5 5b       	subi	r26, 0xB5	; 181
    40ca:	bf 4f       	sbci	r27, 0xFF	; 255
    40cc:	fe 01       	movw	r30, r28
    40ce:	e5 5b       	subi	r30, 0xB5	; 181
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	80 81       	ld	r24, Z
    40d4:	91 81       	ldd	r25, Z+1	; 0x01
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	11 96       	adiw	r26, 0x01	; 1
    40da:	9c 93       	st	X, r25
    40dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40de:	fe 01       	movw	r30, r28
    40e0:	e5 5b       	subi	r30, 0xB5	; 181
    40e2:	ff 4f       	sbci	r31, 0xFF	; 255
    40e4:	80 81       	ld	r24, Z
    40e6:	91 81       	ldd	r25, Z+1	; 0x01
    40e8:	00 97       	sbiw	r24, 0x00	; 0
    40ea:	d1 f6       	brne	.-76     	; 0x40a0 <Stepper_ClockWise_HalfStep+0x428>
    40ec:	27 c0       	rjmp	.+78     	; 0x413c <Stepper_ClockWise_HalfStep+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ee:	8e 01       	movw	r16, r28
    40f0:	05 5b       	subi	r16, 0xB5	; 181
    40f2:	1f 4f       	sbci	r17, 0xFF	; 255
    40f4:	fe 01       	movw	r30, r28
    40f6:	e3 5b       	subi	r30, 0xB3	; 179
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	60 81       	ld	r22, Z
    40fc:	71 81       	ldd	r23, Z+1	; 0x01
    40fe:	82 81       	ldd	r24, Z+2	; 0x02
    4100:	93 81       	ldd	r25, Z+3	; 0x03
    4102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	f8 01       	movw	r30, r16
    410c:	91 83       	std	Z+1, r25	; 0x01
    410e:	80 83       	st	Z, r24
    4110:	de 01       	movw	r26, r28
    4112:	a9 5b       	subi	r26, 0xB9	; 185
    4114:	bf 4f       	sbci	r27, 0xFF	; 255
    4116:	fe 01       	movw	r30, r28
    4118:	e5 5b       	subi	r30, 0xB5	; 181
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	80 81       	ld	r24, Z
    411e:	91 81       	ldd	r25, Z+1	; 0x01
    4120:	8d 93       	st	X+, r24
    4122:	9c 93       	st	X, r25
    4124:	fe 01       	movw	r30, r28
    4126:	e9 5b       	subi	r30, 0xB9	; 185
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	80 81       	ld	r24, Z
    412c:	91 81       	ldd	r25, Z+1	; 0x01
    412e:	01 97       	sbiw	r24, 0x01	; 1
    4130:	f1 f7       	brne	.-4      	; 0x412e <Stepper_ClockWise_HalfStep+0x4b6>
    4132:	fe 01       	movw	r30, r28
    4134:	e9 5b       	subi	r30, 0xB9	; 185
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	91 83       	std	Z+1, r25	; 0x01
    413a:	80 83       	st	Z, r24
	_delay_ms(freq);


	//Step4
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	40 e0       	ldi	r20, 0x00	; 0
    4142:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	61 e0       	ldi	r22, 0x01	; 1
    414a:	41 e0       	ldi	r20, 0x01	; 1
    414c:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	62 e0       	ldi	r22, 0x02	; 2
    4154:	40 e0       	ldi	r20, 0x00	; 0
    4156:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	63 e0       	ldi	r22, 0x03	; 3
    415e:	40 e0       	ldi	r20, 0x00	; 0
    4160:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    4164:	fe 01       	movw	r30, r28
    4166:	ed 5b       	subi	r30, 0xBD	; 189
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	80 e0       	ldi	r24, 0x00	; 0
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	aa e7       	ldi	r26, 0x7A	; 122
    4170:	b4 e4       	ldi	r27, 0x44	; 68
    4172:	80 83       	st	Z, r24
    4174:	91 83       	std	Z+1, r25	; 0x01
    4176:	a2 83       	std	Z+2, r26	; 0x02
    4178:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    417a:	8e 01       	movw	r16, r28
    417c:	01 5c       	subi	r16, 0xC1	; 193
    417e:	1f 4f       	sbci	r17, 0xFF	; 255
    4180:	fe 01       	movw	r30, r28
    4182:	ed 5b       	subi	r30, 0xBD	; 189
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	60 81       	ld	r22, Z
    4188:	71 81       	ldd	r23, Z+1	; 0x01
    418a:	82 81       	ldd	r24, Z+2	; 0x02
    418c:	93 81       	ldd	r25, Z+3	; 0x03
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	4a ef       	ldi	r20, 0xFA	; 250
    4194:	54 e4       	ldi	r21, 0x44	; 68
    4196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	f8 01       	movw	r30, r16
    41a0:	80 83       	st	Z, r24
    41a2:	91 83       	std	Z+1, r25	; 0x01
    41a4:	a2 83       	std	Z+2, r26	; 0x02
    41a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41a8:	fe 01       	movw	r30, r28
    41aa:	ff 96       	adiw	r30, 0x3f	; 63
    41ac:	60 81       	ld	r22, Z
    41ae:	71 81       	ldd	r23, Z+1	; 0x01
    41b0:	82 81       	ldd	r24, Z+2	; 0x02
    41b2:	93 81       	ldd	r25, Z+3	; 0x03
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	40 e8       	ldi	r20, 0x80	; 128
    41ba:	5f e3       	ldi	r21, 0x3F	; 63
    41bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41c0:	88 23       	and	r24, r24
    41c2:	2c f4       	brge	.+10     	; 0x41ce <Stepper_ClockWise_HalfStep+0x556>
		__ticks = 1;
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	9e af       	std	Y+62, r25	; 0x3e
    41ca:	8d af       	std	Y+61, r24	; 0x3d
    41cc:	46 c0       	rjmp	.+140    	; 0x425a <Stepper_ClockWise_HalfStep+0x5e2>
	else if (__tmp > 65535)
    41ce:	fe 01       	movw	r30, r28
    41d0:	ff 96       	adiw	r30, 0x3f	; 63
    41d2:	60 81       	ld	r22, Z
    41d4:	71 81       	ldd	r23, Z+1	; 0x01
    41d6:	82 81       	ldd	r24, Z+2	; 0x02
    41d8:	93 81       	ldd	r25, Z+3	; 0x03
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	3f ef       	ldi	r19, 0xFF	; 255
    41de:	4f e7       	ldi	r20, 0x7F	; 127
    41e0:	57 e4       	ldi	r21, 0x47	; 71
    41e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41e6:	18 16       	cp	r1, r24
    41e8:	64 f5       	brge	.+88     	; 0x4242 <Stepper_ClockWise_HalfStep+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ea:	fe 01       	movw	r30, r28
    41ec:	ed 5b       	subi	r30, 0xBD	; 189
    41ee:	ff 4f       	sbci	r31, 0xFF	; 255
    41f0:	60 81       	ld	r22, Z
    41f2:	71 81       	ldd	r23, Z+1	; 0x01
    41f4:	82 81       	ldd	r24, Z+2	; 0x02
    41f6:	93 81       	ldd	r25, Z+3	; 0x03
    41f8:	20 e0       	ldi	r18, 0x00	; 0
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	40 e2       	ldi	r20, 0x20	; 32
    41fe:	51 e4       	ldi	r21, 0x41	; 65
    4200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	bc 01       	movw	r22, r24
    420a:	cd 01       	movw	r24, r26
    420c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4210:	dc 01       	movw	r26, r24
    4212:	cb 01       	movw	r24, r22
    4214:	9e af       	std	Y+62, r25	; 0x3e
    4216:	8d af       	std	Y+61, r24	; 0x3d
    4218:	0f c0       	rjmp	.+30     	; 0x4238 <Stepper_ClockWise_HalfStep+0x5c0>
    421a:	88 ec       	ldi	r24, 0xC8	; 200
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	9c af       	std	Y+60, r25	; 0x3c
    4220:	8b af       	std	Y+59, r24	; 0x3b
    4222:	8b ad       	ldd	r24, Y+59	; 0x3b
    4224:	9c ad       	ldd	r25, Y+60	; 0x3c
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	f1 f7       	brne	.-4      	; 0x4226 <Stepper_ClockWise_HalfStep+0x5ae>
    422a:	9c af       	std	Y+60, r25	; 0x3c
    422c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    422e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4230:	9e ad       	ldd	r25, Y+62	; 0x3e
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	9e af       	std	Y+62, r25	; 0x3e
    4236:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4238:	8d ad       	ldd	r24, Y+61	; 0x3d
    423a:	9e ad       	ldd	r25, Y+62	; 0x3e
    423c:	00 97       	sbiw	r24, 0x00	; 0
    423e:	69 f7       	brne	.-38     	; 0x421a <Stepper_ClockWise_HalfStep+0x5a2>
    4240:	16 c0       	rjmp	.+44     	; 0x426e <Stepper_ClockWise_HalfStep+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4242:	fe 01       	movw	r30, r28
    4244:	ff 96       	adiw	r30, 0x3f	; 63
    4246:	60 81       	ld	r22, Z
    4248:	71 81       	ldd	r23, Z+1	; 0x01
    424a:	82 81       	ldd	r24, Z+2	; 0x02
    424c:	93 81       	ldd	r25, Z+3	; 0x03
    424e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4252:	dc 01       	movw	r26, r24
    4254:	cb 01       	movw	r24, r22
    4256:	9e af       	std	Y+62, r25	; 0x3e
    4258:	8d af       	std	Y+61, r24	; 0x3d
    425a:	8d ad       	ldd	r24, Y+61	; 0x3d
    425c:	9e ad       	ldd	r25, Y+62	; 0x3e
    425e:	9a af       	std	Y+58, r25	; 0x3a
    4260:	89 af       	std	Y+57, r24	; 0x39
    4262:	89 ad       	ldd	r24, Y+57	; 0x39
    4264:	9a ad       	ldd	r25, Y+58	; 0x3a
    4266:	01 97       	sbiw	r24, 0x01	; 1
    4268:	f1 f7       	brne	.-4      	; 0x4266 <Stepper_ClockWise_HalfStep+0x5ee>
    426a:	9a af       	std	Y+58, r25	; 0x3a
    426c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(freq);


	//Step5
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	60 e0       	ldi	r22, 0x00	; 0
    4272:	40 e0       	ldi	r20, 0x00	; 0
    4274:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	61 e0       	ldi	r22, 0x01	; 1
    427c:	41 e0       	ldi	r20, 0x01	; 1
    427e:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	62 e0       	ldi	r22, 0x02	; 2
    4286:	41 e0       	ldi	r20, 0x01	; 1
    4288:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	63 e0       	ldi	r22, 0x03	; 3
    4290:	40 e0       	ldi	r20, 0x00	; 0
    4292:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	aa e7       	ldi	r26, 0x7A	; 122
    429c:	b4 e4       	ldi	r27, 0x44	; 68
    429e:	8d ab       	std	Y+53, r24	; 0x35
    42a0:	9e ab       	std	Y+54, r25	; 0x36
    42a2:	af ab       	std	Y+55, r26	; 0x37
    42a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42a6:	6d a9       	ldd	r22, Y+53	; 0x35
    42a8:	7e a9       	ldd	r23, Y+54	; 0x36
    42aa:	8f a9       	ldd	r24, Y+55	; 0x37
    42ac:	98 ad       	ldd	r25, Y+56	; 0x38
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	4a ef       	ldi	r20, 0xFA	; 250
    42b4:	54 e4       	ldi	r21, 0x44	; 68
    42b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	89 ab       	std	Y+49, r24	; 0x31
    42c0:	9a ab       	std	Y+50, r25	; 0x32
    42c2:	ab ab       	std	Y+51, r26	; 0x33
    42c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    42c6:	69 a9       	ldd	r22, Y+49	; 0x31
    42c8:	7a a9       	ldd	r23, Y+50	; 0x32
    42ca:	8b a9       	ldd	r24, Y+51	; 0x33
    42cc:	9c a9       	ldd	r25, Y+52	; 0x34
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	40 e8       	ldi	r20, 0x80	; 128
    42d4:	5f e3       	ldi	r21, 0x3F	; 63
    42d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42da:	88 23       	and	r24, r24
    42dc:	2c f4       	brge	.+10     	; 0x42e8 <Stepper_ClockWise_HalfStep+0x670>
		__ticks = 1;
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	98 ab       	std	Y+48, r25	; 0x30
    42e4:	8f a7       	std	Y+47, r24	; 0x2f
    42e6:	3f c0       	rjmp	.+126    	; 0x4366 <Stepper_ClockWise_HalfStep+0x6ee>
	else if (__tmp > 65535)
    42e8:	69 a9       	ldd	r22, Y+49	; 0x31
    42ea:	7a a9       	ldd	r23, Y+50	; 0x32
    42ec:	8b a9       	ldd	r24, Y+51	; 0x33
    42ee:	9c a9       	ldd	r25, Y+52	; 0x34
    42f0:	20 e0       	ldi	r18, 0x00	; 0
    42f2:	3f ef       	ldi	r19, 0xFF	; 255
    42f4:	4f e7       	ldi	r20, 0x7F	; 127
    42f6:	57 e4       	ldi	r21, 0x47	; 71
    42f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42fc:	18 16       	cp	r1, r24
    42fe:	4c f5       	brge	.+82     	; 0x4352 <Stepper_ClockWise_HalfStep+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4300:	6d a9       	ldd	r22, Y+53	; 0x35
    4302:	7e a9       	ldd	r23, Y+54	; 0x36
    4304:	8f a9       	ldd	r24, Y+55	; 0x37
    4306:	98 ad       	ldd	r25, Y+56	; 0x38
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	40 e2       	ldi	r20, 0x20	; 32
    430e:	51 e4       	ldi	r21, 0x41	; 65
    4310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	bc 01       	movw	r22, r24
    431a:	cd 01       	movw	r24, r26
    431c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4320:	dc 01       	movw	r26, r24
    4322:	cb 01       	movw	r24, r22
    4324:	98 ab       	std	Y+48, r25	; 0x30
    4326:	8f a7       	std	Y+47, r24	; 0x2f
    4328:	0f c0       	rjmp	.+30     	; 0x4348 <Stepper_ClockWise_HalfStep+0x6d0>
    432a:	88 ec       	ldi	r24, 0xC8	; 200
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	9e a7       	std	Y+46, r25	; 0x2e
    4330:	8d a7       	std	Y+45, r24	; 0x2d
    4332:	8d a5       	ldd	r24, Y+45	; 0x2d
    4334:	9e a5       	ldd	r25, Y+46	; 0x2e
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	f1 f7       	brne	.-4      	; 0x4336 <Stepper_ClockWise_HalfStep+0x6be>
    433a:	9e a7       	std	Y+46, r25	; 0x2e
    433c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    433e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4340:	98 a9       	ldd	r25, Y+48	; 0x30
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	98 ab       	std	Y+48, r25	; 0x30
    4346:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4348:	8f a5       	ldd	r24, Y+47	; 0x2f
    434a:	98 a9       	ldd	r25, Y+48	; 0x30
    434c:	00 97       	sbiw	r24, 0x00	; 0
    434e:	69 f7       	brne	.-38     	; 0x432a <Stepper_ClockWise_HalfStep+0x6b2>
    4350:	14 c0       	rjmp	.+40     	; 0x437a <Stepper_ClockWise_HalfStep+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4352:	69 a9       	ldd	r22, Y+49	; 0x31
    4354:	7a a9       	ldd	r23, Y+50	; 0x32
    4356:	8b a9       	ldd	r24, Y+51	; 0x33
    4358:	9c a9       	ldd	r25, Y+52	; 0x34
    435a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	98 ab       	std	Y+48, r25	; 0x30
    4364:	8f a7       	std	Y+47, r24	; 0x2f
    4366:	8f a5       	ldd	r24, Y+47	; 0x2f
    4368:	98 a9       	ldd	r25, Y+48	; 0x30
    436a:	9c a7       	std	Y+44, r25	; 0x2c
    436c:	8b a7       	std	Y+43, r24	; 0x2b
    436e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4370:	9c a5       	ldd	r25, Y+44	; 0x2c
    4372:	01 97       	sbiw	r24, 0x01	; 1
    4374:	f1 f7       	brne	.-4      	; 0x4372 <Stepper_ClockWise_HalfStep+0x6fa>
    4376:	9c a7       	std	Y+44, r25	; 0x2c
    4378:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(freq);

	//Step6
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	60 e0       	ldi	r22, 0x00	; 0
    437e:	40 e0       	ldi	r20, 0x00	; 0
    4380:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	61 e0       	ldi	r22, 0x01	; 1
    4388:	40 e0       	ldi	r20, 0x00	; 0
    438a:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	62 e0       	ldi	r22, 0x02	; 2
    4392:	41 e0       	ldi	r20, 0x01	; 1
    4394:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	63 e0       	ldi	r22, 0x03	; 3
    439c:	40 e0       	ldi	r20, 0x00	; 0
    439e:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	aa e7       	ldi	r26, 0x7A	; 122
    43a8:	b4 e4       	ldi	r27, 0x44	; 68
    43aa:	8f a3       	std	Y+39, r24	; 0x27
    43ac:	98 a7       	std	Y+40, r25	; 0x28
    43ae:	a9 a7       	std	Y+41, r26	; 0x29
    43b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b2:	6f a1       	ldd	r22, Y+39	; 0x27
    43b4:	78 a5       	ldd	r23, Y+40	; 0x28
    43b6:	89 a5       	ldd	r24, Y+41	; 0x29
    43b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	4a ef       	ldi	r20, 0xFA	; 250
    43c0:	54 e4       	ldi	r21, 0x44	; 68
    43c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	8b a3       	std	Y+35, r24	; 0x23
    43cc:	9c a3       	std	Y+36, r25	; 0x24
    43ce:	ad a3       	std	Y+37, r26	; 0x25
    43d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43d2:	6b a1       	ldd	r22, Y+35	; 0x23
    43d4:	7c a1       	ldd	r23, Y+36	; 0x24
    43d6:	8d a1       	ldd	r24, Y+37	; 0x25
    43d8:	9e a1       	ldd	r25, Y+38	; 0x26
    43da:	20 e0       	ldi	r18, 0x00	; 0
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	40 e8       	ldi	r20, 0x80	; 128
    43e0:	5f e3       	ldi	r21, 0x3F	; 63
    43e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43e6:	88 23       	and	r24, r24
    43e8:	2c f4       	brge	.+10     	; 0x43f4 <Stepper_ClockWise_HalfStep+0x77c>
		__ticks = 1;
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	9a a3       	std	Y+34, r25	; 0x22
    43f0:	89 a3       	std	Y+33, r24	; 0x21
    43f2:	3f c0       	rjmp	.+126    	; 0x4472 <Stepper_ClockWise_HalfStep+0x7fa>
	else if (__tmp > 65535)
    43f4:	6b a1       	ldd	r22, Y+35	; 0x23
    43f6:	7c a1       	ldd	r23, Y+36	; 0x24
    43f8:	8d a1       	ldd	r24, Y+37	; 0x25
    43fa:	9e a1       	ldd	r25, Y+38	; 0x26
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	3f ef       	ldi	r19, 0xFF	; 255
    4400:	4f e7       	ldi	r20, 0x7F	; 127
    4402:	57 e4       	ldi	r21, 0x47	; 71
    4404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4408:	18 16       	cp	r1, r24
    440a:	4c f5       	brge	.+82     	; 0x445e <Stepper_ClockWise_HalfStep+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    440c:	6f a1       	ldd	r22, Y+39	; 0x27
    440e:	78 a5       	ldd	r23, Y+40	; 0x28
    4410:	89 a5       	ldd	r24, Y+41	; 0x29
    4412:	9a a5       	ldd	r25, Y+42	; 0x2a
    4414:	20 e0       	ldi	r18, 0x00	; 0
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	40 e2       	ldi	r20, 0x20	; 32
    441a:	51 e4       	ldi	r21, 0x41	; 65
    441c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	bc 01       	movw	r22, r24
    4426:	cd 01       	movw	r24, r26
    4428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    442c:	dc 01       	movw	r26, r24
    442e:	cb 01       	movw	r24, r22
    4430:	9a a3       	std	Y+34, r25	; 0x22
    4432:	89 a3       	std	Y+33, r24	; 0x21
    4434:	0f c0       	rjmp	.+30     	; 0x4454 <Stepper_ClockWise_HalfStep+0x7dc>
    4436:	88 ec       	ldi	r24, 0xC8	; 200
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	98 a3       	std	Y+32, r25	; 0x20
    443c:	8f 8f       	std	Y+31, r24	; 0x1f
    443e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4440:	98 a1       	ldd	r25, Y+32	; 0x20
    4442:	01 97       	sbiw	r24, 0x01	; 1
    4444:	f1 f7       	brne	.-4      	; 0x4442 <Stepper_ClockWise_HalfStep+0x7ca>
    4446:	98 a3       	std	Y+32, r25	; 0x20
    4448:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    444a:	89 a1       	ldd	r24, Y+33	; 0x21
    444c:	9a a1       	ldd	r25, Y+34	; 0x22
    444e:	01 97       	sbiw	r24, 0x01	; 1
    4450:	9a a3       	std	Y+34, r25	; 0x22
    4452:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4454:	89 a1       	ldd	r24, Y+33	; 0x21
    4456:	9a a1       	ldd	r25, Y+34	; 0x22
    4458:	00 97       	sbiw	r24, 0x00	; 0
    445a:	69 f7       	brne	.-38     	; 0x4436 <Stepper_ClockWise_HalfStep+0x7be>
    445c:	14 c0       	rjmp	.+40     	; 0x4486 <Stepper_ClockWise_HalfStep+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    445e:	6b a1       	ldd	r22, Y+35	; 0x23
    4460:	7c a1       	ldd	r23, Y+36	; 0x24
    4462:	8d a1       	ldd	r24, Y+37	; 0x25
    4464:	9e a1       	ldd	r25, Y+38	; 0x26
    4466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446a:	dc 01       	movw	r26, r24
    446c:	cb 01       	movw	r24, r22
    446e:	9a a3       	std	Y+34, r25	; 0x22
    4470:	89 a3       	std	Y+33, r24	; 0x21
    4472:	89 a1       	ldd	r24, Y+33	; 0x21
    4474:	9a a1       	ldd	r25, Y+34	; 0x22
    4476:	9e 8f       	std	Y+30, r25	; 0x1e
    4478:	8d 8f       	std	Y+29, r24	; 0x1d
    447a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    447c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    447e:	01 97       	sbiw	r24, 0x01	; 1
    4480:	f1 f7       	brne	.-4      	; 0x447e <Stepper_ClockWise_HalfStep+0x806>
    4482:	9e 8f       	std	Y+30, r25	; 0x1e
    4484:	8d 8f       	std	Y+29, r24	; 0x1d




	//Step7
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    4486:	81 e0       	ldi	r24, 0x01	; 1
    4488:	60 e0       	ldi	r22, 0x00	; 0
    448a:	40 e0       	ldi	r20, 0x00	; 0
    448c:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    4490:	81 e0       	ldi	r24, 0x01	; 1
    4492:	61 e0       	ldi	r22, 0x01	; 1
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	62 e0       	ldi	r22, 0x02	; 2
    449e:	41 e0       	ldi	r20, 0x01	; 1
    44a0:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	63 e0       	ldi	r22, 0x03	; 3
    44a8:	41 e0       	ldi	r20, 0x01	; 1
    44aa:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	aa e7       	ldi	r26, 0x7A	; 122
    44b4:	b4 e4       	ldi	r27, 0x44	; 68
    44b6:	89 8f       	std	Y+25, r24	; 0x19
    44b8:	9a 8f       	std	Y+26, r25	; 0x1a
    44ba:	ab 8f       	std	Y+27, r26	; 0x1b
    44bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44be:	69 8d       	ldd	r22, Y+25	; 0x19
    44c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	4a ef       	ldi	r20, 0xFA	; 250
    44cc:	54 e4       	ldi	r21, 0x44	; 68
    44ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	8d 8b       	std	Y+21, r24	; 0x15
    44d8:	9e 8b       	std	Y+22, r25	; 0x16
    44da:	af 8b       	std	Y+23, r26	; 0x17
    44dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44de:	6d 89       	ldd	r22, Y+21	; 0x15
    44e0:	7e 89       	ldd	r23, Y+22	; 0x16
    44e2:	8f 89       	ldd	r24, Y+23	; 0x17
    44e4:	98 8d       	ldd	r25, Y+24	; 0x18
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	40 e8       	ldi	r20, 0x80	; 128
    44ec:	5f e3       	ldi	r21, 0x3F	; 63
    44ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44f2:	88 23       	and	r24, r24
    44f4:	2c f4       	brge	.+10     	; 0x4500 <Stepper_ClockWise_HalfStep+0x888>
		__ticks = 1;
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	9c 8b       	std	Y+20, r25	; 0x14
    44fc:	8b 8b       	std	Y+19, r24	; 0x13
    44fe:	3f c0       	rjmp	.+126    	; 0x457e <Stepper_ClockWise_HalfStep+0x906>
	else if (__tmp > 65535)
    4500:	6d 89       	ldd	r22, Y+21	; 0x15
    4502:	7e 89       	ldd	r23, Y+22	; 0x16
    4504:	8f 89       	ldd	r24, Y+23	; 0x17
    4506:	98 8d       	ldd	r25, Y+24	; 0x18
    4508:	20 e0       	ldi	r18, 0x00	; 0
    450a:	3f ef       	ldi	r19, 0xFF	; 255
    450c:	4f e7       	ldi	r20, 0x7F	; 127
    450e:	57 e4       	ldi	r21, 0x47	; 71
    4510:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4514:	18 16       	cp	r1, r24
    4516:	4c f5       	brge	.+82     	; 0x456a <Stepper_ClockWise_HalfStep+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4518:	69 8d       	ldd	r22, Y+25	; 0x19
    451a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    451c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    451e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	40 e2       	ldi	r20, 0x20	; 32
    4526:	51 e4       	ldi	r21, 0x41	; 65
    4528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    452c:	dc 01       	movw	r26, r24
    452e:	cb 01       	movw	r24, r22
    4530:	bc 01       	movw	r22, r24
    4532:	cd 01       	movw	r24, r26
    4534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	9c 8b       	std	Y+20, r25	; 0x14
    453e:	8b 8b       	std	Y+19, r24	; 0x13
    4540:	0f c0       	rjmp	.+30     	; 0x4560 <Stepper_ClockWise_HalfStep+0x8e8>
    4542:	88 ec       	ldi	r24, 0xC8	; 200
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	9a 8b       	std	Y+18, r25	; 0x12
    4548:	89 8b       	std	Y+17, r24	; 0x11
    454a:	89 89       	ldd	r24, Y+17	; 0x11
    454c:	9a 89       	ldd	r25, Y+18	; 0x12
    454e:	01 97       	sbiw	r24, 0x01	; 1
    4550:	f1 f7       	brne	.-4      	; 0x454e <Stepper_ClockWise_HalfStep+0x8d6>
    4552:	9a 8b       	std	Y+18, r25	; 0x12
    4554:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4556:	8b 89       	ldd	r24, Y+19	; 0x13
    4558:	9c 89       	ldd	r25, Y+20	; 0x14
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	9c 8b       	std	Y+20, r25	; 0x14
    455e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4560:	8b 89       	ldd	r24, Y+19	; 0x13
    4562:	9c 89       	ldd	r25, Y+20	; 0x14
    4564:	00 97       	sbiw	r24, 0x00	; 0
    4566:	69 f7       	brne	.-38     	; 0x4542 <Stepper_ClockWise_HalfStep+0x8ca>
    4568:	14 c0       	rjmp	.+40     	; 0x4592 <Stepper_ClockWise_HalfStep+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    456a:	6d 89       	ldd	r22, Y+21	; 0x15
    456c:	7e 89       	ldd	r23, Y+22	; 0x16
    456e:	8f 89       	ldd	r24, Y+23	; 0x17
    4570:	98 8d       	ldd	r25, Y+24	; 0x18
    4572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	9c 8b       	std	Y+20, r25	; 0x14
    457c:	8b 8b       	std	Y+19, r24	; 0x13
    457e:	8b 89       	ldd	r24, Y+19	; 0x13
    4580:	9c 89       	ldd	r25, Y+20	; 0x14
    4582:	98 8b       	std	Y+16, r25	; 0x10
    4584:	8f 87       	std	Y+15, r24	; 0x0f
    4586:	8f 85       	ldd	r24, Y+15	; 0x0f
    4588:	98 89       	ldd	r25, Y+16	; 0x10
    458a:	01 97       	sbiw	r24, 0x01	; 1
    458c:	f1 f7       	brne	.-4      	; 0x458a <Stepper_ClockWise_HalfStep+0x912>
    458e:	98 8b       	std	Y+16, r25	; 0x10
    4590:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(freq);



	//Step8
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	60 e0       	ldi	r22, 0x00	; 0
    4596:	40 e0       	ldi	r20, 0x00	; 0
    4598:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	61 e0       	ldi	r22, 0x01	; 1
    45a0:	40 e0       	ldi	r20, 0x00	; 0
    45a2:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	62 e0       	ldi	r22, 0x02	; 2
    45aa:	40 e0       	ldi	r20, 0x00	; 0
    45ac:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    45b0:	81 e0       	ldi	r24, 0x01	; 1
    45b2:	63 e0       	ldi	r22, 0x03	; 3
    45b4:	41 e0       	ldi	r20, 0x01	; 1
    45b6:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	aa e7       	ldi	r26, 0x7A	; 122
    45c0:	b4 e4       	ldi	r27, 0x44	; 68
    45c2:	8b 87       	std	Y+11, r24	; 0x0b
    45c4:	9c 87       	std	Y+12, r25	; 0x0c
    45c6:	ad 87       	std	Y+13, r26	; 0x0d
    45c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    45cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    45ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    45d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	4a ef       	ldi	r20, 0xFA	; 250
    45d8:	54 e4       	ldi	r21, 0x44	; 68
    45da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	8f 83       	std	Y+7, r24	; 0x07
    45e4:	98 87       	std	Y+8, r25	; 0x08
    45e6:	a9 87       	std	Y+9, r26	; 0x09
    45e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45ea:	6f 81       	ldd	r22, Y+7	; 0x07
    45ec:	78 85       	ldd	r23, Y+8	; 0x08
    45ee:	89 85       	ldd	r24, Y+9	; 0x09
    45f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	40 e8       	ldi	r20, 0x80	; 128
    45f8:	5f e3       	ldi	r21, 0x3F	; 63
    45fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45fe:	88 23       	and	r24, r24
    4600:	2c f4       	brge	.+10     	; 0x460c <Stepper_ClockWise_HalfStep+0x994>
		__ticks = 1;
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	9e 83       	std	Y+6, r25	; 0x06
    4608:	8d 83       	std	Y+5, r24	; 0x05
    460a:	3f c0       	rjmp	.+126    	; 0x468a <Stepper_ClockWise_HalfStep+0xa12>
	else if (__tmp > 65535)
    460c:	6f 81       	ldd	r22, Y+7	; 0x07
    460e:	78 85       	ldd	r23, Y+8	; 0x08
    4610:	89 85       	ldd	r24, Y+9	; 0x09
    4612:	9a 85       	ldd	r25, Y+10	; 0x0a
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	3f ef       	ldi	r19, 0xFF	; 255
    4618:	4f e7       	ldi	r20, 0x7F	; 127
    461a:	57 e4       	ldi	r21, 0x47	; 71
    461c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4620:	18 16       	cp	r1, r24
    4622:	4c f5       	brge	.+82     	; 0x4676 <Stepper_ClockWise_HalfStep+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4624:	6b 85       	ldd	r22, Y+11	; 0x0b
    4626:	7c 85       	ldd	r23, Y+12	; 0x0c
    4628:	8d 85       	ldd	r24, Y+13	; 0x0d
    462a:	9e 85       	ldd	r25, Y+14	; 0x0e
    462c:	20 e0       	ldi	r18, 0x00	; 0
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	40 e2       	ldi	r20, 0x20	; 32
    4632:	51 e4       	ldi	r21, 0x41	; 65
    4634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	bc 01       	movw	r22, r24
    463e:	cd 01       	movw	r24, r26
    4640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	9e 83       	std	Y+6, r25	; 0x06
    464a:	8d 83       	std	Y+5, r24	; 0x05
    464c:	0f c0       	rjmp	.+30     	; 0x466c <Stepper_ClockWise_HalfStep+0x9f4>
    464e:	88 ec       	ldi	r24, 0xC8	; 200
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	9c 83       	std	Y+4, r25	; 0x04
    4654:	8b 83       	std	Y+3, r24	; 0x03
    4656:	8b 81       	ldd	r24, Y+3	; 0x03
    4658:	9c 81       	ldd	r25, Y+4	; 0x04
    465a:	01 97       	sbiw	r24, 0x01	; 1
    465c:	f1 f7       	brne	.-4      	; 0x465a <Stepper_ClockWise_HalfStep+0x9e2>
    465e:	9c 83       	std	Y+4, r25	; 0x04
    4660:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4662:	8d 81       	ldd	r24, Y+5	; 0x05
    4664:	9e 81       	ldd	r25, Y+6	; 0x06
    4666:	01 97       	sbiw	r24, 0x01	; 1
    4668:	9e 83       	std	Y+6, r25	; 0x06
    466a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466c:	8d 81       	ldd	r24, Y+5	; 0x05
    466e:	9e 81       	ldd	r25, Y+6	; 0x06
    4670:	00 97       	sbiw	r24, 0x00	; 0
    4672:	69 f7       	brne	.-38     	; 0x464e <Stepper_ClockWise_HalfStep+0x9d6>
    4674:	14 c0       	rjmp	.+40     	; 0x469e <Stepper_ClockWise_HalfStep+0xa26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4676:	6f 81       	ldd	r22, Y+7	; 0x07
    4678:	78 85       	ldd	r23, Y+8	; 0x08
    467a:	89 85       	ldd	r24, Y+9	; 0x09
    467c:	9a 85       	ldd	r25, Y+10	; 0x0a
    467e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	9e 83       	std	Y+6, r25	; 0x06
    4688:	8d 83       	std	Y+5, r24	; 0x05
    468a:	8d 81       	ldd	r24, Y+5	; 0x05
    468c:	9e 81       	ldd	r25, Y+6	; 0x06
    468e:	9a 83       	std	Y+2, r25	; 0x02
    4690:	89 83       	std	Y+1, r24	; 0x01
    4692:	89 81       	ldd	r24, Y+1	; 0x01
    4694:	9a 81       	ldd	r25, Y+2	; 0x02
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	f1 f7       	brne	.-4      	; 0x4696 <Stepper_ClockWise_HalfStep+0xa1e>
    469a:	9a 83       	std	Y+2, r25	; 0x02
    469c:	89 83       	std	Y+1, r24	; 0x01





}
    469e:	c0 59       	subi	r28, 0x90	; 144
    46a0:	df 4f       	sbci	r29, 0xFF	; 255
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	f8 94       	cli
    46a6:	de bf       	out	0x3e, r29	; 62
    46a8:	0f be       	out	0x3f, r0	; 63
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	cf 91       	pop	r28
    46ae:	df 91       	pop	r29
    46b0:	1f 91       	pop	r17
    46b2:	0f 91       	pop	r16
    46b4:	08 95       	ret

000046b6 <Stepper_CounterClockWise_HalfStep>:
void Stepper_CounterClockWise_HalfStep()
{
    46b6:	0f 93       	push	r16
    46b8:	1f 93       	push	r17
    46ba:	df 93       	push	r29
    46bc:	cf 93       	push	r28
    46be:	cd b7       	in	r28, 0x3d	; 61
    46c0:	de b7       	in	r29, 0x3e	; 62
    46c2:	c0 57       	subi	r28, 0x70	; 112
    46c4:	d0 40       	sbci	r29, 0x00	; 0
    46c6:	0f b6       	in	r0, 0x3f	; 63
    46c8:	f8 94       	cli
    46ca:	de bf       	out	0x3e, r29	; 62
    46cc:	0f be       	out	0x3f, r0	; 63
    46ce:	cd bf       	out	0x3d, r28	; 61

	//Step1
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	60 e0       	ldi	r22, 0x00	; 0
    46d4:	41 e0       	ldi	r20, 0x01	; 1
    46d6:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	61 e0       	ldi	r22, 0x01	; 1
    46de:	40 e0       	ldi	r20, 0x00	; 0
    46e0:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	62 e0       	ldi	r22, 0x02	; 2
    46e8:	40 e0       	ldi	r20, 0x00	; 0
    46ea:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	63 e0       	ldi	r22, 0x03	; 3
    46f2:	41 e0       	ldi	r20, 0x01	; 1
    46f4:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    46f8:	fe 01       	movw	r30, r28
    46fa:	e3 59       	subi	r30, 0x93	; 147
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	80 e0       	ldi	r24, 0x00	; 0
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	aa e7       	ldi	r26, 0x7A	; 122
    4704:	b4 e4       	ldi	r27, 0x44	; 68
    4706:	80 83       	st	Z, r24
    4708:	91 83       	std	Z+1, r25	; 0x01
    470a:	a2 83       	std	Z+2, r26	; 0x02
    470c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    470e:	8e 01       	movw	r16, r28
    4710:	07 59       	subi	r16, 0x97	; 151
    4712:	1f 4f       	sbci	r17, 0xFF	; 255
    4714:	fe 01       	movw	r30, r28
    4716:	e3 59       	subi	r30, 0x93	; 147
    4718:	ff 4f       	sbci	r31, 0xFF	; 255
    471a:	60 81       	ld	r22, Z
    471c:	71 81       	ldd	r23, Z+1	; 0x01
    471e:	82 81       	ldd	r24, Z+2	; 0x02
    4720:	93 81       	ldd	r25, Z+3	; 0x03
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	4a ef       	ldi	r20, 0xFA	; 250
    4728:	54 e4       	ldi	r21, 0x44	; 68
    472a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    472e:	dc 01       	movw	r26, r24
    4730:	cb 01       	movw	r24, r22
    4732:	f8 01       	movw	r30, r16
    4734:	80 83       	st	Z, r24
    4736:	91 83       	std	Z+1, r25	; 0x01
    4738:	a2 83       	std	Z+2, r26	; 0x02
    473a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    473c:	fe 01       	movw	r30, r28
    473e:	e7 59       	subi	r30, 0x97	; 151
    4740:	ff 4f       	sbci	r31, 0xFF	; 255
    4742:	60 81       	ld	r22, Z
    4744:	71 81       	ldd	r23, Z+1	; 0x01
    4746:	82 81       	ldd	r24, Z+2	; 0x02
    4748:	93 81       	ldd	r25, Z+3	; 0x03
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	40 e8       	ldi	r20, 0x80	; 128
    4750:	5f e3       	ldi	r21, 0x3F	; 63
    4752:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4756:	88 23       	and	r24, r24
    4758:	44 f4       	brge	.+16     	; 0x476a <Stepper_CounterClockWise_HalfStep+0xb4>
		__ticks = 1;
    475a:	fe 01       	movw	r30, r28
    475c:	e9 59       	subi	r30, 0x99	; 153
    475e:	ff 4f       	sbci	r31, 0xFF	; 255
    4760:	81 e0       	ldi	r24, 0x01	; 1
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	91 83       	std	Z+1, r25	; 0x01
    4766:	80 83       	st	Z, r24
    4768:	64 c0       	rjmp	.+200    	; 0x4832 <Stepper_CounterClockWise_HalfStep+0x17c>
	else if (__tmp > 65535)
    476a:	fe 01       	movw	r30, r28
    476c:	e7 59       	subi	r30, 0x97	; 151
    476e:	ff 4f       	sbci	r31, 0xFF	; 255
    4770:	60 81       	ld	r22, Z
    4772:	71 81       	ldd	r23, Z+1	; 0x01
    4774:	82 81       	ldd	r24, Z+2	; 0x02
    4776:	93 81       	ldd	r25, Z+3	; 0x03
    4778:	20 e0       	ldi	r18, 0x00	; 0
    477a:	3f ef       	ldi	r19, 0xFF	; 255
    477c:	4f e7       	ldi	r20, 0x7F	; 127
    477e:	57 e4       	ldi	r21, 0x47	; 71
    4780:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4784:	18 16       	cp	r1, r24
    4786:	0c f0       	brlt	.+2      	; 0x478a <Stepper_CounterClockWise_HalfStep+0xd4>
    4788:	43 c0       	rjmp	.+134    	; 0x4810 <Stepper_CounterClockWise_HalfStep+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    478a:	fe 01       	movw	r30, r28
    478c:	e3 59       	subi	r30, 0x93	; 147
    478e:	ff 4f       	sbci	r31, 0xFF	; 255
    4790:	60 81       	ld	r22, Z
    4792:	71 81       	ldd	r23, Z+1	; 0x01
    4794:	82 81       	ldd	r24, Z+2	; 0x02
    4796:	93 81       	ldd	r25, Z+3	; 0x03
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	40 e2       	ldi	r20, 0x20	; 32
    479e:	51 e4       	ldi	r21, 0x41	; 65
    47a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	8e 01       	movw	r16, r28
    47aa:	09 59       	subi	r16, 0x99	; 153
    47ac:	1f 4f       	sbci	r17, 0xFF	; 255
    47ae:	bc 01       	movw	r22, r24
    47b0:	cd 01       	movw	r24, r26
    47b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b6:	dc 01       	movw	r26, r24
    47b8:	cb 01       	movw	r24, r22
    47ba:	f8 01       	movw	r30, r16
    47bc:	91 83       	std	Z+1, r25	; 0x01
    47be:	80 83       	st	Z, r24
    47c0:	1f c0       	rjmp	.+62     	; 0x4800 <Stepper_CounterClockWise_HalfStep+0x14a>
    47c2:	fe 01       	movw	r30, r28
    47c4:	eb 59       	subi	r30, 0x9B	; 155
    47c6:	ff 4f       	sbci	r31, 0xFF	; 255
    47c8:	88 ec       	ldi	r24, 0xC8	; 200
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	91 83       	std	Z+1, r25	; 0x01
    47ce:	80 83       	st	Z, r24
    47d0:	fe 01       	movw	r30, r28
    47d2:	eb 59       	subi	r30, 0x9B	; 155
    47d4:	ff 4f       	sbci	r31, 0xFF	; 255
    47d6:	80 81       	ld	r24, Z
    47d8:	91 81       	ldd	r25, Z+1	; 0x01
    47da:	01 97       	sbiw	r24, 0x01	; 1
    47dc:	f1 f7       	brne	.-4      	; 0x47da <Stepper_CounterClockWise_HalfStep+0x124>
    47de:	fe 01       	movw	r30, r28
    47e0:	eb 59       	subi	r30, 0x9B	; 155
    47e2:	ff 4f       	sbci	r31, 0xFF	; 255
    47e4:	91 83       	std	Z+1, r25	; 0x01
    47e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47e8:	de 01       	movw	r26, r28
    47ea:	a9 59       	subi	r26, 0x99	; 153
    47ec:	bf 4f       	sbci	r27, 0xFF	; 255
    47ee:	fe 01       	movw	r30, r28
    47f0:	e9 59       	subi	r30, 0x99	; 153
    47f2:	ff 4f       	sbci	r31, 0xFF	; 255
    47f4:	80 81       	ld	r24, Z
    47f6:	91 81       	ldd	r25, Z+1	; 0x01
    47f8:	01 97       	sbiw	r24, 0x01	; 1
    47fa:	11 96       	adiw	r26, 0x01	; 1
    47fc:	9c 93       	st	X, r25
    47fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4800:	fe 01       	movw	r30, r28
    4802:	e9 59       	subi	r30, 0x99	; 153
    4804:	ff 4f       	sbci	r31, 0xFF	; 255
    4806:	80 81       	ld	r24, Z
    4808:	91 81       	ldd	r25, Z+1	; 0x01
    480a:	00 97       	sbiw	r24, 0x00	; 0
    480c:	d1 f6       	brne	.-76     	; 0x47c2 <Stepper_CounterClockWise_HalfStep+0x10c>
    480e:	27 c0       	rjmp	.+78     	; 0x485e <Stepper_CounterClockWise_HalfStep+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4810:	8e 01       	movw	r16, r28
    4812:	09 59       	subi	r16, 0x99	; 153
    4814:	1f 4f       	sbci	r17, 0xFF	; 255
    4816:	fe 01       	movw	r30, r28
    4818:	e7 59       	subi	r30, 0x97	; 151
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	60 81       	ld	r22, Z
    481e:	71 81       	ldd	r23, Z+1	; 0x01
    4820:	82 81       	ldd	r24, Z+2	; 0x02
    4822:	93 81       	ldd	r25, Z+3	; 0x03
    4824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4828:	dc 01       	movw	r26, r24
    482a:	cb 01       	movw	r24, r22
    482c:	f8 01       	movw	r30, r16
    482e:	91 83       	std	Z+1, r25	; 0x01
    4830:	80 83       	st	Z, r24
    4832:	de 01       	movw	r26, r28
    4834:	ad 59       	subi	r26, 0x9D	; 157
    4836:	bf 4f       	sbci	r27, 0xFF	; 255
    4838:	fe 01       	movw	r30, r28
    483a:	e9 59       	subi	r30, 0x99	; 153
    483c:	ff 4f       	sbci	r31, 0xFF	; 255
    483e:	80 81       	ld	r24, Z
    4840:	91 81       	ldd	r25, Z+1	; 0x01
    4842:	8d 93       	st	X+, r24
    4844:	9c 93       	st	X, r25
    4846:	fe 01       	movw	r30, r28
    4848:	ed 59       	subi	r30, 0x9D	; 157
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	80 81       	ld	r24, Z
    484e:	91 81       	ldd	r25, Z+1	; 0x01
    4850:	01 97       	sbiw	r24, 0x01	; 1
    4852:	f1 f7       	brne	.-4      	; 0x4850 <Stepper_CounterClockWise_HalfStep+0x19a>
    4854:	fe 01       	movw	r30, r28
    4856:	ed 59       	subi	r30, 0x9D	; 157
    4858:	ff 4f       	sbci	r31, 0xFF	; 255
    485a:	91 83       	std	Z+1, r25	; 0x01
    485c:	80 83       	st	Z, r24
	_delay_ms(freq);


	//Step2
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    485e:	81 e0       	ldi	r24, 0x01	; 1
    4860:	60 e0       	ldi	r22, 0x00	; 0
    4862:	41 e0       	ldi	r20, 0x01	; 1
    4864:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	61 e0       	ldi	r22, 0x01	; 1
    486c:	40 e0       	ldi	r20, 0x00	; 0
    486e:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	62 e0       	ldi	r22, 0x02	; 2
    4876:	40 e0       	ldi	r20, 0x00	; 0
    4878:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    487c:	81 e0       	ldi	r24, 0x01	; 1
    487e:	63 e0       	ldi	r22, 0x03	; 3
    4880:	40 e0       	ldi	r20, 0x00	; 0
    4882:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    4886:	fe 01       	movw	r30, r28
    4888:	e1 5a       	subi	r30, 0xA1	; 161
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	aa e7       	ldi	r26, 0x7A	; 122
    4892:	b4 e4       	ldi	r27, 0x44	; 68
    4894:	80 83       	st	Z, r24
    4896:	91 83       	std	Z+1, r25	; 0x01
    4898:	a2 83       	std	Z+2, r26	; 0x02
    489a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    489c:	8e 01       	movw	r16, r28
    489e:	05 5a       	subi	r16, 0xA5	; 165
    48a0:	1f 4f       	sbci	r17, 0xFF	; 255
    48a2:	fe 01       	movw	r30, r28
    48a4:	e1 5a       	subi	r30, 0xA1	; 161
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	60 81       	ld	r22, Z
    48aa:	71 81       	ldd	r23, Z+1	; 0x01
    48ac:	82 81       	ldd	r24, Z+2	; 0x02
    48ae:	93 81       	ldd	r25, Z+3	; 0x03
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	4a ef       	ldi	r20, 0xFA	; 250
    48b6:	54 e4       	ldi	r21, 0x44	; 68
    48b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48bc:	dc 01       	movw	r26, r24
    48be:	cb 01       	movw	r24, r22
    48c0:	f8 01       	movw	r30, r16
    48c2:	80 83       	st	Z, r24
    48c4:	91 83       	std	Z+1, r25	; 0x01
    48c6:	a2 83       	std	Z+2, r26	; 0x02
    48c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48ca:	fe 01       	movw	r30, r28
    48cc:	e5 5a       	subi	r30, 0xA5	; 165
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	60 81       	ld	r22, Z
    48d2:	71 81       	ldd	r23, Z+1	; 0x01
    48d4:	82 81       	ldd	r24, Z+2	; 0x02
    48d6:	93 81       	ldd	r25, Z+3	; 0x03
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	40 e8       	ldi	r20, 0x80	; 128
    48de:	5f e3       	ldi	r21, 0x3F	; 63
    48e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48e4:	88 23       	and	r24, r24
    48e6:	44 f4       	brge	.+16     	; 0x48f8 <Stepper_CounterClockWise_HalfStep+0x242>
		__ticks = 1;
    48e8:	fe 01       	movw	r30, r28
    48ea:	e7 5a       	subi	r30, 0xA7	; 167
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	91 83       	std	Z+1, r25	; 0x01
    48f4:	80 83       	st	Z, r24
    48f6:	64 c0       	rjmp	.+200    	; 0x49c0 <Stepper_CounterClockWise_HalfStep+0x30a>
	else if (__tmp > 65535)
    48f8:	fe 01       	movw	r30, r28
    48fa:	e5 5a       	subi	r30, 0xA5	; 165
    48fc:	ff 4f       	sbci	r31, 0xFF	; 255
    48fe:	60 81       	ld	r22, Z
    4900:	71 81       	ldd	r23, Z+1	; 0x01
    4902:	82 81       	ldd	r24, Z+2	; 0x02
    4904:	93 81       	ldd	r25, Z+3	; 0x03
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	3f ef       	ldi	r19, 0xFF	; 255
    490a:	4f e7       	ldi	r20, 0x7F	; 127
    490c:	57 e4       	ldi	r21, 0x47	; 71
    490e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4912:	18 16       	cp	r1, r24
    4914:	0c f0       	brlt	.+2      	; 0x4918 <Stepper_CounterClockWise_HalfStep+0x262>
    4916:	43 c0       	rjmp	.+134    	; 0x499e <Stepper_CounterClockWise_HalfStep+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4918:	fe 01       	movw	r30, r28
    491a:	e1 5a       	subi	r30, 0xA1	; 161
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	60 81       	ld	r22, Z
    4920:	71 81       	ldd	r23, Z+1	; 0x01
    4922:	82 81       	ldd	r24, Z+2	; 0x02
    4924:	93 81       	ldd	r25, Z+3	; 0x03
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	40 e2       	ldi	r20, 0x20	; 32
    492c:	51 e4       	ldi	r21, 0x41	; 65
    492e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4932:	dc 01       	movw	r26, r24
    4934:	cb 01       	movw	r24, r22
    4936:	8e 01       	movw	r16, r28
    4938:	07 5a       	subi	r16, 0xA7	; 167
    493a:	1f 4f       	sbci	r17, 0xFF	; 255
    493c:	bc 01       	movw	r22, r24
    493e:	cd 01       	movw	r24, r26
    4940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	f8 01       	movw	r30, r16
    494a:	91 83       	std	Z+1, r25	; 0x01
    494c:	80 83       	st	Z, r24
    494e:	1f c0       	rjmp	.+62     	; 0x498e <Stepper_CounterClockWise_HalfStep+0x2d8>
    4950:	fe 01       	movw	r30, r28
    4952:	e9 5a       	subi	r30, 0xA9	; 169
    4954:	ff 4f       	sbci	r31, 0xFF	; 255
    4956:	88 ec       	ldi	r24, 0xC8	; 200
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	91 83       	std	Z+1, r25	; 0x01
    495c:	80 83       	st	Z, r24
    495e:	fe 01       	movw	r30, r28
    4960:	e9 5a       	subi	r30, 0xA9	; 169
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	80 81       	ld	r24, Z
    4966:	91 81       	ldd	r25, Z+1	; 0x01
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	f1 f7       	brne	.-4      	; 0x4968 <Stepper_CounterClockWise_HalfStep+0x2b2>
    496c:	fe 01       	movw	r30, r28
    496e:	e9 5a       	subi	r30, 0xA9	; 169
    4970:	ff 4f       	sbci	r31, 0xFF	; 255
    4972:	91 83       	std	Z+1, r25	; 0x01
    4974:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4976:	de 01       	movw	r26, r28
    4978:	a7 5a       	subi	r26, 0xA7	; 167
    497a:	bf 4f       	sbci	r27, 0xFF	; 255
    497c:	fe 01       	movw	r30, r28
    497e:	e7 5a       	subi	r30, 0xA7	; 167
    4980:	ff 4f       	sbci	r31, 0xFF	; 255
    4982:	80 81       	ld	r24, Z
    4984:	91 81       	ldd	r25, Z+1	; 0x01
    4986:	01 97       	sbiw	r24, 0x01	; 1
    4988:	11 96       	adiw	r26, 0x01	; 1
    498a:	9c 93       	st	X, r25
    498c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    498e:	fe 01       	movw	r30, r28
    4990:	e7 5a       	subi	r30, 0xA7	; 167
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	80 81       	ld	r24, Z
    4996:	91 81       	ldd	r25, Z+1	; 0x01
    4998:	00 97       	sbiw	r24, 0x00	; 0
    499a:	d1 f6       	brne	.-76     	; 0x4950 <Stepper_CounterClockWise_HalfStep+0x29a>
    499c:	27 c0       	rjmp	.+78     	; 0x49ec <Stepper_CounterClockWise_HalfStep+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    499e:	8e 01       	movw	r16, r28
    49a0:	07 5a       	subi	r16, 0xA7	; 167
    49a2:	1f 4f       	sbci	r17, 0xFF	; 255
    49a4:	fe 01       	movw	r30, r28
    49a6:	e5 5a       	subi	r30, 0xA5	; 165
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	60 81       	ld	r22, Z
    49ac:	71 81       	ldd	r23, Z+1	; 0x01
    49ae:	82 81       	ldd	r24, Z+2	; 0x02
    49b0:	93 81       	ldd	r25, Z+3	; 0x03
    49b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b6:	dc 01       	movw	r26, r24
    49b8:	cb 01       	movw	r24, r22
    49ba:	f8 01       	movw	r30, r16
    49bc:	91 83       	std	Z+1, r25	; 0x01
    49be:	80 83       	st	Z, r24
    49c0:	de 01       	movw	r26, r28
    49c2:	ab 5a       	subi	r26, 0xAB	; 171
    49c4:	bf 4f       	sbci	r27, 0xFF	; 255
    49c6:	fe 01       	movw	r30, r28
    49c8:	e7 5a       	subi	r30, 0xA7	; 167
    49ca:	ff 4f       	sbci	r31, 0xFF	; 255
    49cc:	80 81       	ld	r24, Z
    49ce:	91 81       	ldd	r25, Z+1	; 0x01
    49d0:	8d 93       	st	X+, r24
    49d2:	9c 93       	st	X, r25
    49d4:	fe 01       	movw	r30, r28
    49d6:	eb 5a       	subi	r30, 0xAB	; 171
    49d8:	ff 4f       	sbci	r31, 0xFF	; 255
    49da:	80 81       	ld	r24, Z
    49dc:	91 81       	ldd	r25, Z+1	; 0x01
    49de:	01 97       	sbiw	r24, 0x01	; 1
    49e0:	f1 f7       	brne	.-4      	; 0x49de <Stepper_CounterClockWise_HalfStep+0x328>
    49e2:	fe 01       	movw	r30, r28
    49e4:	eb 5a       	subi	r30, 0xAB	; 171
    49e6:	ff 4f       	sbci	r31, 0xFF	; 255
    49e8:	91 83       	std	Z+1, r25	; 0x01
    49ea:	80 83       	st	Z, r24
	_delay_ms(freq);

	//Step3
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    49ec:	81 e0       	ldi	r24, 0x01	; 1
    49ee:	60 e0       	ldi	r22, 0x00	; 0
    49f0:	41 e0       	ldi	r20, 0x01	; 1
    49f2:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    49f6:	81 e0       	ldi	r24, 0x01	; 1
    49f8:	61 e0       	ldi	r22, 0x01	; 1
    49fa:	41 e0       	ldi	r20, 0x01	; 1
    49fc:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	62 e0       	ldi	r22, 0x02	; 2
    4a04:	40 e0       	ldi	r20, 0x00	; 0
    4a06:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    4a0a:	81 e0       	ldi	r24, 0x01	; 1
    4a0c:	63 e0       	ldi	r22, 0x03	; 3
    4a0e:	40 e0       	ldi	r20, 0x00	; 0
    4a10:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    4a14:	fe 01       	movw	r30, r28
    4a16:	ef 5a       	subi	r30, 0xAF	; 175
    4a18:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1a:	80 e0       	ldi	r24, 0x00	; 0
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	aa e7       	ldi	r26, 0x7A	; 122
    4a20:	b4 e4       	ldi	r27, 0x44	; 68
    4a22:	80 83       	st	Z, r24
    4a24:	91 83       	std	Z+1, r25	; 0x01
    4a26:	a2 83       	std	Z+2, r26	; 0x02
    4a28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a2a:	8e 01       	movw	r16, r28
    4a2c:	03 5b       	subi	r16, 0xB3	; 179
    4a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a30:	fe 01       	movw	r30, r28
    4a32:	ef 5a       	subi	r30, 0xAF	; 175
    4a34:	ff 4f       	sbci	r31, 0xFF	; 255
    4a36:	60 81       	ld	r22, Z
    4a38:	71 81       	ldd	r23, Z+1	; 0x01
    4a3a:	82 81       	ldd	r24, Z+2	; 0x02
    4a3c:	93 81       	ldd	r25, Z+3	; 0x03
    4a3e:	20 e0       	ldi	r18, 0x00	; 0
    4a40:	30 e0       	ldi	r19, 0x00	; 0
    4a42:	4a ef       	ldi	r20, 0xFA	; 250
    4a44:	54 e4       	ldi	r21, 0x44	; 68
    4a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	f8 01       	movw	r30, r16
    4a50:	80 83       	st	Z, r24
    4a52:	91 83       	std	Z+1, r25	; 0x01
    4a54:	a2 83       	std	Z+2, r26	; 0x02
    4a56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a58:	fe 01       	movw	r30, r28
    4a5a:	e3 5b       	subi	r30, 0xB3	; 179
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	60 81       	ld	r22, Z
    4a60:	71 81       	ldd	r23, Z+1	; 0x01
    4a62:	82 81       	ldd	r24, Z+2	; 0x02
    4a64:	93 81       	ldd	r25, Z+3	; 0x03
    4a66:	20 e0       	ldi	r18, 0x00	; 0
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	40 e8       	ldi	r20, 0x80	; 128
    4a6c:	5f e3       	ldi	r21, 0x3F	; 63
    4a6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a72:	88 23       	and	r24, r24
    4a74:	44 f4       	brge	.+16     	; 0x4a86 <Stepper_CounterClockWise_HalfStep+0x3d0>
		__ticks = 1;
    4a76:	fe 01       	movw	r30, r28
    4a78:	e5 5b       	subi	r30, 0xB5	; 181
    4a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7c:	81 e0       	ldi	r24, 0x01	; 1
    4a7e:	90 e0       	ldi	r25, 0x00	; 0
    4a80:	91 83       	std	Z+1, r25	; 0x01
    4a82:	80 83       	st	Z, r24
    4a84:	64 c0       	rjmp	.+200    	; 0x4b4e <Stepper_CounterClockWise_HalfStep+0x498>
	else if (__tmp > 65535)
    4a86:	fe 01       	movw	r30, r28
    4a88:	e3 5b       	subi	r30, 0xB3	; 179
    4a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8c:	60 81       	ld	r22, Z
    4a8e:	71 81       	ldd	r23, Z+1	; 0x01
    4a90:	82 81       	ldd	r24, Z+2	; 0x02
    4a92:	93 81       	ldd	r25, Z+3	; 0x03
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	3f ef       	ldi	r19, 0xFF	; 255
    4a98:	4f e7       	ldi	r20, 0x7F	; 127
    4a9a:	57 e4       	ldi	r21, 0x47	; 71
    4a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aa0:	18 16       	cp	r1, r24
    4aa2:	0c f0       	brlt	.+2      	; 0x4aa6 <Stepper_CounterClockWise_HalfStep+0x3f0>
    4aa4:	43 c0       	rjmp	.+134    	; 0x4b2c <Stepper_CounterClockWise_HalfStep+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	ef 5a       	subi	r30, 0xAF	; 175
    4aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4aac:	60 81       	ld	r22, Z
    4aae:	71 81       	ldd	r23, Z+1	; 0x01
    4ab0:	82 81       	ldd	r24, Z+2	; 0x02
    4ab2:	93 81       	ldd	r25, Z+3	; 0x03
    4ab4:	20 e0       	ldi	r18, 0x00	; 0
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	40 e2       	ldi	r20, 0x20	; 32
    4aba:	51 e4       	ldi	r21, 0x41	; 65
    4abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ac0:	dc 01       	movw	r26, r24
    4ac2:	cb 01       	movw	r24, r22
    4ac4:	8e 01       	movw	r16, r28
    4ac6:	05 5b       	subi	r16, 0xB5	; 181
    4ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aca:	bc 01       	movw	r22, r24
    4acc:	cd 01       	movw	r24, r26
    4ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad2:	dc 01       	movw	r26, r24
    4ad4:	cb 01       	movw	r24, r22
    4ad6:	f8 01       	movw	r30, r16
    4ad8:	91 83       	std	Z+1, r25	; 0x01
    4ada:	80 83       	st	Z, r24
    4adc:	1f c0       	rjmp	.+62     	; 0x4b1c <Stepper_CounterClockWise_HalfStep+0x466>
    4ade:	fe 01       	movw	r30, r28
    4ae0:	e7 5b       	subi	r30, 0xB7	; 183
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	88 ec       	ldi	r24, 0xC8	; 200
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	91 83       	std	Z+1, r25	; 0x01
    4aea:	80 83       	st	Z, r24
    4aec:	fe 01       	movw	r30, r28
    4aee:	e7 5b       	subi	r30, 0xB7	; 183
    4af0:	ff 4f       	sbci	r31, 0xFF	; 255
    4af2:	80 81       	ld	r24, Z
    4af4:	91 81       	ldd	r25, Z+1	; 0x01
    4af6:	01 97       	sbiw	r24, 0x01	; 1
    4af8:	f1 f7       	brne	.-4      	; 0x4af6 <Stepper_CounterClockWise_HalfStep+0x440>
    4afa:	fe 01       	movw	r30, r28
    4afc:	e7 5b       	subi	r30, 0xB7	; 183
    4afe:	ff 4f       	sbci	r31, 0xFF	; 255
    4b00:	91 83       	std	Z+1, r25	; 0x01
    4b02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b04:	de 01       	movw	r26, r28
    4b06:	a5 5b       	subi	r26, 0xB5	; 181
    4b08:	bf 4f       	sbci	r27, 0xFF	; 255
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	e5 5b       	subi	r30, 0xB5	; 181
    4b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b10:	80 81       	ld	r24, Z
    4b12:	91 81       	ldd	r25, Z+1	; 0x01
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	11 96       	adiw	r26, 0x01	; 1
    4b18:	9c 93       	st	X, r25
    4b1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	e5 5b       	subi	r30, 0xB5	; 181
    4b20:	ff 4f       	sbci	r31, 0xFF	; 255
    4b22:	80 81       	ld	r24, Z
    4b24:	91 81       	ldd	r25, Z+1	; 0x01
    4b26:	00 97       	sbiw	r24, 0x00	; 0
    4b28:	d1 f6       	brne	.-76     	; 0x4ade <Stepper_CounterClockWise_HalfStep+0x428>
    4b2a:	27 c0       	rjmp	.+78     	; 0x4b7a <Stepper_CounterClockWise_HalfStep+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b2c:	8e 01       	movw	r16, r28
    4b2e:	05 5b       	subi	r16, 0xB5	; 181
    4b30:	1f 4f       	sbci	r17, 0xFF	; 255
    4b32:	fe 01       	movw	r30, r28
    4b34:	e3 5b       	subi	r30, 0xB3	; 179
    4b36:	ff 4f       	sbci	r31, 0xFF	; 255
    4b38:	60 81       	ld	r22, Z
    4b3a:	71 81       	ldd	r23, Z+1	; 0x01
    4b3c:	82 81       	ldd	r24, Z+2	; 0x02
    4b3e:	93 81       	ldd	r25, Z+3	; 0x03
    4b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b44:	dc 01       	movw	r26, r24
    4b46:	cb 01       	movw	r24, r22
    4b48:	f8 01       	movw	r30, r16
    4b4a:	91 83       	std	Z+1, r25	; 0x01
    4b4c:	80 83       	st	Z, r24
    4b4e:	de 01       	movw	r26, r28
    4b50:	a9 5b       	subi	r26, 0xB9	; 185
    4b52:	bf 4f       	sbci	r27, 0xFF	; 255
    4b54:	fe 01       	movw	r30, r28
    4b56:	e5 5b       	subi	r30, 0xB5	; 181
    4b58:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5a:	80 81       	ld	r24, Z
    4b5c:	91 81       	ldd	r25, Z+1	; 0x01
    4b5e:	8d 93       	st	X+, r24
    4b60:	9c 93       	st	X, r25
    4b62:	fe 01       	movw	r30, r28
    4b64:	e9 5b       	subi	r30, 0xB9	; 185
    4b66:	ff 4f       	sbci	r31, 0xFF	; 255
    4b68:	80 81       	ld	r24, Z
    4b6a:	91 81       	ldd	r25, Z+1	; 0x01
    4b6c:	01 97       	sbiw	r24, 0x01	; 1
    4b6e:	f1 f7       	brne	.-4      	; 0x4b6c <Stepper_CounterClockWise_HalfStep+0x4b6>
    4b70:	fe 01       	movw	r30, r28
    4b72:	e9 5b       	subi	r30, 0xB9	; 185
    4b74:	ff 4f       	sbci	r31, 0xFF	; 255
    4b76:	91 83       	std	Z+1, r25	; 0x01
    4b78:	80 83       	st	Z, r24
	_delay_ms(freq);


	//Step4
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    4b7a:	81 e0       	ldi	r24, 0x01	; 1
    4b7c:	60 e0       	ldi	r22, 0x00	; 0
    4b7e:	40 e0       	ldi	r20, 0x00	; 0
    4b80:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	61 e0       	ldi	r22, 0x01	; 1
    4b88:	41 e0       	ldi	r20, 0x01	; 1
    4b8a:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    4b8e:	81 e0       	ldi	r24, 0x01	; 1
    4b90:	62 e0       	ldi	r22, 0x02	; 2
    4b92:	40 e0       	ldi	r20, 0x00	; 0
    4b94:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    4b98:	81 e0       	ldi	r24, 0x01	; 1
    4b9a:	63 e0       	ldi	r22, 0x03	; 3
    4b9c:	40 e0       	ldi	r20, 0x00	; 0
    4b9e:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	ed 5b       	subi	r30, 0xBD	; 189
    4ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba8:	80 e0       	ldi	r24, 0x00	; 0
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	aa e7       	ldi	r26, 0x7A	; 122
    4bae:	b4 e4       	ldi	r27, 0x44	; 68
    4bb0:	80 83       	st	Z, r24
    4bb2:	91 83       	std	Z+1, r25	; 0x01
    4bb4:	a2 83       	std	Z+2, r26	; 0x02
    4bb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bb8:	8e 01       	movw	r16, r28
    4bba:	01 5c       	subi	r16, 0xC1	; 193
    4bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	ed 5b       	subi	r30, 0xBD	; 189
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	60 81       	ld	r22, Z
    4bc6:	71 81       	ldd	r23, Z+1	; 0x01
    4bc8:	82 81       	ldd	r24, Z+2	; 0x02
    4bca:	93 81       	ldd	r25, Z+3	; 0x03
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	4a ef       	ldi	r20, 0xFA	; 250
    4bd2:	54 e4       	ldi	r21, 0x44	; 68
    4bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bd8:	dc 01       	movw	r26, r24
    4bda:	cb 01       	movw	r24, r22
    4bdc:	f8 01       	movw	r30, r16
    4bde:	80 83       	st	Z, r24
    4be0:	91 83       	std	Z+1, r25	; 0x01
    4be2:	a2 83       	std	Z+2, r26	; 0x02
    4be4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4be6:	fe 01       	movw	r30, r28
    4be8:	ff 96       	adiw	r30, 0x3f	; 63
    4bea:	60 81       	ld	r22, Z
    4bec:	71 81       	ldd	r23, Z+1	; 0x01
    4bee:	82 81       	ldd	r24, Z+2	; 0x02
    4bf0:	93 81       	ldd	r25, Z+3	; 0x03
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	40 e8       	ldi	r20, 0x80	; 128
    4bf8:	5f e3       	ldi	r21, 0x3F	; 63
    4bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bfe:	88 23       	and	r24, r24
    4c00:	2c f4       	brge	.+10     	; 0x4c0c <Stepper_CounterClockWise_HalfStep+0x556>
		__ticks = 1;
    4c02:	81 e0       	ldi	r24, 0x01	; 1
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	9e af       	std	Y+62, r25	; 0x3e
    4c08:	8d af       	std	Y+61, r24	; 0x3d
    4c0a:	46 c0       	rjmp	.+140    	; 0x4c98 <Stepper_CounterClockWise_HalfStep+0x5e2>
	else if (__tmp > 65535)
    4c0c:	fe 01       	movw	r30, r28
    4c0e:	ff 96       	adiw	r30, 0x3f	; 63
    4c10:	60 81       	ld	r22, Z
    4c12:	71 81       	ldd	r23, Z+1	; 0x01
    4c14:	82 81       	ldd	r24, Z+2	; 0x02
    4c16:	93 81       	ldd	r25, Z+3	; 0x03
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	3f ef       	ldi	r19, 0xFF	; 255
    4c1c:	4f e7       	ldi	r20, 0x7F	; 127
    4c1e:	57 e4       	ldi	r21, 0x47	; 71
    4c20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c24:	18 16       	cp	r1, r24
    4c26:	64 f5       	brge	.+88     	; 0x4c80 <Stepper_CounterClockWise_HalfStep+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c28:	fe 01       	movw	r30, r28
    4c2a:	ed 5b       	subi	r30, 0xBD	; 189
    4c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2e:	60 81       	ld	r22, Z
    4c30:	71 81       	ldd	r23, Z+1	; 0x01
    4c32:	82 81       	ldd	r24, Z+2	; 0x02
    4c34:	93 81       	ldd	r25, Z+3	; 0x03
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	40 e2       	ldi	r20, 0x20	; 32
    4c3c:	51 e4       	ldi	r21, 0x41	; 65
    4c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c42:	dc 01       	movw	r26, r24
    4c44:	cb 01       	movw	r24, r22
    4c46:	bc 01       	movw	r22, r24
    4c48:	cd 01       	movw	r24, r26
    4c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c4e:	dc 01       	movw	r26, r24
    4c50:	cb 01       	movw	r24, r22
    4c52:	9e af       	std	Y+62, r25	; 0x3e
    4c54:	8d af       	std	Y+61, r24	; 0x3d
    4c56:	0f c0       	rjmp	.+30     	; 0x4c76 <Stepper_CounterClockWise_HalfStep+0x5c0>
    4c58:	88 ec       	ldi	r24, 0xC8	; 200
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	9c af       	std	Y+60, r25	; 0x3c
    4c5e:	8b af       	std	Y+59, r24	; 0x3b
    4c60:	8b ad       	ldd	r24, Y+59	; 0x3b
    4c62:	9c ad       	ldd	r25, Y+60	; 0x3c
    4c64:	01 97       	sbiw	r24, 0x01	; 1
    4c66:	f1 f7       	brne	.-4      	; 0x4c64 <Stepper_CounterClockWise_HalfStep+0x5ae>
    4c68:	9c af       	std	Y+60, r25	; 0x3c
    4c6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c70:	01 97       	sbiw	r24, 0x01	; 1
    4c72:	9e af       	std	Y+62, r25	; 0x3e
    4c74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c76:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c78:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c7a:	00 97       	sbiw	r24, 0x00	; 0
    4c7c:	69 f7       	brne	.-38     	; 0x4c58 <Stepper_CounterClockWise_HalfStep+0x5a2>
    4c7e:	16 c0       	rjmp	.+44     	; 0x4cac <Stepper_CounterClockWise_HalfStep+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c80:	fe 01       	movw	r30, r28
    4c82:	ff 96       	adiw	r30, 0x3f	; 63
    4c84:	60 81       	ld	r22, Z
    4c86:	71 81       	ldd	r23, Z+1	; 0x01
    4c88:	82 81       	ldd	r24, Z+2	; 0x02
    4c8a:	93 81       	ldd	r25, Z+3	; 0x03
    4c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c90:	dc 01       	movw	r26, r24
    4c92:	cb 01       	movw	r24, r22
    4c94:	9e af       	std	Y+62, r25	; 0x3e
    4c96:	8d af       	std	Y+61, r24	; 0x3d
    4c98:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c9c:	9a af       	std	Y+58, r25	; 0x3a
    4c9e:	89 af       	std	Y+57, r24	; 0x39
    4ca0:	89 ad       	ldd	r24, Y+57	; 0x39
    4ca2:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	f1 f7       	brne	.-4      	; 0x4ca4 <Stepper_CounterClockWise_HalfStep+0x5ee>
    4ca8:	9a af       	std	Y+58, r25	; 0x3a
    4caa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(freq);

	//Step5
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	60 e0       	ldi	r22, 0x00	; 0
    4cb0:	40 e0       	ldi	r20, 0x00	; 0
    4cb2:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    4cb6:	81 e0       	ldi	r24, 0x01	; 1
    4cb8:	61 e0       	ldi	r22, 0x01	; 1
    4cba:	41 e0       	ldi	r20, 0x01	; 1
    4cbc:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	62 e0       	ldi	r22, 0x02	; 2
    4cc4:	41 e0       	ldi	r20, 0x01	; 1
    4cc6:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    4cca:	81 e0       	ldi	r24, 0x01	; 1
    4ccc:	63 e0       	ldi	r22, 0x03	; 3
    4cce:	40 e0       	ldi	r20, 0x00	; 0
    4cd0:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    4cd4:	80 e0       	ldi	r24, 0x00	; 0
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	aa e7       	ldi	r26, 0x7A	; 122
    4cda:	b4 e4       	ldi	r27, 0x44	; 68
    4cdc:	8d ab       	std	Y+53, r24	; 0x35
    4cde:	9e ab       	std	Y+54, r25	; 0x36
    4ce0:	af ab       	std	Y+55, r26	; 0x37
    4ce2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ce4:	6d a9       	ldd	r22, Y+53	; 0x35
    4ce6:	7e a9       	ldd	r23, Y+54	; 0x36
    4ce8:	8f a9       	ldd	r24, Y+55	; 0x37
    4cea:	98 ad       	ldd	r25, Y+56	; 0x38
    4cec:	20 e0       	ldi	r18, 0x00	; 0
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	4a ef       	ldi	r20, 0xFA	; 250
    4cf2:	54 e4       	ldi	r21, 0x44	; 68
    4cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf8:	dc 01       	movw	r26, r24
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	89 ab       	std	Y+49, r24	; 0x31
    4cfe:	9a ab       	std	Y+50, r25	; 0x32
    4d00:	ab ab       	std	Y+51, r26	; 0x33
    4d02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4d04:	69 a9       	ldd	r22, Y+49	; 0x31
    4d06:	7a a9       	ldd	r23, Y+50	; 0x32
    4d08:	8b a9       	ldd	r24, Y+51	; 0x33
    4d0a:	9c a9       	ldd	r25, Y+52	; 0x34
    4d0c:	20 e0       	ldi	r18, 0x00	; 0
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	40 e8       	ldi	r20, 0x80	; 128
    4d12:	5f e3       	ldi	r21, 0x3F	; 63
    4d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d18:	88 23       	and	r24, r24
    4d1a:	2c f4       	brge	.+10     	; 0x4d26 <Stepper_CounterClockWise_HalfStep+0x670>
		__ticks = 1;
    4d1c:	81 e0       	ldi	r24, 0x01	; 1
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	98 ab       	std	Y+48, r25	; 0x30
    4d22:	8f a7       	std	Y+47, r24	; 0x2f
    4d24:	3f c0       	rjmp	.+126    	; 0x4da4 <Stepper_CounterClockWise_HalfStep+0x6ee>
	else if (__tmp > 65535)
    4d26:	69 a9       	ldd	r22, Y+49	; 0x31
    4d28:	7a a9       	ldd	r23, Y+50	; 0x32
    4d2a:	8b a9       	ldd	r24, Y+51	; 0x33
    4d2c:	9c a9       	ldd	r25, Y+52	; 0x34
    4d2e:	20 e0       	ldi	r18, 0x00	; 0
    4d30:	3f ef       	ldi	r19, 0xFF	; 255
    4d32:	4f e7       	ldi	r20, 0x7F	; 127
    4d34:	57 e4       	ldi	r21, 0x47	; 71
    4d36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d3a:	18 16       	cp	r1, r24
    4d3c:	4c f5       	brge	.+82     	; 0x4d90 <Stepper_CounterClockWise_HalfStep+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d3e:	6d a9       	ldd	r22, Y+53	; 0x35
    4d40:	7e a9       	ldd	r23, Y+54	; 0x36
    4d42:	8f a9       	ldd	r24, Y+55	; 0x37
    4d44:	98 ad       	ldd	r25, Y+56	; 0x38
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	40 e2       	ldi	r20, 0x20	; 32
    4d4c:	51 e4       	ldi	r21, 0x41	; 65
    4d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	bc 01       	movw	r22, r24
    4d58:	cd 01       	movw	r24, r26
    4d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	98 ab       	std	Y+48, r25	; 0x30
    4d64:	8f a7       	std	Y+47, r24	; 0x2f
    4d66:	0f c0       	rjmp	.+30     	; 0x4d86 <Stepper_CounterClockWise_HalfStep+0x6d0>
    4d68:	88 ec       	ldi	r24, 0xC8	; 200
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	9e a7       	std	Y+46, r25	; 0x2e
    4d6e:	8d a7       	std	Y+45, r24	; 0x2d
    4d70:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d72:	9e a5       	ldd	r25, Y+46	; 0x2e
    4d74:	01 97       	sbiw	r24, 0x01	; 1
    4d76:	f1 f7       	brne	.-4      	; 0x4d74 <Stepper_CounterClockWise_HalfStep+0x6be>
    4d78:	9e a7       	std	Y+46, r25	; 0x2e
    4d7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d7e:	98 a9       	ldd	r25, Y+48	; 0x30
    4d80:	01 97       	sbiw	r24, 0x01	; 1
    4d82:	98 ab       	std	Y+48, r25	; 0x30
    4d84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d86:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d88:	98 a9       	ldd	r25, Y+48	; 0x30
    4d8a:	00 97       	sbiw	r24, 0x00	; 0
    4d8c:	69 f7       	brne	.-38     	; 0x4d68 <Stepper_CounterClockWise_HalfStep+0x6b2>
    4d8e:	14 c0       	rjmp	.+40     	; 0x4db8 <Stepper_CounterClockWise_HalfStep+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d90:	69 a9       	ldd	r22, Y+49	; 0x31
    4d92:	7a a9       	ldd	r23, Y+50	; 0x32
    4d94:	8b a9       	ldd	r24, Y+51	; 0x33
    4d96:	9c a9       	ldd	r25, Y+52	; 0x34
    4d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d9c:	dc 01       	movw	r26, r24
    4d9e:	cb 01       	movw	r24, r22
    4da0:	98 ab       	std	Y+48, r25	; 0x30
    4da2:	8f a7       	std	Y+47, r24	; 0x2f
    4da4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4da6:	98 a9       	ldd	r25, Y+48	; 0x30
    4da8:	9c a7       	std	Y+44, r25	; 0x2c
    4daa:	8b a7       	std	Y+43, r24	; 0x2b
    4dac:	8b a5       	ldd	r24, Y+43	; 0x2b
    4dae:	9c a5       	ldd	r25, Y+44	; 0x2c
    4db0:	01 97       	sbiw	r24, 0x01	; 1
    4db2:	f1 f7       	brne	.-4      	; 0x4db0 <Stepper_CounterClockWise_HalfStep+0x6fa>
    4db4:	9c a7       	std	Y+44, r25	; 0x2c
    4db6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(freq);


	//Step6
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    4db8:	81 e0       	ldi	r24, 0x01	; 1
    4dba:	60 e0       	ldi	r22, 0x00	; 0
    4dbc:	40 e0       	ldi	r20, 0x00	; 0
    4dbe:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    4dc2:	81 e0       	ldi	r24, 0x01	; 1
    4dc4:	61 e0       	ldi	r22, 0x01	; 1
    4dc6:	40 e0       	ldi	r20, 0x00	; 0
    4dc8:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    4dcc:	81 e0       	ldi	r24, 0x01	; 1
    4dce:	62 e0       	ldi	r22, 0x02	; 2
    4dd0:	41 e0       	ldi	r20, 0x01	; 1
    4dd2:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	63 e0       	ldi	r22, 0x03	; 3
    4dda:	40 e0       	ldi	r20, 0x00	; 0
    4ddc:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	aa e7       	ldi	r26, 0x7A	; 122
    4de6:	b4 e4       	ldi	r27, 0x44	; 68
    4de8:	8f a3       	std	Y+39, r24	; 0x27
    4dea:	98 a7       	std	Y+40, r25	; 0x28
    4dec:	a9 a7       	std	Y+41, r26	; 0x29
    4dee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4df0:	6f a1       	ldd	r22, Y+39	; 0x27
    4df2:	78 a5       	ldd	r23, Y+40	; 0x28
    4df4:	89 a5       	ldd	r24, Y+41	; 0x29
    4df6:	9a a5       	ldd	r25, Y+42	; 0x2a
    4df8:	20 e0       	ldi	r18, 0x00	; 0
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	4a ef       	ldi	r20, 0xFA	; 250
    4dfe:	54 e4       	ldi	r21, 0x44	; 68
    4e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e04:	dc 01       	movw	r26, r24
    4e06:	cb 01       	movw	r24, r22
    4e08:	8b a3       	std	Y+35, r24	; 0x23
    4e0a:	9c a3       	std	Y+36, r25	; 0x24
    4e0c:	ad a3       	std	Y+37, r26	; 0x25
    4e0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e10:	6b a1       	ldd	r22, Y+35	; 0x23
    4e12:	7c a1       	ldd	r23, Y+36	; 0x24
    4e14:	8d a1       	ldd	r24, Y+37	; 0x25
    4e16:	9e a1       	ldd	r25, Y+38	; 0x26
    4e18:	20 e0       	ldi	r18, 0x00	; 0
    4e1a:	30 e0       	ldi	r19, 0x00	; 0
    4e1c:	40 e8       	ldi	r20, 0x80	; 128
    4e1e:	5f e3       	ldi	r21, 0x3F	; 63
    4e20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e24:	88 23       	and	r24, r24
    4e26:	2c f4       	brge	.+10     	; 0x4e32 <Stepper_CounterClockWise_HalfStep+0x77c>
		__ticks = 1;
    4e28:	81 e0       	ldi	r24, 0x01	; 1
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	9a a3       	std	Y+34, r25	; 0x22
    4e2e:	89 a3       	std	Y+33, r24	; 0x21
    4e30:	3f c0       	rjmp	.+126    	; 0x4eb0 <Stepper_CounterClockWise_HalfStep+0x7fa>
	else if (__tmp > 65535)
    4e32:	6b a1       	ldd	r22, Y+35	; 0x23
    4e34:	7c a1       	ldd	r23, Y+36	; 0x24
    4e36:	8d a1       	ldd	r24, Y+37	; 0x25
    4e38:	9e a1       	ldd	r25, Y+38	; 0x26
    4e3a:	20 e0       	ldi	r18, 0x00	; 0
    4e3c:	3f ef       	ldi	r19, 0xFF	; 255
    4e3e:	4f e7       	ldi	r20, 0x7F	; 127
    4e40:	57 e4       	ldi	r21, 0x47	; 71
    4e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e46:	18 16       	cp	r1, r24
    4e48:	4c f5       	brge	.+82     	; 0x4e9c <Stepper_CounterClockWise_HalfStep+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e4a:	6f a1       	ldd	r22, Y+39	; 0x27
    4e4c:	78 a5       	ldd	r23, Y+40	; 0x28
    4e4e:	89 a5       	ldd	r24, Y+41	; 0x29
    4e50:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	40 e2       	ldi	r20, 0x20	; 32
    4e58:	51 e4       	ldi	r21, 0x41	; 65
    4e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e5e:	dc 01       	movw	r26, r24
    4e60:	cb 01       	movw	r24, r22
    4e62:	bc 01       	movw	r22, r24
    4e64:	cd 01       	movw	r24, r26
    4e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e6a:	dc 01       	movw	r26, r24
    4e6c:	cb 01       	movw	r24, r22
    4e6e:	9a a3       	std	Y+34, r25	; 0x22
    4e70:	89 a3       	std	Y+33, r24	; 0x21
    4e72:	0f c0       	rjmp	.+30     	; 0x4e92 <Stepper_CounterClockWise_HalfStep+0x7dc>
    4e74:	88 ec       	ldi	r24, 0xC8	; 200
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	98 a3       	std	Y+32, r25	; 0x20
    4e7a:	8f 8f       	std	Y+31, r24	; 0x1f
    4e7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e7e:	98 a1       	ldd	r25, Y+32	; 0x20
    4e80:	01 97       	sbiw	r24, 0x01	; 1
    4e82:	f1 f7       	brne	.-4      	; 0x4e80 <Stepper_CounterClockWise_HalfStep+0x7ca>
    4e84:	98 a3       	std	Y+32, r25	; 0x20
    4e86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e88:	89 a1       	ldd	r24, Y+33	; 0x21
    4e8a:	9a a1       	ldd	r25, Y+34	; 0x22
    4e8c:	01 97       	sbiw	r24, 0x01	; 1
    4e8e:	9a a3       	std	Y+34, r25	; 0x22
    4e90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e92:	89 a1       	ldd	r24, Y+33	; 0x21
    4e94:	9a a1       	ldd	r25, Y+34	; 0x22
    4e96:	00 97       	sbiw	r24, 0x00	; 0
    4e98:	69 f7       	brne	.-38     	; 0x4e74 <Stepper_CounterClockWise_HalfStep+0x7be>
    4e9a:	14 c0       	rjmp	.+40     	; 0x4ec4 <Stepper_CounterClockWise_HalfStep+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e9c:	6b a1       	ldd	r22, Y+35	; 0x23
    4e9e:	7c a1       	ldd	r23, Y+36	; 0x24
    4ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    4ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    4ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea8:	dc 01       	movw	r26, r24
    4eaa:	cb 01       	movw	r24, r22
    4eac:	9a a3       	std	Y+34, r25	; 0x22
    4eae:	89 a3       	std	Y+33, r24	; 0x21
    4eb0:	89 a1       	ldd	r24, Y+33	; 0x21
    4eb2:	9a a1       	ldd	r25, Y+34	; 0x22
    4eb4:	9e 8f       	std	Y+30, r25	; 0x1e
    4eb6:	8d 8f       	std	Y+29, r24	; 0x1d
    4eb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4eba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ebc:	01 97       	sbiw	r24, 0x01	; 1
    4ebe:	f1 f7       	brne	.-4      	; 0x4ebc <Stepper_CounterClockWise_HalfStep+0x806>
    4ec0:	9e 8f       	std	Y+30, r25	; 0x1e
    4ec2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(freq);


	//Step7
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    4ec4:	81 e0       	ldi	r24, 0x01	; 1
    4ec6:	60 e0       	ldi	r22, 0x00	; 0
    4ec8:	40 e0       	ldi	r20, 0x00	; 0
    4eca:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    4ece:	81 e0       	ldi	r24, 0x01	; 1
    4ed0:	61 e0       	ldi	r22, 0x01	; 1
    4ed2:	40 e0       	ldi	r20, 0x00	; 0
    4ed4:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	62 e0       	ldi	r22, 0x02	; 2
    4edc:	41 e0       	ldi	r20, 0x01	; 1
    4ede:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	63 e0       	ldi	r22, 0x03	; 3
    4ee6:	41 e0       	ldi	r20, 0x01	; 1
    4ee8:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	aa e7       	ldi	r26, 0x7A	; 122
    4ef2:	b4 e4       	ldi	r27, 0x44	; 68
    4ef4:	89 8f       	std	Y+25, r24	; 0x19
    4ef6:	9a 8f       	std	Y+26, r25	; 0x1a
    4ef8:	ab 8f       	std	Y+27, r26	; 0x1b
    4efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4efc:	69 8d       	ldd	r22, Y+25	; 0x19
    4efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f04:	20 e0       	ldi	r18, 0x00	; 0
    4f06:	30 e0       	ldi	r19, 0x00	; 0
    4f08:	4a ef       	ldi	r20, 0xFA	; 250
    4f0a:	54 e4       	ldi	r21, 0x44	; 68
    4f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f10:	dc 01       	movw	r26, r24
    4f12:	cb 01       	movw	r24, r22
    4f14:	8d 8b       	std	Y+21, r24	; 0x15
    4f16:	9e 8b       	std	Y+22, r25	; 0x16
    4f18:	af 8b       	std	Y+23, r26	; 0x17
    4f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    4f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    4f20:	8f 89       	ldd	r24, Y+23	; 0x17
    4f22:	98 8d       	ldd	r25, Y+24	; 0x18
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	40 e8       	ldi	r20, 0x80	; 128
    4f2a:	5f e3       	ldi	r21, 0x3F	; 63
    4f2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f30:	88 23       	and	r24, r24
    4f32:	2c f4       	brge	.+10     	; 0x4f3e <Stepper_CounterClockWise_HalfStep+0x888>
		__ticks = 1;
    4f34:	81 e0       	ldi	r24, 0x01	; 1
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	9c 8b       	std	Y+20, r25	; 0x14
    4f3a:	8b 8b       	std	Y+19, r24	; 0x13
    4f3c:	3f c0       	rjmp	.+126    	; 0x4fbc <Stepper_CounterClockWise_HalfStep+0x906>
	else if (__tmp > 65535)
    4f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    4f40:	7e 89       	ldd	r23, Y+22	; 0x16
    4f42:	8f 89       	ldd	r24, Y+23	; 0x17
    4f44:	98 8d       	ldd	r25, Y+24	; 0x18
    4f46:	20 e0       	ldi	r18, 0x00	; 0
    4f48:	3f ef       	ldi	r19, 0xFF	; 255
    4f4a:	4f e7       	ldi	r20, 0x7F	; 127
    4f4c:	57 e4       	ldi	r21, 0x47	; 71
    4f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f52:	18 16       	cp	r1, r24
    4f54:	4c f5       	brge	.+82     	; 0x4fa8 <Stepper_CounterClockWise_HalfStep+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f56:	69 8d       	ldd	r22, Y+25	; 0x19
    4f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	40 e2       	ldi	r20, 0x20	; 32
    4f64:	51 e4       	ldi	r21, 0x41	; 65
    4f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f6a:	dc 01       	movw	r26, r24
    4f6c:	cb 01       	movw	r24, r22
    4f6e:	bc 01       	movw	r22, r24
    4f70:	cd 01       	movw	r24, r26
    4f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f76:	dc 01       	movw	r26, r24
    4f78:	cb 01       	movw	r24, r22
    4f7a:	9c 8b       	std	Y+20, r25	; 0x14
    4f7c:	8b 8b       	std	Y+19, r24	; 0x13
    4f7e:	0f c0       	rjmp	.+30     	; 0x4f9e <Stepper_CounterClockWise_HalfStep+0x8e8>
    4f80:	88 ec       	ldi	r24, 0xC8	; 200
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	9a 8b       	std	Y+18, r25	; 0x12
    4f86:	89 8b       	std	Y+17, r24	; 0x11
    4f88:	89 89       	ldd	r24, Y+17	; 0x11
    4f8a:	9a 89       	ldd	r25, Y+18	; 0x12
    4f8c:	01 97       	sbiw	r24, 0x01	; 1
    4f8e:	f1 f7       	brne	.-4      	; 0x4f8c <Stepper_CounterClockWise_HalfStep+0x8d6>
    4f90:	9a 8b       	std	Y+18, r25	; 0x12
    4f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f94:	8b 89       	ldd	r24, Y+19	; 0x13
    4f96:	9c 89       	ldd	r25, Y+20	; 0x14
    4f98:	01 97       	sbiw	r24, 0x01	; 1
    4f9a:	9c 8b       	std	Y+20, r25	; 0x14
    4f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    4fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    4fa2:	00 97       	sbiw	r24, 0x00	; 0
    4fa4:	69 f7       	brne	.-38     	; 0x4f80 <Stepper_CounterClockWise_HalfStep+0x8ca>
    4fa6:	14 c0       	rjmp	.+40     	; 0x4fd0 <Stepper_CounterClockWise_HalfStep+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    4faa:	7e 89       	ldd	r23, Y+22	; 0x16
    4fac:	8f 89       	ldd	r24, Y+23	; 0x17
    4fae:	98 8d       	ldd	r25, Y+24	; 0x18
    4fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fb4:	dc 01       	movw	r26, r24
    4fb6:	cb 01       	movw	r24, r22
    4fb8:	9c 8b       	std	Y+20, r25	; 0x14
    4fba:	8b 8b       	std	Y+19, r24	; 0x13
    4fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    4fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    4fc0:	98 8b       	std	Y+16, r25	; 0x10
    4fc2:	8f 87       	std	Y+15, r24	; 0x0f
    4fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fc6:	98 89       	ldd	r25, Y+16	; 0x10
    4fc8:	01 97       	sbiw	r24, 0x01	; 1
    4fca:	f1 f7       	brne	.-4      	; 0x4fc8 <Stepper_CounterClockWise_HalfStep+0x912>
    4fcc:	98 8b       	std	Y+16, r25	; 0x10
    4fce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(freq);


	//Step8
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    4fd0:	81 e0       	ldi	r24, 0x01	; 1
    4fd2:	60 e0       	ldi	r22, 0x00	; 0
    4fd4:	40 e0       	ldi	r20, 0x00	; 0
    4fd6:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	61 e0       	ldi	r22, 0x01	; 1
    4fde:	40 e0       	ldi	r20, 0x00	; 0
    4fe0:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    4fe4:	81 e0       	ldi	r24, 0x01	; 1
    4fe6:	62 e0       	ldi	r22, 0x02	; 2
    4fe8:	40 e0       	ldi	r20, 0x00	; 0
    4fea:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    4fee:	81 e0       	ldi	r24, 0x01	; 1
    4ff0:	63 e0       	ldi	r22, 0x03	; 3
    4ff2:	41 e0       	ldi	r20, 0x01	; 1
    4ff4:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    4ff8:	80 e0       	ldi	r24, 0x00	; 0
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	aa e7       	ldi	r26, 0x7A	; 122
    4ffe:	b4 e4       	ldi	r27, 0x44	; 68
    5000:	8b 87       	std	Y+11, r24	; 0x0b
    5002:	9c 87       	std	Y+12, r25	; 0x0c
    5004:	ad 87       	std	Y+13, r26	; 0x0d
    5006:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5008:	6b 85       	ldd	r22, Y+11	; 0x0b
    500a:	7c 85       	ldd	r23, Y+12	; 0x0c
    500c:	8d 85       	ldd	r24, Y+13	; 0x0d
    500e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	4a ef       	ldi	r20, 0xFA	; 250
    5016:	54 e4       	ldi	r21, 0x44	; 68
    5018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501c:	dc 01       	movw	r26, r24
    501e:	cb 01       	movw	r24, r22
    5020:	8f 83       	std	Y+7, r24	; 0x07
    5022:	98 87       	std	Y+8, r25	; 0x08
    5024:	a9 87       	std	Y+9, r26	; 0x09
    5026:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5028:	6f 81       	ldd	r22, Y+7	; 0x07
    502a:	78 85       	ldd	r23, Y+8	; 0x08
    502c:	89 85       	ldd	r24, Y+9	; 0x09
    502e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5030:	20 e0       	ldi	r18, 0x00	; 0
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	40 e8       	ldi	r20, 0x80	; 128
    5036:	5f e3       	ldi	r21, 0x3F	; 63
    5038:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    503c:	88 23       	and	r24, r24
    503e:	2c f4       	brge	.+10     	; 0x504a <Stepper_CounterClockWise_HalfStep+0x994>
		__ticks = 1;
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	9e 83       	std	Y+6, r25	; 0x06
    5046:	8d 83       	std	Y+5, r24	; 0x05
    5048:	3f c0       	rjmp	.+126    	; 0x50c8 <Stepper_CounterClockWise_HalfStep+0xa12>
	else if (__tmp > 65535)
    504a:	6f 81       	ldd	r22, Y+7	; 0x07
    504c:	78 85       	ldd	r23, Y+8	; 0x08
    504e:	89 85       	ldd	r24, Y+9	; 0x09
    5050:	9a 85       	ldd	r25, Y+10	; 0x0a
    5052:	20 e0       	ldi	r18, 0x00	; 0
    5054:	3f ef       	ldi	r19, 0xFF	; 255
    5056:	4f e7       	ldi	r20, 0x7F	; 127
    5058:	57 e4       	ldi	r21, 0x47	; 71
    505a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    505e:	18 16       	cp	r1, r24
    5060:	4c f5       	brge	.+82     	; 0x50b4 <Stepper_CounterClockWise_HalfStep+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5062:	6b 85       	ldd	r22, Y+11	; 0x0b
    5064:	7c 85       	ldd	r23, Y+12	; 0x0c
    5066:	8d 85       	ldd	r24, Y+13	; 0x0d
    5068:	9e 85       	ldd	r25, Y+14	; 0x0e
    506a:	20 e0       	ldi	r18, 0x00	; 0
    506c:	30 e0       	ldi	r19, 0x00	; 0
    506e:	40 e2       	ldi	r20, 0x20	; 32
    5070:	51 e4       	ldi	r21, 0x41	; 65
    5072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5076:	dc 01       	movw	r26, r24
    5078:	cb 01       	movw	r24, r22
    507a:	bc 01       	movw	r22, r24
    507c:	cd 01       	movw	r24, r26
    507e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5082:	dc 01       	movw	r26, r24
    5084:	cb 01       	movw	r24, r22
    5086:	9e 83       	std	Y+6, r25	; 0x06
    5088:	8d 83       	std	Y+5, r24	; 0x05
    508a:	0f c0       	rjmp	.+30     	; 0x50aa <Stepper_CounterClockWise_HalfStep+0x9f4>
    508c:	88 ec       	ldi	r24, 0xC8	; 200
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	9c 83       	std	Y+4, r25	; 0x04
    5092:	8b 83       	std	Y+3, r24	; 0x03
    5094:	8b 81       	ldd	r24, Y+3	; 0x03
    5096:	9c 81       	ldd	r25, Y+4	; 0x04
    5098:	01 97       	sbiw	r24, 0x01	; 1
    509a:	f1 f7       	brne	.-4      	; 0x5098 <Stepper_CounterClockWise_HalfStep+0x9e2>
    509c:	9c 83       	std	Y+4, r25	; 0x04
    509e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50a0:	8d 81       	ldd	r24, Y+5	; 0x05
    50a2:	9e 81       	ldd	r25, Y+6	; 0x06
    50a4:	01 97       	sbiw	r24, 0x01	; 1
    50a6:	9e 83       	std	Y+6, r25	; 0x06
    50a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50aa:	8d 81       	ldd	r24, Y+5	; 0x05
    50ac:	9e 81       	ldd	r25, Y+6	; 0x06
    50ae:	00 97       	sbiw	r24, 0x00	; 0
    50b0:	69 f7       	brne	.-38     	; 0x508c <Stepper_CounterClockWise_HalfStep+0x9d6>
    50b2:	14 c0       	rjmp	.+40     	; 0x50dc <Stepper_CounterClockWise_HalfStep+0xa26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50b4:	6f 81       	ldd	r22, Y+7	; 0x07
    50b6:	78 85       	ldd	r23, Y+8	; 0x08
    50b8:	89 85       	ldd	r24, Y+9	; 0x09
    50ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    50bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c0:	dc 01       	movw	r26, r24
    50c2:	cb 01       	movw	r24, r22
    50c4:	9e 83       	std	Y+6, r25	; 0x06
    50c6:	8d 83       	std	Y+5, r24	; 0x05
    50c8:	8d 81       	ldd	r24, Y+5	; 0x05
    50ca:	9e 81       	ldd	r25, Y+6	; 0x06
    50cc:	9a 83       	std	Y+2, r25	; 0x02
    50ce:	89 83       	std	Y+1, r24	; 0x01
    50d0:	89 81       	ldd	r24, Y+1	; 0x01
    50d2:	9a 81       	ldd	r25, Y+2	; 0x02
    50d4:	01 97       	sbiw	r24, 0x01	; 1
    50d6:	f1 f7       	brne	.-4      	; 0x50d4 <Stepper_CounterClockWise_HalfStep+0xa1e>
    50d8:	9a 83       	std	Y+2, r25	; 0x02
    50da:	89 83       	std	Y+1, r24	; 0x01





}
    50dc:	c0 59       	subi	r28, 0x90	; 144
    50de:	df 4f       	sbci	r29, 0xFF	; 255
    50e0:	0f b6       	in	r0, 0x3f	; 63
    50e2:	f8 94       	cli
    50e4:	de bf       	out	0x3e, r29	; 62
    50e6:	0f be       	out	0x3f, r0	; 63
    50e8:	cd bf       	out	0x3d, r28	; 61
    50ea:	cf 91       	pop	r28
    50ec:	df 91       	pop	r29
    50ee:	1f 91       	pop	r17
    50f0:	0f 91       	pop	r16
    50f2:	08 95       	ret

000050f4 <Servo_voidInit>:
		 .T1_TECHNIQUE=T1_Polling,
		 .T1_CLOCK_MODE=T1_CLK_FCPU_8

 };
void Servo_voidInit()
{
    50f4:	df 93       	push	r29
    50f6:	cf 93       	push	r28
    50f8:	cd b7       	in	r28, 0x3d	; 61
    50fa:	de b7       	in	r29, 0x3e	; 62


	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
    50fc:	83 e0       	ldi	r24, 0x03	; 3
    50fe:	65 e0       	ldi	r22, 0x05	; 5
    5100:	41 e0       	ldi	r20, 0x01	; 1
    5102:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	T1_voidInit(&MyTimer);
    5106:	81 e7       	ldi	r24, 0x71	; 113
    5108:	91 e0       	ldi	r25, 0x01	; 1
    510a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <T1_voidInit>
	ADC_voidInit(ADC_AVCC_Cap,ADC_Single_Conversion,ADC_Right_Adjust);
    510e:	81 e0       	ldi	r24, 0x01	; 1
    5110:	61 e0       	ldi	r22, 0x01	; 1
    5112:	41 e0       	ldi	r20, 0x01	; 1
    5114:	0e 94 14 17 	call	0x2e28	; 0x2e28 <ADC_voidInit>



}
    5118:	cf 91       	pop	r28
    511a:	df 91       	pop	r29
    511c:	08 95       	ret

0000511e <Servo_voidSetAngle>:
void Servo_voidSetAngle(u16 Copy_u8Angle)
{
    511e:	df 93       	push	r29
    5120:	cf 93       	push	r28
    5122:	00 d0       	rcall	.+0      	; 0x5124 <Servo_voidSetAngle+0x6>
    5124:	00 d0       	rcall	.+0      	; 0x5126 <Servo_voidSetAngle+0x8>
    5126:	cd b7       	in	r28, 0x3d	; 61
    5128:	de b7       	in	r29, 0x3e	; 62
    512a:	9c 83       	std	Y+4, r25	; 0x04
    512c:	8b 83       	std	Y+3, r24	; 0x03
	u16 desired_angle;

	Copy_u8Angle+=90;
    512e:	8b 81       	ldd	r24, Y+3	; 0x03
    5130:	9c 81       	ldd	r25, Y+4	; 0x04
    5132:	86 5a       	subi	r24, 0xA6	; 166
    5134:	9f 4f       	sbci	r25, 0xFF	; 255
    5136:	9c 83       	std	Y+4, r25	; 0x04
    5138:	8b 83       	std	Y+3, r24	; 0x03
	desired_angle=((Copy_u8Angle*5.556)+1000);
    513a:	8b 81       	ldd	r24, Y+3	; 0x03
    513c:	9c 81       	ldd	r25, Y+4	; 0x04
    513e:	cc 01       	movw	r24, r24
    5140:	a0 e0       	ldi	r26, 0x00	; 0
    5142:	b0 e0       	ldi	r27, 0x00	; 0
    5144:	bc 01       	movw	r22, r24
    5146:	cd 01       	movw	r24, r26
    5148:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    514c:	dc 01       	movw	r26, r24
    514e:	cb 01       	movw	r24, r22
    5150:	bc 01       	movw	r22, r24
    5152:	cd 01       	movw	r24, r26
    5154:	21 ec       	ldi	r18, 0xC1	; 193
    5156:	3a ec       	ldi	r19, 0xCA	; 202
    5158:	41 eb       	ldi	r20, 0xB1	; 177
    515a:	50 e4       	ldi	r21, 0x40	; 64
    515c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5160:	dc 01       	movw	r26, r24
    5162:	cb 01       	movw	r24, r22
    5164:	bc 01       	movw	r22, r24
    5166:	cd 01       	movw	r24, r26
    5168:	20 e0       	ldi	r18, 0x00	; 0
    516a:	30 e0       	ldi	r19, 0x00	; 0
    516c:	4a e7       	ldi	r20, 0x7A	; 122
    516e:	54 e4       	ldi	r21, 0x44	; 68
    5170:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5174:	dc 01       	movw	r26, r24
    5176:	cb 01       	movw	r24, r22
    5178:	bc 01       	movw	r22, r24
    517a:	cd 01       	movw	r24, r26
    517c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5180:	dc 01       	movw	r26, r24
    5182:	cb 01       	movw	r24, r22
    5184:	9a 83       	std	Y+2, r25	; 0x02
    5186:	89 83       	std	Y+1, r24	; 0x01

	MyTimer.T1_Compare_value=desired_angle;
    5188:	89 81       	ldd	r24, Y+1	; 0x01
    518a:	9a 81       	ldd	r25, Y+2	; 0x02
    518c:	90 93 7e 01 	sts	0x017E, r25
    5190:	80 93 7d 01 	sts	0x017D, r24
    T1_voidSet_ICRValue(20000);
    5194:	80 e2       	ldi	r24, 0x20	; 32
    5196:	9e e4       	ldi	r25, 0x4E	; 78
    5198:	0e 94 96 0b 	call	0x172c	; 0x172c <T1_voidSet_ICRValue>

	T1_voidStartTimer(&MyTimer);
    519c:	81 e7       	ldi	r24, 0x71	; 113
    519e:	91 e0       	ldi	r25, 0x01	; 1
    51a0:	0e 94 97 09 	call	0x132e	; 0x132e <T1_voidStartTimer>

}
    51a4:	0f 90       	pop	r0
    51a6:	0f 90       	pop	r0
    51a8:	0f 90       	pop	r0
    51aa:	0f 90       	pop	r0
    51ac:	cf 91       	pop	r28
    51ae:	df 91       	pop	r29
    51b0:	08 95       	ret

000051b2 <Servo_voidPot>:

void Servo_voidPot()
{
    51b2:	df 93       	push	r29
    51b4:	cf 93       	push	r28
    51b6:	00 d0       	rcall	.+0      	; 0x51b8 <Servo_voidPot+0x6>
    51b8:	cd b7       	in	r28, 0x3d	; 61
    51ba:	de b7       	in	r29, 0x3e	; 62


	u16 reading;
	ADC_voidStartConversion(ADC_Channel_4);
    51bc:	84 e0       	ldi	r24, 0x04	; 4
    51be:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <ADC_voidStartConversion>
	reading=ADC_voidRead();
    51c2:	0e 94 bd 18 	call	0x317a	; 0x317a <ADC_voidRead>
    51c6:	9a 83       	std	Y+2, r25	; 0x02
    51c8:	89 83       	std	Y+1, r24	; 0x01
	Servo_voidSetAngle((reading/5.68)-90);
    51ca:	89 81       	ldd	r24, Y+1	; 0x01
    51cc:	9a 81       	ldd	r25, Y+2	; 0x02
    51ce:	cc 01       	movw	r24, r24
    51d0:	a0 e0       	ldi	r26, 0x00	; 0
    51d2:	b0 e0       	ldi	r27, 0x00	; 0
    51d4:	bc 01       	movw	r22, r24
    51d6:	cd 01       	movw	r24, r26
    51d8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    51dc:	dc 01       	movw	r26, r24
    51de:	cb 01       	movw	r24, r22
    51e0:	bc 01       	movw	r22, r24
    51e2:	cd 01       	movw	r24, r26
    51e4:	2f e8       	ldi	r18, 0x8F	; 143
    51e6:	32 ec       	ldi	r19, 0xC2	; 194
    51e8:	45 eb       	ldi	r20, 0xB5	; 181
    51ea:	50 e4       	ldi	r21, 0x40	; 64
    51ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    51f0:	dc 01       	movw	r26, r24
    51f2:	cb 01       	movw	r24, r22
    51f4:	bc 01       	movw	r22, r24
    51f6:	cd 01       	movw	r24, r26
    51f8:	20 e0       	ldi	r18, 0x00	; 0
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	44 eb       	ldi	r20, 0xB4	; 180
    51fe:	52 e4       	ldi	r21, 0x42	; 66
    5200:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5204:	dc 01       	movw	r26, r24
    5206:	cb 01       	movw	r24, r22
    5208:	bc 01       	movw	r22, r24
    520a:	cd 01       	movw	r24, r26
    520c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5210:	dc 01       	movw	r26, r24
    5212:	cb 01       	movw	r24, r22
    5214:	0e 94 8f 28 	call	0x511e	; 0x511e <Servo_voidSetAngle>


}
    5218:	0f 90       	pop	r0
    521a:	0f 90       	pop	r0
    521c:	cf 91       	pop	r28
    521e:	df 91       	pop	r29
    5220:	08 95       	ret

00005222 <SSD_voidInit>:
#include"SSD_Private.h"



void SSD_voidInit(SSD_t *Copy_PstructLed)
{
    5222:	df 93       	push	r29
    5224:	cf 93       	push	r28
    5226:	00 d0       	rcall	.+0      	; 0x5228 <SSD_voidInit+0x6>
    5228:	00 d0       	rcall	.+0      	; 0x522a <SSD_voidInit+0x8>
    522a:	cd b7       	in	r28, 0x3d	; 61
    522c:	de b7       	in	r29, 0x3e	; 62
    522e:	9a 83       	std	Y+2, r25	; 0x02
    5230:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection(Copy_PstructLed->PORT,DIO_OUTPUT);
    5232:	e9 81       	ldd	r30, Y+1	; 0x01
    5234:	fa 81       	ldd	r31, Y+2	; 0x02
    5236:	80 81       	ld	r24, Z
    5238:	61 e0       	ldi	r22, 0x01	; 1
    523a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <DIO_voidSetPortDirection>

		switch(Copy_PstructLed->CommanState)
    523e:	e9 81       	ldd	r30, Y+1	; 0x01
    5240:	fa 81       	ldd	r31, Y+2	; 0x02
    5242:	81 81       	ldd	r24, Z+1	; 0x01
    5244:	28 2f       	mov	r18, r24
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	3c 83       	std	Y+4, r19	; 0x04
    524a:	2b 83       	std	Y+3, r18	; 0x03
    524c:	8b 81       	ldd	r24, Y+3	; 0x03
    524e:	9c 81       	ldd	r25, Y+4	; 0x04
    5250:	00 97       	sbiw	r24, 0x00	; 0
    5252:	61 f0       	breq	.+24     	; 0x526c <SSD_voidInit+0x4a>
    5254:	2b 81       	ldd	r18, Y+3	; 0x03
    5256:	3c 81       	ldd	r19, Y+4	; 0x04
    5258:	21 30       	cpi	r18, 0x01	; 1
    525a:	31 05       	cpc	r19, r1
    525c:	69 f4       	brne	.+26     	; 0x5278 <SSD_voidInit+0x56>
			{
			case Comman_Cathod:
				DIO_voidSetPortValue(Copy_PstructLed->PORT,0x00);
    525e:	e9 81       	ldd	r30, Y+1	; 0x01
    5260:	fa 81       	ldd	r31, Y+2	; 0x02
    5262:	80 81       	ld	r24, Z
    5264:	60 e0       	ldi	r22, 0x00	; 0
    5266:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_voidSetPortValue>
    526a:	06 c0       	rjmp	.+12     	; 0x5278 <SSD_voidInit+0x56>
				break;

			case Comman_Anode:
					DIO_voidSetPortValue(Copy_PstructLed->PORT,0xFF);
    526c:	e9 81       	ldd	r30, Y+1	; 0x01
    526e:	fa 81       	ldd	r31, Y+2	; 0x02
    5270:	80 81       	ld	r24, Z
    5272:	6f ef       	ldi	r22, 0xFF	; 255
    5274:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_voidSetPortValue>
					break;
			}

}
    5278:	0f 90       	pop	r0
    527a:	0f 90       	pop	r0
    527c:	0f 90       	pop	r0
    527e:	0f 90       	pop	r0
    5280:	cf 91       	pop	r28
    5282:	df 91       	pop	r29
    5284:	08 95       	ret

00005286 <SSD_Display>:
void SSD_Display(SSD_t *Copy_PstructLed,u8 num)
{
    5286:	df 93       	push	r29
    5288:	cf 93       	push	r28
    528a:	00 d0       	rcall	.+0      	; 0x528c <SSD_Display+0x6>
    528c:	00 d0       	rcall	.+0      	; 0x528e <SSD_Display+0x8>
    528e:	0f 92       	push	r0
    5290:	cd b7       	in	r28, 0x3d	; 61
    5292:	de b7       	in	r29, 0x3e	; 62
    5294:	9a 83       	std	Y+2, r25	; 0x02
    5296:	89 83       	std	Y+1, r24	; 0x01
    5298:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_PstructLed->CommanState)
    529a:	e9 81       	ldd	r30, Y+1	; 0x01
    529c:	fa 81       	ldd	r31, Y+2	; 0x02
    529e:	81 81       	ldd	r24, Z+1	; 0x01
    52a0:	28 2f       	mov	r18, r24
    52a2:	30 e0       	ldi	r19, 0x00	; 0
    52a4:	3d 83       	std	Y+5, r19	; 0x05
    52a6:	2c 83       	std	Y+4, r18	; 0x04
    52a8:	8c 81       	ldd	r24, Y+4	; 0x04
    52aa:	9d 81       	ldd	r25, Y+5	; 0x05
    52ac:	00 97       	sbiw	r24, 0x00	; 0
    52ae:	b1 f0       	breq	.+44     	; 0x52dc <SSD_Display+0x56>
    52b0:	2c 81       	ldd	r18, Y+4	; 0x04
    52b2:	3d 81       	ldd	r19, Y+5	; 0x05
    52b4:	21 30       	cpi	r18, 0x01	; 1
    52b6:	31 05       	cpc	r19, r1
    52b8:	f9 f4       	brne	.+62     	; 0x52f8 <SSD_Display+0x72>
	{
	case Comman_Cathod:
		DIO_voidSetPortValue(Copy_PstructLed->PORT,~arr[num]);
    52ba:	e9 81       	ldd	r30, Y+1	; 0x01
    52bc:	fa 81       	ldd	r31, Y+2	; 0x02
    52be:	20 81       	ld	r18, Z
    52c0:	8b 81       	ldd	r24, Y+3	; 0x03
    52c2:	88 2f       	mov	r24, r24
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	fc 01       	movw	r30, r24
    52c8:	e1 57       	subi	r30, 0x71	; 113
    52ca:	fe 4f       	sbci	r31, 0xFE	; 254
    52cc:	80 81       	ld	r24, Z
    52ce:	98 2f       	mov	r25, r24
    52d0:	90 95       	com	r25
    52d2:	82 2f       	mov	r24, r18
    52d4:	69 2f       	mov	r22, r25
    52d6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_voidSetPortValue>
    52da:	0e c0       	rjmp	.+28     	; 0x52f8 <SSD_Display+0x72>
		break;

	case Comman_Anode:
			DIO_voidSetPortValue(Copy_PstructLed->PORT,arr[num]);
    52dc:	e9 81       	ldd	r30, Y+1	; 0x01
    52de:	fa 81       	ldd	r31, Y+2	; 0x02
    52e0:	20 81       	ld	r18, Z
    52e2:	8b 81       	ldd	r24, Y+3	; 0x03
    52e4:	88 2f       	mov	r24, r24
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	fc 01       	movw	r30, r24
    52ea:	e1 57       	subi	r30, 0x71	; 113
    52ec:	fe 4f       	sbci	r31, 0xFE	; 254
    52ee:	90 81       	ld	r25, Z
    52f0:	82 2f       	mov	r24, r18
    52f2:	69 2f       	mov	r22, r25
    52f4:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_voidSetPortValue>
			break;
	}


}
    52f8:	0f 90       	pop	r0
    52fa:	0f 90       	pop	r0
    52fc:	0f 90       	pop	r0
    52fe:	0f 90       	pop	r0
    5300:	0f 90       	pop	r0
    5302:	cf 91       	pop	r28
    5304:	df 91       	pop	r29
    5306:	08 95       	ret

00005308 <SSD_Disable>:
void SSD_Disable(SSD_t *Copy_PstructLed)
{
    5308:	df 93       	push	r29
    530a:	cf 93       	push	r28
    530c:	00 d0       	rcall	.+0      	; 0x530e <SSD_Disable+0x6>
    530e:	00 d0       	rcall	.+0      	; 0x5310 <SSD_Disable+0x8>
    5310:	cd b7       	in	r28, 0x3d	; 61
    5312:	de b7       	in	r29, 0x3e	; 62
    5314:	9a 83       	std	Y+2, r25	; 0x02
    5316:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_PstructLed->CommanState)
    5318:	e9 81       	ldd	r30, Y+1	; 0x01
    531a:	fa 81       	ldd	r31, Y+2	; 0x02
    531c:	81 81       	ldd	r24, Z+1	; 0x01
    531e:	28 2f       	mov	r18, r24
    5320:	30 e0       	ldi	r19, 0x00	; 0
    5322:	3c 83       	std	Y+4, r19	; 0x04
    5324:	2b 83       	std	Y+3, r18	; 0x03
    5326:	8b 81       	ldd	r24, Y+3	; 0x03
    5328:	9c 81       	ldd	r25, Y+4	; 0x04
    532a:	00 97       	sbiw	r24, 0x00	; 0
    532c:	61 f0       	breq	.+24     	; 0x5346 <SSD_Disable+0x3e>
    532e:	2b 81       	ldd	r18, Y+3	; 0x03
    5330:	3c 81       	ldd	r19, Y+4	; 0x04
    5332:	21 30       	cpi	r18, 0x01	; 1
    5334:	31 05       	cpc	r19, r1
    5336:	69 f4       	brne	.+26     	; 0x5352 <SSD_Disable+0x4a>
		{
		case Comman_Cathod:
			DIO_voidSetPortValue(Copy_PstructLed->PORT,0x00);
    5338:	e9 81       	ldd	r30, Y+1	; 0x01
    533a:	fa 81       	ldd	r31, Y+2	; 0x02
    533c:	80 81       	ld	r24, Z
    533e:	60 e0       	ldi	r22, 0x00	; 0
    5340:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_voidSetPortValue>
    5344:	06 c0       	rjmp	.+12     	; 0x5352 <SSD_Disable+0x4a>
			break;

		case Comman_Anode:
				DIO_voidSetPortValue(Copy_PstructLed->PORT,0xFF);
    5346:	e9 81       	ldd	r30, Y+1	; 0x01
    5348:	fa 81       	ldd	r31, Y+2	; 0x02
    534a:	80 81       	ld	r24, Z
    534c:	6f ef       	ldi	r22, 0xFF	; 255
    534e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_voidSetPortValue>
				break;
		}


}
    5352:	0f 90       	pop	r0
    5354:	0f 90       	pop	r0
    5356:	0f 90       	pop	r0
    5358:	0f 90       	pop	r0
    535a:	cf 91       	pop	r28
    535c:	df 91       	pop	r29
    535e:	08 95       	ret

00005360 <LED_voidInit>:
#include"../../LIB/STD_TYPES.h"
#include"../../MCAL/DIO/DIO_Interface.h"
#include"LED_Interface.h"

void LED_voidInit(LED_t *Copy_PstructLed)
{
    5360:	df 93       	push	r29
    5362:	cf 93       	push	r28
    5364:	00 d0       	rcall	.+0      	; 0x5366 <LED_voidInit+0x6>
    5366:	00 d0       	rcall	.+0      	; 0x5368 <LED_voidInit+0x8>
    5368:	cd b7       	in	r28, 0x3d	; 61
    536a:	de b7       	in	r29, 0x3e	; 62
    536c:	9a 83       	std	Y+2, r25	; 0x02
    536e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_OUTPUT);
    5370:	e9 81       	ldd	r30, Y+1	; 0x01
    5372:	fa 81       	ldd	r31, Y+2	; 0x02
    5374:	80 81       	ld	r24, Z
    5376:	e9 81       	ldd	r30, Y+1	; 0x01
    5378:	fa 81       	ldd	r31, Y+2	; 0x02
    537a:	91 81       	ldd	r25, Z+1	; 0x01
    537c:	69 2f       	mov	r22, r25
    537e:	41 e0       	ldi	r20, 0x01	; 1
    5380:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>

	switch(Copy_PstructLed->ActiveState)
    5384:	e9 81       	ldd	r30, Y+1	; 0x01
    5386:	fa 81       	ldd	r31, Y+2	; 0x02
    5388:	82 81       	ldd	r24, Z+2	; 0x02
    538a:	28 2f       	mov	r18, r24
    538c:	30 e0       	ldi	r19, 0x00	; 0
    538e:	3c 83       	std	Y+4, r19	; 0x04
    5390:	2b 83       	std	Y+3, r18	; 0x03
    5392:	8b 81       	ldd	r24, Y+3	; 0x03
    5394:	9c 81       	ldd	r25, Y+4	; 0x04
    5396:	00 97       	sbiw	r24, 0x00	; 0
    5398:	81 f0       	breq	.+32     	; 0x53ba <LED_voidInit+0x5a>
    539a:	2b 81       	ldd	r18, Y+3	; 0x03
    539c:	3c 81       	ldd	r19, Y+4	; 0x04
    539e:	21 30       	cpi	r18, 0x01	; 1
    53a0:	31 05       	cpc	r19, r1
    53a2:	a9 f4       	brne	.+42     	; 0x53ce <LED_voidInit+0x6e>
	{

	case ACTIVE_HIGH:
		DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_LOW);
    53a4:	e9 81       	ldd	r30, Y+1	; 0x01
    53a6:	fa 81       	ldd	r31, Y+2	; 0x02
    53a8:	80 81       	ld	r24, Z
    53aa:	e9 81       	ldd	r30, Y+1	; 0x01
    53ac:	fa 81       	ldd	r31, Y+2	; 0x02
    53ae:	91 81       	ldd	r25, Z+1	; 0x01
    53b0:	69 2f       	mov	r22, r25
    53b2:	40 e0       	ldi	r20, 0x00	; 0
    53b4:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    53b8:	0a c0       	rjmp	.+20     	; 0x53ce <LED_voidInit+0x6e>
		break;

	case ACTIVE_LOW:
		DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_HIGH);
    53ba:	e9 81       	ldd	r30, Y+1	; 0x01
    53bc:	fa 81       	ldd	r31, Y+2	; 0x02
    53be:	80 81       	ld	r24, Z
    53c0:	e9 81       	ldd	r30, Y+1	; 0x01
    53c2:	fa 81       	ldd	r31, Y+2	; 0x02
    53c4:	91 81       	ldd	r25, Z+1	; 0x01
    53c6:	69 2f       	mov	r22, r25
    53c8:	41 e0       	ldi	r20, 0x01	; 1
    53ca:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
		break;


	}
}
    53ce:	0f 90       	pop	r0
    53d0:	0f 90       	pop	r0
    53d2:	0f 90       	pop	r0
    53d4:	0f 90       	pop	r0
    53d6:	cf 91       	pop	r28
    53d8:	df 91       	pop	r29
    53da:	08 95       	ret

000053dc <LED_ON>:

	void LED_ON(LED_t *Copy_PstructLed)
	{
    53dc:	df 93       	push	r29
    53de:	cf 93       	push	r28
    53e0:	00 d0       	rcall	.+0      	; 0x53e2 <LED_ON+0x6>
    53e2:	00 d0       	rcall	.+0      	; 0x53e4 <LED_ON+0x8>
    53e4:	cd b7       	in	r28, 0x3d	; 61
    53e6:	de b7       	in	r29, 0x3e	; 62
    53e8:	9a 83       	std	Y+2, r25	; 0x02
    53ea:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_PstructLed->ActiveState)
    53ec:	e9 81       	ldd	r30, Y+1	; 0x01
    53ee:	fa 81       	ldd	r31, Y+2	; 0x02
    53f0:	82 81       	ldd	r24, Z+2	; 0x02
    53f2:	28 2f       	mov	r18, r24
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	3c 83       	std	Y+4, r19	; 0x04
    53f8:	2b 83       	std	Y+3, r18	; 0x03
    53fa:	8b 81       	ldd	r24, Y+3	; 0x03
    53fc:	9c 81       	ldd	r25, Y+4	; 0x04
    53fe:	00 97       	sbiw	r24, 0x00	; 0
    5400:	81 f0       	breq	.+32     	; 0x5422 <LED_ON+0x46>
    5402:	2b 81       	ldd	r18, Y+3	; 0x03
    5404:	3c 81       	ldd	r19, Y+4	; 0x04
    5406:	21 30       	cpi	r18, 0x01	; 1
    5408:	31 05       	cpc	r19, r1
    540a:	a9 f4       	brne	.+42     	; 0x5436 <LED_ON+0x5a>
		{

		case ACTIVE_HIGH:
			DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_HIGH);
    540c:	e9 81       	ldd	r30, Y+1	; 0x01
    540e:	fa 81       	ldd	r31, Y+2	; 0x02
    5410:	80 81       	ld	r24, Z
    5412:	e9 81       	ldd	r30, Y+1	; 0x01
    5414:	fa 81       	ldd	r31, Y+2	; 0x02
    5416:	91 81       	ldd	r25, Z+1	; 0x01
    5418:	69 2f       	mov	r22, r25
    541a:	41 e0       	ldi	r20, 0x01	; 1
    541c:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    5420:	0a c0       	rjmp	.+20     	; 0x5436 <LED_ON+0x5a>
			break;

		case ACTIVE_LOW:
			DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_LOW);
    5422:	e9 81       	ldd	r30, Y+1	; 0x01
    5424:	fa 81       	ldd	r31, Y+2	; 0x02
    5426:	80 81       	ld	r24, Z
    5428:	e9 81       	ldd	r30, Y+1	; 0x01
    542a:	fa 81       	ldd	r31, Y+2	; 0x02
    542c:	91 81       	ldd	r25, Z+1	; 0x01
    542e:	69 2f       	mov	r22, r25
    5430:	40 e0       	ldi	r20, 0x00	; 0
    5432:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
			break;


		}

	}
    5436:	0f 90       	pop	r0
    5438:	0f 90       	pop	r0
    543a:	0f 90       	pop	r0
    543c:	0f 90       	pop	r0
    543e:	cf 91       	pop	r28
    5440:	df 91       	pop	r29
    5442:	08 95       	ret

00005444 <LED_OFF>:

	void LED_OFF(LED_t *Copy_PstructLed)
	{
    5444:	df 93       	push	r29
    5446:	cf 93       	push	r28
    5448:	00 d0       	rcall	.+0      	; 0x544a <LED_OFF+0x6>
    544a:	00 d0       	rcall	.+0      	; 0x544c <LED_OFF+0x8>
    544c:	cd b7       	in	r28, 0x3d	; 61
    544e:	de b7       	in	r29, 0x3e	; 62
    5450:	9a 83       	std	Y+2, r25	; 0x02
    5452:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_PstructLed->ActiveState)
    5454:	e9 81       	ldd	r30, Y+1	; 0x01
    5456:	fa 81       	ldd	r31, Y+2	; 0x02
    5458:	82 81       	ldd	r24, Z+2	; 0x02
    545a:	28 2f       	mov	r18, r24
    545c:	30 e0       	ldi	r19, 0x00	; 0
    545e:	3c 83       	std	Y+4, r19	; 0x04
    5460:	2b 83       	std	Y+3, r18	; 0x03
    5462:	8b 81       	ldd	r24, Y+3	; 0x03
    5464:	9c 81       	ldd	r25, Y+4	; 0x04
    5466:	00 97       	sbiw	r24, 0x00	; 0
    5468:	81 f0       	breq	.+32     	; 0x548a <LED_OFF+0x46>
    546a:	2b 81       	ldd	r18, Y+3	; 0x03
    546c:	3c 81       	ldd	r19, Y+4	; 0x04
    546e:	21 30       	cpi	r18, 0x01	; 1
    5470:	31 05       	cpc	r19, r1
    5472:	a9 f4       	brne	.+42     	; 0x549e <LED_OFF+0x5a>
				{

				case ACTIVE_HIGH:
					DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_LOW);
    5474:	e9 81       	ldd	r30, Y+1	; 0x01
    5476:	fa 81       	ldd	r31, Y+2	; 0x02
    5478:	80 81       	ld	r24, Z
    547a:	e9 81       	ldd	r30, Y+1	; 0x01
    547c:	fa 81       	ldd	r31, Y+2	; 0x02
    547e:	91 81       	ldd	r25, Z+1	; 0x01
    5480:	69 2f       	mov	r22, r25
    5482:	40 e0       	ldi	r20, 0x00	; 0
    5484:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    5488:	0a c0       	rjmp	.+20     	; 0x549e <LED_OFF+0x5a>
					break;

				case ACTIVE_LOW:
					DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_HIGH);
    548a:	e9 81       	ldd	r30, Y+1	; 0x01
    548c:	fa 81       	ldd	r31, Y+2	; 0x02
    548e:	80 81       	ld	r24, Z
    5490:	e9 81       	ldd	r30, Y+1	; 0x01
    5492:	fa 81       	ldd	r31, Y+2	; 0x02
    5494:	91 81       	ldd	r25, Z+1	; 0x01
    5496:	69 2f       	mov	r22, r25
    5498:	41 e0       	ldi	r20, 0x01	; 1
    549a:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>

				}



	}
    549e:	0f 90       	pop	r0
    54a0:	0f 90       	pop	r0
    54a2:	0f 90       	pop	r0
    54a4:	0f 90       	pop	r0
    54a6:	cf 91       	pop	r28
    54a8:	df 91       	pop	r29
    54aa:	08 95       	ret

000054ac <KPAD_voidInit>:




void KPAD_voidInit()
{
    54ac:	df 93       	push	r29
    54ae:	cf 93       	push	r28
    54b0:	cd b7       	in	r28, 0x3d	; 61
    54b2:	de b7       	in	r29, 0x3e	; 62
	//SET COL PINS OUTPUT
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Col1_PIN,DIO_OUTPUT);
    54b4:	80 e0       	ldi	r24, 0x00	; 0
    54b6:	60 e0       	ldi	r22, 0x00	; 0
    54b8:	41 e0       	ldi	r20, 0x01	; 1
    54ba:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Col2_PIN,DIO_OUTPUT);
    54be:	80 e0       	ldi	r24, 0x00	; 0
    54c0:	61 e0       	ldi	r22, 0x01	; 1
    54c2:	41 e0       	ldi	r20, 0x01	; 1
    54c4:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Col3_PIN,DIO_OUTPUT);
    54c8:	80 e0       	ldi	r24, 0x00	; 0
    54ca:	62 e0       	ldi	r22, 0x02	; 2
    54cc:	41 e0       	ldi	r20, 0x01	; 1
    54ce:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Col4_PIN,DIO_OUTPUT);
    54d2:	80 e0       	ldi	r24, 0x00	; 0
    54d4:	63 e0       	ldi	r22, 0x03	; 3
    54d6:	41 e0       	ldi	r20, 0x01	; 1
    54d8:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>

	//SET ROW PINS INPUT
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Row1_PIN,DIO_INPUT);
    54dc:	80 e0       	ldi	r24, 0x00	; 0
    54de:	64 e0       	ldi	r22, 0x04	; 4
    54e0:	40 e0       	ldi	r20, 0x00	; 0
    54e2:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Row2_PIN,DIO_INPUT);
    54e6:	80 e0       	ldi	r24, 0x00	; 0
    54e8:	65 e0       	ldi	r22, 0x05	; 5
    54ea:	40 e0       	ldi	r20, 0x00	; 0
    54ec:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Row3_PIN,DIO_INPUT);
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	66 e0       	ldi	r22, 0x06	; 6
    54f4:	40 e0       	ldi	r20, 0x00	; 0
    54f6:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Row4_PIN,DIO_INPUT);
    54fa:	80 e0       	ldi	r24, 0x00	; 0
    54fc:	67 e0       	ldi	r22, 0x07	; 7
    54fe:	40 e0       	ldi	r20, 0x00	; 0
    5500:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>


	//SET INTIAL PORT VALUE TO 1
	DIO_voidSetPortValue(KPAD_PORT,0xFF);
    5504:	80 e0       	ldi	r24, 0x00	; 0
    5506:	6f ef       	ldi	r22, 0xFF	; 255
    5508:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_voidSetPortValue>



}
    550c:	cf 91       	pop	r28
    550e:	df 91       	pop	r29
    5510:	08 95       	ret

00005512 <KPAD_u8GetKeyPressed>:
u8 KPAD_u8GetKeyPressed()
{
    5512:	df 93       	push	r29
    5514:	cf 93       	push	r28
    5516:	cd b7       	in	r28, 0x3d	; 61
    5518:	de b7       	in	r29, 0x3e	; 62
    551a:	6f 97       	sbiw	r28, 0x1f	; 31
    551c:	0f b6       	in	r0, 0x3f	; 63
    551e:	f8 94       	cli
    5520:	de bf       	out	0x3e, r29	; 62
    5522:	0f be       	out	0x3f, r0	; 63
    5524:	cd bf       	out	0x3d, r28	; 61
    5526:	80 e0       	ldi	r24, 0x00	; 0
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	a8 e4       	ldi	r26, 0x48	; 72
    552c:	b2 e4       	ldi	r27, 0x42	; 66
    552e:	89 8f       	std	Y+25, r24	; 0x19
    5530:	9a 8f       	std	Y+26, r25	; 0x1a
    5532:	ab 8f       	std	Y+27, r26	; 0x1b
    5534:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5536:	69 8d       	ldd	r22, Y+25	; 0x19
    5538:	7a 8d       	ldd	r23, Y+26	; 0x1a
    553a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    553c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    553e:	20 e0       	ldi	r18, 0x00	; 0
    5540:	30 e0       	ldi	r19, 0x00	; 0
    5542:	4a ef       	ldi	r20, 0xFA	; 250
    5544:	54 e4       	ldi	r21, 0x44	; 68
    5546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    554a:	dc 01       	movw	r26, r24
    554c:	cb 01       	movw	r24, r22
    554e:	8d 8b       	std	Y+21, r24	; 0x15
    5550:	9e 8b       	std	Y+22, r25	; 0x16
    5552:	af 8b       	std	Y+23, r26	; 0x17
    5554:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5556:	6d 89       	ldd	r22, Y+21	; 0x15
    5558:	7e 89       	ldd	r23, Y+22	; 0x16
    555a:	8f 89       	ldd	r24, Y+23	; 0x17
    555c:	98 8d       	ldd	r25, Y+24	; 0x18
    555e:	20 e0       	ldi	r18, 0x00	; 0
    5560:	30 e0       	ldi	r19, 0x00	; 0
    5562:	40 e8       	ldi	r20, 0x80	; 128
    5564:	5f e3       	ldi	r21, 0x3F	; 63
    5566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    556a:	88 23       	and	r24, r24
    556c:	2c f4       	brge	.+10     	; 0x5578 <KPAD_u8GetKeyPressed+0x66>
		__ticks = 1;
    556e:	81 e0       	ldi	r24, 0x01	; 1
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	9c 8b       	std	Y+20, r25	; 0x14
    5574:	8b 8b       	std	Y+19, r24	; 0x13
    5576:	3f c0       	rjmp	.+126    	; 0x55f6 <KPAD_u8GetKeyPressed+0xe4>
	else if (__tmp > 65535)
    5578:	6d 89       	ldd	r22, Y+21	; 0x15
    557a:	7e 89       	ldd	r23, Y+22	; 0x16
    557c:	8f 89       	ldd	r24, Y+23	; 0x17
    557e:	98 8d       	ldd	r25, Y+24	; 0x18
    5580:	20 e0       	ldi	r18, 0x00	; 0
    5582:	3f ef       	ldi	r19, 0xFF	; 255
    5584:	4f e7       	ldi	r20, 0x7F	; 127
    5586:	57 e4       	ldi	r21, 0x47	; 71
    5588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    558c:	18 16       	cp	r1, r24
    558e:	4c f5       	brge	.+82     	; 0x55e2 <KPAD_u8GetKeyPressed+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5590:	69 8d       	ldd	r22, Y+25	; 0x19
    5592:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5594:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5596:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5598:	20 e0       	ldi	r18, 0x00	; 0
    559a:	30 e0       	ldi	r19, 0x00	; 0
    559c:	40 e2       	ldi	r20, 0x20	; 32
    559e:	51 e4       	ldi	r21, 0x41	; 65
    55a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	bc 01       	movw	r22, r24
    55aa:	cd 01       	movw	r24, r26
    55ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55b0:	dc 01       	movw	r26, r24
    55b2:	cb 01       	movw	r24, r22
    55b4:	9c 8b       	std	Y+20, r25	; 0x14
    55b6:	8b 8b       	std	Y+19, r24	; 0x13
    55b8:	0f c0       	rjmp	.+30     	; 0x55d8 <KPAD_u8GetKeyPressed+0xc6>
    55ba:	88 ec       	ldi	r24, 0xC8	; 200
    55bc:	90 e0       	ldi	r25, 0x00	; 0
    55be:	9a 8b       	std	Y+18, r25	; 0x12
    55c0:	89 8b       	std	Y+17, r24	; 0x11
    55c2:	89 89       	ldd	r24, Y+17	; 0x11
    55c4:	9a 89       	ldd	r25, Y+18	; 0x12
    55c6:	01 97       	sbiw	r24, 0x01	; 1
    55c8:	f1 f7       	brne	.-4      	; 0x55c6 <KPAD_u8GetKeyPressed+0xb4>
    55ca:	9a 8b       	std	Y+18, r25	; 0x12
    55cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ce:	8b 89       	ldd	r24, Y+19	; 0x13
    55d0:	9c 89       	ldd	r25, Y+20	; 0x14
    55d2:	01 97       	sbiw	r24, 0x01	; 1
    55d4:	9c 8b       	std	Y+20, r25	; 0x14
    55d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55d8:	8b 89       	ldd	r24, Y+19	; 0x13
    55da:	9c 89       	ldd	r25, Y+20	; 0x14
    55dc:	00 97       	sbiw	r24, 0x00	; 0
    55de:	69 f7       	brne	.-38     	; 0x55ba <KPAD_u8GetKeyPressed+0xa8>
    55e0:	14 c0       	rjmp	.+40     	; 0x560a <KPAD_u8GetKeyPressed+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55e2:	6d 89       	ldd	r22, Y+21	; 0x15
    55e4:	7e 89       	ldd	r23, Y+22	; 0x16
    55e6:	8f 89       	ldd	r24, Y+23	; 0x17
    55e8:	98 8d       	ldd	r25, Y+24	; 0x18
    55ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ee:	dc 01       	movw	r26, r24
    55f0:	cb 01       	movw	r24, r22
    55f2:	9c 8b       	std	Y+20, r25	; 0x14
    55f4:	8b 8b       	std	Y+19, r24	; 0x13
    55f6:	8b 89       	ldd	r24, Y+19	; 0x13
    55f8:	9c 89       	ldd	r25, Y+20	; 0x14
    55fa:	98 8b       	std	Y+16, r25	; 0x10
    55fc:	8f 87       	std	Y+15, r24	; 0x0f
    55fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    5600:	98 89       	ldd	r25, Y+16	; 0x10
    5602:	01 97       	sbiw	r24, 0x01	; 1
    5604:	f1 f7       	brne	.-4      	; 0x5602 <KPAD_u8GetKeyPressed+0xf0>
    5606:	98 8b       	std	Y+16, r25	; 0x10
    5608:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(50);
	u8 Local_u8KeyPressed=NOT_Pressed;
    560a:	8f ef       	ldi	r24, 0xFF	; 255
    560c:	8f 8f       	std	Y+31, r24	; 0x1f

	for(u8 col_index=0;col_index<KPAD_NUM_COLS;col_index++)
    560e:	1e 8e       	std	Y+30, r1	; 0x1e
    5610:	ab c0       	rjmp	.+342    	; 0x5768 <KPAD_u8GetKeyPressed+0x256>
	{

		DIO_voidSetPinValue(KPAD_PORT,col_index,DIO_LOW);
    5612:	80 e0       	ldi	r24, 0x00	; 0
    5614:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5616:	40 e0       	ldi	r20, 0x00	; 0
    5618:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
		for(u8 row_index=4;row_index<8;row_index++)
    561c:	84 e0       	ldi	r24, 0x04	; 4
    561e:	8d 8f       	std	Y+29, r24	; 0x1d
    5620:	97 c0       	rjmp	.+302    	; 0x5750 <KPAD_u8GetKeyPressed+0x23e>
		{


			if(DIO_u8GetPinValue(KPAD_PORT,row_index)==0){
    5622:	80 e0       	ldi	r24, 0x00	; 0
    5624:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5626:	0e 94 90 15 	call	0x2b20	; 0x2b20 <DIO_u8GetPinValue>
    562a:	88 23       	and	r24, r24
    562c:	09 f0       	breq	.+2      	; 0x5630 <KPAD_u8GetKeyPressed+0x11e>
    562e:	8d c0       	rjmp	.+282    	; 0x574a <KPAD_u8GetKeyPressed+0x238>
				Local_u8KeyPressed=KPAD_KEYS[row_index-4][col_index];
    5630:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5632:	88 2f       	mov	r24, r24
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	ac 01       	movw	r20, r24
    5638:	44 50       	subi	r20, 0x04	; 4
    563a:	50 40       	sbci	r21, 0x00	; 0
    563c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    563e:	28 2f       	mov	r18, r24
    5640:	30 e0       	ldi	r19, 0x00	; 0
    5642:	ca 01       	movw	r24, r20
    5644:	88 0f       	add	r24, r24
    5646:	99 1f       	adc	r25, r25
    5648:	88 0f       	add	r24, r24
    564a:	99 1f       	adc	r25, r25
    564c:	82 0f       	add	r24, r18
    564e:	93 1f       	adc	r25, r19
    5650:	fc 01       	movw	r30, r24
    5652:	e1 58       	subi	r30, 0x81	; 129
    5654:	fe 4f       	sbci	r31, 0xFE	; 254
    5656:	80 81       	ld	r24, Z
    5658:	8f 8f       	std	Y+31, r24	; 0x1f
    565a:	80 e0       	ldi	r24, 0x00	; 0
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	a8 e4       	ldi	r26, 0x48	; 72
    5660:	b2 e4       	ldi	r27, 0x42	; 66
    5662:	8b 87       	std	Y+11, r24	; 0x0b
    5664:	9c 87       	std	Y+12, r25	; 0x0c
    5666:	ad 87       	std	Y+13, r26	; 0x0d
    5668:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    566a:	6b 85       	ldd	r22, Y+11	; 0x0b
    566c:	7c 85       	ldd	r23, Y+12	; 0x0c
    566e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5670:	9e 85       	ldd	r25, Y+14	; 0x0e
    5672:	20 e0       	ldi	r18, 0x00	; 0
    5674:	30 e0       	ldi	r19, 0x00	; 0
    5676:	4a ef       	ldi	r20, 0xFA	; 250
    5678:	54 e4       	ldi	r21, 0x44	; 68
    567a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    567e:	dc 01       	movw	r26, r24
    5680:	cb 01       	movw	r24, r22
    5682:	8f 83       	std	Y+7, r24	; 0x07
    5684:	98 87       	std	Y+8, r25	; 0x08
    5686:	a9 87       	std	Y+9, r26	; 0x09
    5688:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    568a:	6f 81       	ldd	r22, Y+7	; 0x07
    568c:	78 85       	ldd	r23, Y+8	; 0x08
    568e:	89 85       	ldd	r24, Y+9	; 0x09
    5690:	9a 85       	ldd	r25, Y+10	; 0x0a
    5692:	20 e0       	ldi	r18, 0x00	; 0
    5694:	30 e0       	ldi	r19, 0x00	; 0
    5696:	40 e8       	ldi	r20, 0x80	; 128
    5698:	5f e3       	ldi	r21, 0x3F	; 63
    569a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    569e:	88 23       	and	r24, r24
    56a0:	2c f4       	brge	.+10     	; 0x56ac <KPAD_u8GetKeyPressed+0x19a>
		__ticks = 1;
    56a2:	81 e0       	ldi	r24, 0x01	; 1
    56a4:	90 e0       	ldi	r25, 0x00	; 0
    56a6:	9e 83       	std	Y+6, r25	; 0x06
    56a8:	8d 83       	std	Y+5, r24	; 0x05
    56aa:	3f c0       	rjmp	.+126    	; 0x572a <KPAD_u8GetKeyPressed+0x218>
	else if (__tmp > 65535)
    56ac:	6f 81       	ldd	r22, Y+7	; 0x07
    56ae:	78 85       	ldd	r23, Y+8	; 0x08
    56b0:	89 85       	ldd	r24, Y+9	; 0x09
    56b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56b4:	20 e0       	ldi	r18, 0x00	; 0
    56b6:	3f ef       	ldi	r19, 0xFF	; 255
    56b8:	4f e7       	ldi	r20, 0x7F	; 127
    56ba:	57 e4       	ldi	r21, 0x47	; 71
    56bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56c0:	18 16       	cp	r1, r24
    56c2:	4c f5       	brge	.+82     	; 0x5716 <KPAD_u8GetKeyPressed+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    56c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    56c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    56ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    56cc:	20 e0       	ldi	r18, 0x00	; 0
    56ce:	30 e0       	ldi	r19, 0x00	; 0
    56d0:	40 e2       	ldi	r20, 0x20	; 32
    56d2:	51 e4       	ldi	r21, 0x41	; 65
    56d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56d8:	dc 01       	movw	r26, r24
    56da:	cb 01       	movw	r24, r22
    56dc:	bc 01       	movw	r22, r24
    56de:	cd 01       	movw	r24, r26
    56e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56e4:	dc 01       	movw	r26, r24
    56e6:	cb 01       	movw	r24, r22
    56e8:	9e 83       	std	Y+6, r25	; 0x06
    56ea:	8d 83       	std	Y+5, r24	; 0x05
    56ec:	0f c0       	rjmp	.+30     	; 0x570c <KPAD_u8GetKeyPressed+0x1fa>
    56ee:	88 ec       	ldi	r24, 0xC8	; 200
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	9c 83       	std	Y+4, r25	; 0x04
    56f4:	8b 83       	std	Y+3, r24	; 0x03
    56f6:	8b 81       	ldd	r24, Y+3	; 0x03
    56f8:	9c 81       	ldd	r25, Y+4	; 0x04
    56fa:	01 97       	sbiw	r24, 0x01	; 1
    56fc:	f1 f7       	brne	.-4      	; 0x56fa <KPAD_u8GetKeyPressed+0x1e8>
    56fe:	9c 83       	std	Y+4, r25	; 0x04
    5700:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5702:	8d 81       	ldd	r24, Y+5	; 0x05
    5704:	9e 81       	ldd	r25, Y+6	; 0x06
    5706:	01 97       	sbiw	r24, 0x01	; 1
    5708:	9e 83       	std	Y+6, r25	; 0x06
    570a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    570c:	8d 81       	ldd	r24, Y+5	; 0x05
    570e:	9e 81       	ldd	r25, Y+6	; 0x06
    5710:	00 97       	sbiw	r24, 0x00	; 0
    5712:	69 f7       	brne	.-38     	; 0x56ee <KPAD_u8GetKeyPressed+0x1dc>
    5714:	14 c0       	rjmp	.+40     	; 0x573e <KPAD_u8GetKeyPressed+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5716:	6f 81       	ldd	r22, Y+7	; 0x07
    5718:	78 85       	ldd	r23, Y+8	; 0x08
    571a:	89 85       	ldd	r24, Y+9	; 0x09
    571c:	9a 85       	ldd	r25, Y+10	; 0x0a
    571e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5722:	dc 01       	movw	r26, r24
    5724:	cb 01       	movw	r24, r22
    5726:	9e 83       	std	Y+6, r25	; 0x06
    5728:	8d 83       	std	Y+5, r24	; 0x05
    572a:	8d 81       	ldd	r24, Y+5	; 0x05
    572c:	9e 81       	ldd	r25, Y+6	; 0x06
    572e:	9a 83       	std	Y+2, r25	; 0x02
    5730:	89 83       	std	Y+1, r24	; 0x01
    5732:	89 81       	ldd	r24, Y+1	; 0x01
    5734:	9a 81       	ldd	r25, Y+2	; 0x02
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	f1 f7       	brne	.-4      	; 0x5736 <KPAD_u8GetKeyPressed+0x224>
    573a:	9a 83       	std	Y+2, r25	; 0x02
    573c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				while(DIO_u8GetPinValue(KPAD_PORT,row_index)==0);
    573e:	80 e0       	ldi	r24, 0x00	; 0
    5740:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5742:	0e 94 90 15 	call	0x2b20	; 0x2b20 <DIO_u8GetPinValue>
    5746:	88 23       	and	r24, r24
    5748:	d1 f3       	breq	.-12     	; 0x573e <KPAD_u8GetKeyPressed+0x22c>

	for(u8 col_index=0;col_index<KPAD_NUM_COLS;col_index++)
	{

		DIO_voidSetPinValue(KPAD_PORT,col_index,DIO_LOW);
		for(u8 row_index=4;row_index<8;row_index++)
    574a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    574c:	8f 5f       	subi	r24, 0xFF	; 255
    574e:	8d 8f       	std	Y+29, r24	; 0x1d
    5750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5752:	88 30       	cpi	r24, 0x08	; 8
    5754:	08 f4       	brcc	.+2      	; 0x5758 <KPAD_u8GetKeyPressed+0x246>
    5756:	65 cf       	rjmp	.-310    	; 0x5622 <KPAD_u8GetKeyPressed+0x110>

			}


		}
		DIO_voidSetPinValue(KPAD_PORT,col_index,DIO_HIGH);
    5758:	80 e0       	ldi	r24, 0x00	; 0
    575a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    575c:	41 e0       	ldi	r20, 0x01	; 1
    575e:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
{

	_delay_ms(50);
	u8 Local_u8KeyPressed=NOT_Pressed;

	for(u8 col_index=0;col_index<KPAD_NUM_COLS;col_index++)
    5762:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5764:	8f 5f       	subi	r24, 0xFF	; 255
    5766:	8e 8f       	std	Y+30, r24	; 0x1e
    5768:	8e 8d       	ldd	r24, Y+30	; 0x1e
    576a:	84 30       	cpi	r24, 0x04	; 4
    576c:	08 f4       	brcc	.+2      	; 0x5770 <KPAD_u8GetKeyPressed+0x25e>
    576e:	51 cf       	rjmp	.-350    	; 0x5612 <KPAD_u8GetKeyPressed+0x100>
		DIO_voidSetPinValue(KPAD_PORT,col_index,DIO_HIGH);


	}

	return Local_u8KeyPressed;
    5770:	8f 8d       	ldd	r24, Y+31	; 0x1f

}
    5772:	6f 96       	adiw	r28, 0x1f	; 31
    5774:	0f b6       	in	r0, 0x3f	; 63
    5776:	f8 94       	cli
    5778:	de bf       	out	0x3e, r29	; 62
    577a:	0f be       	out	0x3f, r0	; 63
    577c:	cd bf       	out	0x3d, r28	; 61
    577e:	cf 91       	pop	r28
    5780:	df 91       	pop	r29
    5782:	08 95       	ret

00005784 <EEPROM_voidSendDataByte>:
#include "../EEPROM/EEPROM_config.h"
#include "../../MCAL/DIO/DIO_Interface.h"


void EEPROM_voidSendDataByte(u8 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    5784:	df 93       	push	r29
    5786:	cf 93       	push	r28
    5788:	cd b7       	in	r28, 0x3d	; 61
    578a:	de b7       	in	r29, 0x3e	; 62
    578c:	60 97       	sbiw	r28, 0x10	; 16
    578e:	0f b6       	in	r0, 0x3f	; 63
    5790:	f8 94       	cli
    5792:	de bf       	out	0x3e, r29	; 62
    5794:	0f be       	out	0x3f, r0	; 63
    5796:	cd bf       	out	0x3d, r28	; 61
    5798:	8f 87       	std	Y+15, r24	; 0x0f
    579a:	68 8b       	std	Y+16, r22	; 0x10

    /*Send Start Condition*/
    TWI_ErrorStatusSendStartConditionWithACK();
    579c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <TWI_ErrorStatusSendStartConditionWithACK>
    DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_HIGH);
    57a0:	82 e0       	ldi	r24, 0x02	; 2
    57a2:	62 e0       	ldi	r22, 0x02	; 2
    57a4:	41 e0       	ldi	r20, 0x01	; 1
    57a6:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    /*Send Slave Address With Write Request*/
    TWI_ErrorStatusSendSlaveAddressWithWriteACK(0b01010010);
    57aa:	82 e5       	ldi	r24, 0x52	; 82
    57ac:	0e 94 b1 0c 	call	0x1962	; 0x1962 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

    /*Send The Rest Of Byte Address (b7-b0)*/
    TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u16LocationAddress);
    57b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    57b2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <TWI_ErrorStatusMasterWriteDataByteWithACK>
    /*Send Data*/
    TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    57b6:	88 89       	ldd	r24, Y+16	; 0x10
    57b8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <TWI_ErrorStatusMasterWriteDataByteWithACK>

    /*Send Stop Condition*/
    TWI_voidStopCondition();
    57bc:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <TWI_voidStopCondition>
    57c0:	80 e0       	ldi	r24, 0x00	; 0
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	a0 ea       	ldi	r26, 0xA0	; 160
    57c6:	b1 e4       	ldi	r27, 0x41	; 65
    57c8:	8b 87       	std	Y+11, r24	; 0x0b
    57ca:	9c 87       	std	Y+12, r25	; 0x0c
    57cc:	ad 87       	std	Y+13, r26	; 0x0d
    57ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    57d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    57d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    57d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    57d8:	20 e0       	ldi	r18, 0x00	; 0
    57da:	30 e0       	ldi	r19, 0x00	; 0
    57dc:	4a ef       	ldi	r20, 0xFA	; 250
    57de:	54 e4       	ldi	r21, 0x44	; 68
    57e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e4:	dc 01       	movw	r26, r24
    57e6:	cb 01       	movw	r24, r22
    57e8:	8f 83       	std	Y+7, r24	; 0x07
    57ea:	98 87       	std	Y+8, r25	; 0x08
    57ec:	a9 87       	std	Y+9, r26	; 0x09
    57ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57f0:	6f 81       	ldd	r22, Y+7	; 0x07
    57f2:	78 85       	ldd	r23, Y+8	; 0x08
    57f4:	89 85       	ldd	r24, Y+9	; 0x09
    57f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57f8:	20 e0       	ldi	r18, 0x00	; 0
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	40 e8       	ldi	r20, 0x80	; 128
    57fe:	5f e3       	ldi	r21, 0x3F	; 63
    5800:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5804:	88 23       	and	r24, r24
    5806:	2c f4       	brge	.+10     	; 0x5812 <EEPROM_voidSendDataByte+0x8e>
		__ticks = 1;
    5808:	81 e0       	ldi	r24, 0x01	; 1
    580a:	90 e0       	ldi	r25, 0x00	; 0
    580c:	9e 83       	std	Y+6, r25	; 0x06
    580e:	8d 83       	std	Y+5, r24	; 0x05
    5810:	3f c0       	rjmp	.+126    	; 0x5890 <EEPROM_voidSendDataByte+0x10c>
	else if (__tmp > 65535)
    5812:	6f 81       	ldd	r22, Y+7	; 0x07
    5814:	78 85       	ldd	r23, Y+8	; 0x08
    5816:	89 85       	ldd	r24, Y+9	; 0x09
    5818:	9a 85       	ldd	r25, Y+10	; 0x0a
    581a:	20 e0       	ldi	r18, 0x00	; 0
    581c:	3f ef       	ldi	r19, 0xFF	; 255
    581e:	4f e7       	ldi	r20, 0x7F	; 127
    5820:	57 e4       	ldi	r21, 0x47	; 71
    5822:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5826:	18 16       	cp	r1, r24
    5828:	4c f5       	brge	.+82     	; 0x587c <EEPROM_voidSendDataByte+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    582a:	6b 85       	ldd	r22, Y+11	; 0x0b
    582c:	7c 85       	ldd	r23, Y+12	; 0x0c
    582e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5830:	9e 85       	ldd	r25, Y+14	; 0x0e
    5832:	20 e0       	ldi	r18, 0x00	; 0
    5834:	30 e0       	ldi	r19, 0x00	; 0
    5836:	40 e2       	ldi	r20, 0x20	; 32
    5838:	51 e4       	ldi	r21, 0x41	; 65
    583a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    583e:	dc 01       	movw	r26, r24
    5840:	cb 01       	movw	r24, r22
    5842:	bc 01       	movw	r22, r24
    5844:	cd 01       	movw	r24, r26
    5846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    584a:	dc 01       	movw	r26, r24
    584c:	cb 01       	movw	r24, r22
    584e:	9e 83       	std	Y+6, r25	; 0x06
    5850:	8d 83       	std	Y+5, r24	; 0x05
    5852:	0f c0       	rjmp	.+30     	; 0x5872 <EEPROM_voidSendDataByte+0xee>
    5854:	88 ec       	ldi	r24, 0xC8	; 200
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	9c 83       	std	Y+4, r25	; 0x04
    585a:	8b 83       	std	Y+3, r24	; 0x03
    585c:	8b 81       	ldd	r24, Y+3	; 0x03
    585e:	9c 81       	ldd	r25, Y+4	; 0x04
    5860:	01 97       	sbiw	r24, 0x01	; 1
    5862:	f1 f7       	brne	.-4      	; 0x5860 <EEPROM_voidSendDataByte+0xdc>
    5864:	9c 83       	std	Y+4, r25	; 0x04
    5866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5868:	8d 81       	ldd	r24, Y+5	; 0x05
    586a:	9e 81       	ldd	r25, Y+6	; 0x06
    586c:	01 97       	sbiw	r24, 0x01	; 1
    586e:	9e 83       	std	Y+6, r25	; 0x06
    5870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5872:	8d 81       	ldd	r24, Y+5	; 0x05
    5874:	9e 81       	ldd	r25, Y+6	; 0x06
    5876:	00 97       	sbiw	r24, 0x00	; 0
    5878:	69 f7       	brne	.-38     	; 0x5854 <EEPROM_voidSendDataByte+0xd0>
    587a:	14 c0       	rjmp	.+40     	; 0x58a4 <EEPROM_voidSendDataByte+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    587c:	6f 81       	ldd	r22, Y+7	; 0x07
    587e:	78 85       	ldd	r23, Y+8	; 0x08
    5880:	89 85       	ldd	r24, Y+9	; 0x09
    5882:	9a 85       	ldd	r25, Y+10	; 0x0a
    5884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5888:	dc 01       	movw	r26, r24
    588a:	cb 01       	movw	r24, r22
    588c:	9e 83       	std	Y+6, r25	; 0x06
    588e:	8d 83       	std	Y+5, r24	; 0x05
    5890:	8d 81       	ldd	r24, Y+5	; 0x05
    5892:	9e 81       	ldd	r25, Y+6	; 0x06
    5894:	9a 83       	std	Y+2, r25	; 0x02
    5896:	89 83       	std	Y+1, r24	; 0x01
    5898:	89 81       	ldd	r24, Y+1	; 0x01
    589a:	9a 81       	ldd	r25, Y+2	; 0x02
    589c:	01 97       	sbiw	r24, 0x01	; 1
    589e:	f1 f7       	brne	.-4      	; 0x589c <EEPROM_voidSendDataByte+0x118>
    58a0:	9a 83       	std	Y+2, r25	; 0x02
    58a2:	89 83       	std	Y+1, r24	; 0x01

    /*Delay for 5msec*/
    _delay_ms(20);
}
    58a4:	60 96       	adiw	r28, 0x10	; 16
    58a6:	0f b6       	in	r0, 0x3f	; 63
    58a8:	f8 94       	cli
    58aa:	de bf       	out	0x3e, r29	; 62
    58ac:	0f be       	out	0x3f, r0	; 63
    58ae:	cd bf       	out	0x3d, r28	; 61
    58b0:	cf 91       	pop	r28
    58b2:	df 91       	pop	r29
    58b4:	08 95       	ret

000058b6 <EEPROM_voidReadDataByte>:


void EEPROM_voidReadDataByte(u8 Copy_u16LocationAddress, u8 * Copy_pu8ReceivedData)
{
    58b6:	df 93       	push	r29
    58b8:	cf 93       	push	r28
    58ba:	00 d0       	rcall	.+0      	; 0x58bc <EEPROM_voidReadDataByte+0x6>
    58bc:	0f 92       	push	r0
    58be:	cd b7       	in	r28, 0x3d	; 61
    58c0:	de b7       	in	r29, 0x3e	; 62
    58c2:	89 83       	std	Y+1, r24	; 0x01
    58c4:	7b 83       	std	Y+3, r23	; 0x03
    58c6:	6a 83       	std	Y+2, r22	; 0x02

    /*Send Start Condition*/
    TWI_ErrorStatusSendStartConditionWithACK();
    58c8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <TWI_ErrorStatusSendStartConditionWithACK>
    /*Send Slave Address With Write Request*/
    TWI_ErrorStatusSendSlaveAddressWithWriteACK(0b01010010);
    58cc:	82 e5       	ldi	r24, 0x52	; 82
    58ce:	0e 94 b1 0c 	call	0x1962	; 0x1962 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>
    /*Send The Rest Of Byte Address (b7-b0)*/
    TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u16LocationAddress);
    58d2:	89 81       	ldd	r24, Y+1	; 0x01
    58d4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <TWI_ErrorStatusMasterWriteDataByteWithACK>
    /*Send Repeated Start Condition*/
    TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    58d8:	0e 94 87 0c 	call	0x190e	; 0x190e <TWI_ErrorStatusSendRepeatedStartConditionWithACK>
    /*Send Slave Address With Read Request*/
    TWI_ErrorStatusSendSlaveAddressWithReadACK(0b01010010);
    58dc:	82 e5       	ldi	r24, 0x52	; 82
    58de:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <TWI_ErrorStatusSendSlaveAddressWithReadACK>
    /*Read Data From The SDA Bus*/
    TWI_ErrorStatusMasterReadDataByteWithACK(Copy_pu8ReceivedData);
    58e2:	8a 81       	ldd	r24, Y+2	; 0x02
    58e4:	9b 81       	ldd	r25, Y+3	; 0x03
    58e6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <TWI_ErrorStatusMasterReadDataByteWithACK>
    /*Send Stop Condition*/
    TWI_voidStopCondition();
    58ea:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <TWI_voidStopCondition>
}
    58ee:	0f 90       	pop	r0
    58f0:	0f 90       	pop	r0
    58f2:	0f 90       	pop	r0
    58f4:	cf 91       	pop	r28
    58f6:	df 91       	pop	r29
    58f8:	08 95       	ret

000058fa <CLCD_voidInit>:
#include"CLCD_Config.h"
#include"CLCD_Private.h"
#include <util/delay.h>

void CLCD_voidInit()
{
    58fa:	0f 93       	push	r16
    58fc:	1f 93       	push	r17
    58fe:	df 93       	push	r29
    5900:	cf 93       	push	r28
    5902:	cd b7       	in	r28, 0x3d	; 61
    5904:	de b7       	in	r29, 0x3e	; 62
    5906:	cc 54       	subi	r28, 0x4C	; 76
    5908:	d0 40       	sbci	r29, 0x00	; 0
    590a:	0f b6       	in	r0, 0x3f	; 63
    590c:	f8 94       	cli
    590e:	de bf       	out	0x3e, r29	; 62
    5910:	0f be       	out	0x3f, r0	; 63
    5912:	cd bf       	out	0x3d, r28	; 61
	//DATA PORT ->OUTPUT
	DIO_voidSetPortDirection(CLCD_DATA_PORT,DIO_OUTPUT);
    5914:	80 e0       	ldi	r24, 0x00	; 0
    5916:	61 e0       	ldi	r22, 0x01	; 1
    5918:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <DIO_voidSetPortDirection>

	//RS-RW-EN -->OUTPUT

	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_RS,DIO_OUTPUT);
    591c:	83 e0       	ldi	r24, 0x03	; 3
    591e:	67 e0       	ldi	r22, 0x07	; 7
    5920:	41 e0       	ldi	r20, 0x01	; 1
    5922:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_RW,DIO_OUTPUT);
    5926:	83 e0       	ldi	r24, 0x03	; 3
    5928:	66 e0       	ldi	r22, 0x06	; 6
    592a:	41 e0       	ldi	r20, 0x01	; 1
    592c:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_E,DIO_OUTPUT);
    5930:	83 e0       	ldi	r24, 0x03	; 3
    5932:	63 e0       	ldi	r22, 0x03	; 3
    5934:	41 e0       	ldi	r20, 0x01	; 1
    5936:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_voidSetPinDirection>
    593a:	fe 01       	movw	r30, r28
    593c:	e7 5b       	subi	r30, 0xB7	; 183
    593e:	ff 4f       	sbci	r31, 0xFF	; 255
    5940:	80 e0       	ldi	r24, 0x00	; 0
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	a8 e4       	ldi	r26, 0x48	; 72
    5946:	b2 e4       	ldi	r27, 0x42	; 66
    5948:	80 83       	st	Z, r24
    594a:	91 83       	std	Z+1, r25	; 0x01
    594c:	a2 83       	std	Z+2, r26	; 0x02
    594e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5950:	8e 01       	movw	r16, r28
    5952:	0b 5b       	subi	r16, 0xBB	; 187
    5954:	1f 4f       	sbci	r17, 0xFF	; 255
    5956:	fe 01       	movw	r30, r28
    5958:	e7 5b       	subi	r30, 0xB7	; 183
    595a:	ff 4f       	sbci	r31, 0xFF	; 255
    595c:	60 81       	ld	r22, Z
    595e:	71 81       	ldd	r23, Z+1	; 0x01
    5960:	82 81       	ldd	r24, Z+2	; 0x02
    5962:	93 81       	ldd	r25, Z+3	; 0x03
    5964:	20 e0       	ldi	r18, 0x00	; 0
    5966:	30 e0       	ldi	r19, 0x00	; 0
    5968:	4a ef       	ldi	r20, 0xFA	; 250
    596a:	54 e4       	ldi	r21, 0x44	; 68
    596c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5970:	dc 01       	movw	r26, r24
    5972:	cb 01       	movw	r24, r22
    5974:	f8 01       	movw	r30, r16
    5976:	80 83       	st	Z, r24
    5978:	91 83       	std	Z+1, r25	; 0x01
    597a:	a2 83       	std	Z+2, r26	; 0x02
    597c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    597e:	fe 01       	movw	r30, r28
    5980:	eb 5b       	subi	r30, 0xBB	; 187
    5982:	ff 4f       	sbci	r31, 0xFF	; 255
    5984:	60 81       	ld	r22, Z
    5986:	71 81       	ldd	r23, Z+1	; 0x01
    5988:	82 81       	ldd	r24, Z+2	; 0x02
    598a:	93 81       	ldd	r25, Z+3	; 0x03
    598c:	20 e0       	ldi	r18, 0x00	; 0
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	40 e8       	ldi	r20, 0x80	; 128
    5992:	5f e3       	ldi	r21, 0x3F	; 63
    5994:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5998:	88 23       	and	r24, r24
    599a:	44 f4       	brge	.+16     	; 0x59ac <CLCD_voidInit+0xb2>
		__ticks = 1;
    599c:	fe 01       	movw	r30, r28
    599e:	ed 5b       	subi	r30, 0xBD	; 189
    59a0:	ff 4f       	sbci	r31, 0xFF	; 255
    59a2:	81 e0       	ldi	r24, 0x01	; 1
    59a4:	90 e0       	ldi	r25, 0x00	; 0
    59a6:	91 83       	std	Z+1, r25	; 0x01
    59a8:	80 83       	st	Z, r24
    59aa:	64 c0       	rjmp	.+200    	; 0x5a74 <CLCD_voidInit+0x17a>
	else if (__tmp > 65535)
    59ac:	fe 01       	movw	r30, r28
    59ae:	eb 5b       	subi	r30, 0xBB	; 187
    59b0:	ff 4f       	sbci	r31, 0xFF	; 255
    59b2:	60 81       	ld	r22, Z
    59b4:	71 81       	ldd	r23, Z+1	; 0x01
    59b6:	82 81       	ldd	r24, Z+2	; 0x02
    59b8:	93 81       	ldd	r25, Z+3	; 0x03
    59ba:	20 e0       	ldi	r18, 0x00	; 0
    59bc:	3f ef       	ldi	r19, 0xFF	; 255
    59be:	4f e7       	ldi	r20, 0x7F	; 127
    59c0:	57 e4       	ldi	r21, 0x47	; 71
    59c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59c6:	18 16       	cp	r1, r24
    59c8:	0c f0       	brlt	.+2      	; 0x59cc <CLCD_voidInit+0xd2>
    59ca:	43 c0       	rjmp	.+134    	; 0x5a52 <CLCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59cc:	fe 01       	movw	r30, r28
    59ce:	e7 5b       	subi	r30, 0xB7	; 183
    59d0:	ff 4f       	sbci	r31, 0xFF	; 255
    59d2:	60 81       	ld	r22, Z
    59d4:	71 81       	ldd	r23, Z+1	; 0x01
    59d6:	82 81       	ldd	r24, Z+2	; 0x02
    59d8:	93 81       	ldd	r25, Z+3	; 0x03
    59da:	20 e0       	ldi	r18, 0x00	; 0
    59dc:	30 e0       	ldi	r19, 0x00	; 0
    59de:	40 e2       	ldi	r20, 0x20	; 32
    59e0:	51 e4       	ldi	r21, 0x41	; 65
    59e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59e6:	dc 01       	movw	r26, r24
    59e8:	cb 01       	movw	r24, r22
    59ea:	8e 01       	movw	r16, r28
    59ec:	0d 5b       	subi	r16, 0xBD	; 189
    59ee:	1f 4f       	sbci	r17, 0xFF	; 255
    59f0:	bc 01       	movw	r22, r24
    59f2:	cd 01       	movw	r24, r26
    59f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59f8:	dc 01       	movw	r26, r24
    59fa:	cb 01       	movw	r24, r22
    59fc:	f8 01       	movw	r30, r16
    59fe:	91 83       	std	Z+1, r25	; 0x01
    5a00:	80 83       	st	Z, r24
    5a02:	1f c0       	rjmp	.+62     	; 0x5a42 <CLCD_voidInit+0x148>
    5a04:	fe 01       	movw	r30, r28
    5a06:	ef 5b       	subi	r30, 0xBF	; 191
    5a08:	ff 4f       	sbci	r31, 0xFF	; 255
    5a0a:	88 ec       	ldi	r24, 0xC8	; 200
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
    5a0e:	91 83       	std	Z+1, r25	; 0x01
    5a10:	80 83       	st	Z, r24
    5a12:	fe 01       	movw	r30, r28
    5a14:	ef 5b       	subi	r30, 0xBF	; 191
    5a16:	ff 4f       	sbci	r31, 0xFF	; 255
    5a18:	80 81       	ld	r24, Z
    5a1a:	91 81       	ldd	r25, Z+1	; 0x01
    5a1c:	01 97       	sbiw	r24, 0x01	; 1
    5a1e:	f1 f7       	brne	.-4      	; 0x5a1c <CLCD_voidInit+0x122>
    5a20:	fe 01       	movw	r30, r28
    5a22:	ef 5b       	subi	r30, 0xBF	; 191
    5a24:	ff 4f       	sbci	r31, 0xFF	; 255
    5a26:	91 83       	std	Z+1, r25	; 0x01
    5a28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a2a:	de 01       	movw	r26, r28
    5a2c:	ad 5b       	subi	r26, 0xBD	; 189
    5a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    5a30:	fe 01       	movw	r30, r28
    5a32:	ed 5b       	subi	r30, 0xBD	; 189
    5a34:	ff 4f       	sbci	r31, 0xFF	; 255
    5a36:	80 81       	ld	r24, Z
    5a38:	91 81       	ldd	r25, Z+1	; 0x01
    5a3a:	01 97       	sbiw	r24, 0x01	; 1
    5a3c:	11 96       	adiw	r26, 0x01	; 1
    5a3e:	9c 93       	st	X, r25
    5a40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a42:	fe 01       	movw	r30, r28
    5a44:	ed 5b       	subi	r30, 0xBD	; 189
    5a46:	ff 4f       	sbci	r31, 0xFF	; 255
    5a48:	80 81       	ld	r24, Z
    5a4a:	91 81       	ldd	r25, Z+1	; 0x01
    5a4c:	00 97       	sbiw	r24, 0x00	; 0
    5a4e:	d1 f6       	brne	.-76     	; 0x5a04 <CLCD_voidInit+0x10a>
    5a50:	24 c0       	rjmp	.+72     	; 0x5a9a <CLCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a52:	8e 01       	movw	r16, r28
    5a54:	0d 5b       	subi	r16, 0xBD	; 189
    5a56:	1f 4f       	sbci	r17, 0xFF	; 255
    5a58:	fe 01       	movw	r30, r28
    5a5a:	eb 5b       	subi	r30, 0xBB	; 187
    5a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5e:	60 81       	ld	r22, Z
    5a60:	71 81       	ldd	r23, Z+1	; 0x01
    5a62:	82 81       	ldd	r24, Z+2	; 0x02
    5a64:	93 81       	ldd	r25, Z+3	; 0x03
    5a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a6a:	dc 01       	movw	r26, r24
    5a6c:	cb 01       	movw	r24, r22
    5a6e:	f8 01       	movw	r30, r16
    5a70:	91 83       	std	Z+1, r25	; 0x01
    5a72:	80 83       	st	Z, r24
    5a74:	fe 01       	movw	r30, r28
    5a76:	ed 5b       	subi	r30, 0xBD	; 189
    5a78:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7a:	80 81       	ld	r24, Z
    5a7c:	91 81       	ldd	r25, Z+1	; 0x01
    5a7e:	fe 01       	movw	r30, r28
    5a80:	ff 96       	adiw	r30, 0x3f	; 63
    5a82:	91 83       	std	Z+1, r25	; 0x01
    5a84:	80 83       	st	Z, r24
    5a86:	fe 01       	movw	r30, r28
    5a88:	ff 96       	adiw	r30, 0x3f	; 63
    5a8a:	80 81       	ld	r24, Z
    5a8c:	91 81       	ldd	r25, Z+1	; 0x01
    5a8e:	01 97       	sbiw	r24, 0x01	; 1
    5a90:	f1 f7       	brne	.-4      	; 0x5a8e <CLCD_voidInit+0x194>
    5a92:	fe 01       	movw	r30, r28
    5a94:	ff 96       	adiw	r30, 0x3f	; 63
    5a96:	91 83       	std	Z+1, r25	; 0x01
    5a98:	80 83       	st	Z, r24

	//Initialization Sequence:
	_delay_ms(50);

	//Function Set
	CLCD_voidSendCommand(0b00111000);
    5a9a:	88 e3       	ldi	r24, 0x38	; 56
    5a9c:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <CLCD_voidSendCommand>
    5aa0:	80 e0       	ldi	r24, 0x00	; 0
    5aa2:	90 e0       	ldi	r25, 0x00	; 0
    5aa4:	a8 e4       	ldi	r26, 0x48	; 72
    5aa6:	b2 e4       	ldi	r27, 0x42	; 66
    5aa8:	8b af       	std	Y+59, r24	; 0x3b
    5aaa:	9c af       	std	Y+60, r25	; 0x3c
    5aac:	ad af       	std	Y+61, r26	; 0x3d
    5aae:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5ab0:	6b ad       	ldd	r22, Y+59	; 0x3b
    5ab2:	7c ad       	ldd	r23, Y+60	; 0x3c
    5ab4:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ab6:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ab8:	2b ea       	ldi	r18, 0xAB	; 171
    5aba:	3a ea       	ldi	r19, 0xAA	; 170
    5abc:	4a e2       	ldi	r20, 0x2A	; 42
    5abe:	50 e4       	ldi	r21, 0x40	; 64
    5ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ac4:	dc 01       	movw	r26, r24
    5ac6:	cb 01       	movw	r24, r22
    5ac8:	8f ab       	std	Y+55, r24	; 0x37
    5aca:	98 af       	std	Y+56, r25	; 0x38
    5acc:	a9 af       	std	Y+57, r26	; 0x39
    5ace:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    5ad0:	6f a9       	ldd	r22, Y+55	; 0x37
    5ad2:	78 ad       	ldd	r23, Y+56	; 0x38
    5ad4:	89 ad       	ldd	r24, Y+57	; 0x39
    5ad6:	9a ad       	ldd	r25, Y+58	; 0x3a
    5ad8:	20 e0       	ldi	r18, 0x00	; 0
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	40 e8       	ldi	r20, 0x80	; 128
    5ade:	5f e3       	ldi	r21, 0x3F	; 63
    5ae0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ae4:	88 23       	and	r24, r24
    5ae6:	1c f4       	brge	.+6      	; 0x5aee <CLCD_voidInit+0x1f4>
		__ticks = 1;
    5ae8:	81 e0       	ldi	r24, 0x01	; 1
    5aea:	8e ab       	std	Y+54, r24	; 0x36
    5aec:	91 c0       	rjmp	.+290    	; 0x5c10 <CLCD_voidInit+0x316>
	else if (__tmp > 255)
    5aee:	6f a9       	ldd	r22, Y+55	; 0x37
    5af0:	78 ad       	ldd	r23, Y+56	; 0x38
    5af2:	89 ad       	ldd	r24, Y+57	; 0x39
    5af4:	9a ad       	ldd	r25, Y+58	; 0x3a
    5af6:	20 e0       	ldi	r18, 0x00	; 0
    5af8:	30 e0       	ldi	r19, 0x00	; 0
    5afa:	4f e7       	ldi	r20, 0x7F	; 127
    5afc:	53 e4       	ldi	r21, 0x43	; 67
    5afe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b02:	18 16       	cp	r1, r24
    5b04:	0c f0       	brlt	.+2      	; 0x5b08 <CLCD_voidInit+0x20e>
    5b06:	7b c0       	rjmp	.+246    	; 0x5bfe <CLCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    5b08:	6b ad       	ldd	r22, Y+59	; 0x3b
    5b0a:	7c ad       	ldd	r23, Y+60	; 0x3c
    5b0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b10:	20 e0       	ldi	r18, 0x00	; 0
    5b12:	30 e0       	ldi	r19, 0x00	; 0
    5b14:	4a e7       	ldi	r20, 0x7A	; 122
    5b16:	54 e4       	ldi	r21, 0x44	; 68
    5b18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5b1c:	dc 01       	movw	r26, r24
    5b1e:	cb 01       	movw	r24, r22
    5b20:	8a ab       	std	Y+50, r24	; 0x32
    5b22:	9b ab       	std	Y+51, r25	; 0x33
    5b24:	ac ab       	std	Y+52, r26	; 0x34
    5b26:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b28:	6a a9       	ldd	r22, Y+50	; 0x32
    5b2a:	7b a9       	ldd	r23, Y+51	; 0x33
    5b2c:	8c a9       	ldd	r24, Y+52	; 0x34
    5b2e:	9d a9       	ldd	r25, Y+53	; 0x35
    5b30:	20 e0       	ldi	r18, 0x00	; 0
    5b32:	30 e0       	ldi	r19, 0x00	; 0
    5b34:	4a ef       	ldi	r20, 0xFA	; 250
    5b36:	54 e4       	ldi	r21, 0x44	; 68
    5b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b3c:	dc 01       	movw	r26, r24
    5b3e:	cb 01       	movw	r24, r22
    5b40:	8e a7       	std	Y+46, r24	; 0x2e
    5b42:	9f a7       	std	Y+47, r25	; 0x2f
    5b44:	a8 ab       	std	Y+48, r26	; 0x30
    5b46:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    5b48:	6e a5       	ldd	r22, Y+46	; 0x2e
    5b4a:	7f a5       	ldd	r23, Y+47	; 0x2f
    5b4c:	88 a9       	ldd	r24, Y+48	; 0x30
    5b4e:	99 a9       	ldd	r25, Y+49	; 0x31
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	30 e0       	ldi	r19, 0x00	; 0
    5b54:	40 e8       	ldi	r20, 0x80	; 128
    5b56:	5f e3       	ldi	r21, 0x3F	; 63
    5b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b5c:	88 23       	and	r24, r24
    5b5e:	2c f4       	brge	.+10     	; 0x5b6a <CLCD_voidInit+0x270>
		__ticks = 1;
    5b60:	81 e0       	ldi	r24, 0x01	; 1
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	9d a7       	std	Y+45, r25	; 0x2d
    5b66:	8c a7       	std	Y+44, r24	; 0x2c
    5b68:	3f c0       	rjmp	.+126    	; 0x5be8 <CLCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    5b6a:	6e a5       	ldd	r22, Y+46	; 0x2e
    5b6c:	7f a5       	ldd	r23, Y+47	; 0x2f
    5b6e:	88 a9       	ldd	r24, Y+48	; 0x30
    5b70:	99 a9       	ldd	r25, Y+49	; 0x31
    5b72:	20 e0       	ldi	r18, 0x00	; 0
    5b74:	3f ef       	ldi	r19, 0xFF	; 255
    5b76:	4f e7       	ldi	r20, 0x7F	; 127
    5b78:	57 e4       	ldi	r21, 0x47	; 71
    5b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b7e:	18 16       	cp	r1, r24
    5b80:	4c f5       	brge	.+82     	; 0x5bd4 <CLCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b82:	6a a9       	ldd	r22, Y+50	; 0x32
    5b84:	7b a9       	ldd	r23, Y+51	; 0x33
    5b86:	8c a9       	ldd	r24, Y+52	; 0x34
    5b88:	9d a9       	ldd	r25, Y+53	; 0x35
    5b8a:	20 e0       	ldi	r18, 0x00	; 0
    5b8c:	30 e0       	ldi	r19, 0x00	; 0
    5b8e:	40 e2       	ldi	r20, 0x20	; 32
    5b90:	51 e4       	ldi	r21, 0x41	; 65
    5b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b96:	dc 01       	movw	r26, r24
    5b98:	cb 01       	movw	r24, r22
    5b9a:	bc 01       	movw	r22, r24
    5b9c:	cd 01       	movw	r24, r26
    5b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ba2:	dc 01       	movw	r26, r24
    5ba4:	cb 01       	movw	r24, r22
    5ba6:	9d a7       	std	Y+45, r25	; 0x2d
    5ba8:	8c a7       	std	Y+44, r24	; 0x2c
    5baa:	0f c0       	rjmp	.+30     	; 0x5bca <CLCD_voidInit+0x2d0>
    5bac:	88 ec       	ldi	r24, 0xC8	; 200
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	9b a7       	std	Y+43, r25	; 0x2b
    5bb2:	8a a7       	std	Y+42, r24	; 0x2a
    5bb4:	8a a5       	ldd	r24, Y+42	; 0x2a
    5bb6:	9b a5       	ldd	r25, Y+43	; 0x2b
    5bb8:	01 97       	sbiw	r24, 0x01	; 1
    5bba:	f1 f7       	brne	.-4      	; 0x5bb8 <CLCD_voidInit+0x2be>
    5bbc:	9b a7       	std	Y+43, r25	; 0x2b
    5bbe:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bc0:	8c a5       	ldd	r24, Y+44	; 0x2c
    5bc2:	9d a5       	ldd	r25, Y+45	; 0x2d
    5bc4:	01 97       	sbiw	r24, 0x01	; 1
    5bc6:	9d a7       	std	Y+45, r25	; 0x2d
    5bc8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bca:	8c a5       	ldd	r24, Y+44	; 0x2c
    5bcc:	9d a5       	ldd	r25, Y+45	; 0x2d
    5bce:	00 97       	sbiw	r24, 0x00	; 0
    5bd0:	69 f7       	brne	.-38     	; 0x5bac <CLCD_voidInit+0x2b2>
    5bd2:	24 c0       	rjmp	.+72     	; 0x5c1c <CLCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bd4:	6e a5       	ldd	r22, Y+46	; 0x2e
    5bd6:	7f a5       	ldd	r23, Y+47	; 0x2f
    5bd8:	88 a9       	ldd	r24, Y+48	; 0x30
    5bda:	99 a9       	ldd	r25, Y+49	; 0x31
    5bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5be0:	dc 01       	movw	r26, r24
    5be2:	cb 01       	movw	r24, r22
    5be4:	9d a7       	std	Y+45, r25	; 0x2d
    5be6:	8c a7       	std	Y+44, r24	; 0x2c
    5be8:	8c a5       	ldd	r24, Y+44	; 0x2c
    5bea:	9d a5       	ldd	r25, Y+45	; 0x2d
    5bec:	99 a7       	std	Y+41, r25	; 0x29
    5bee:	88 a7       	std	Y+40, r24	; 0x28
    5bf0:	88 a5       	ldd	r24, Y+40	; 0x28
    5bf2:	99 a5       	ldd	r25, Y+41	; 0x29
    5bf4:	01 97       	sbiw	r24, 0x01	; 1
    5bf6:	f1 f7       	brne	.-4      	; 0x5bf4 <CLCD_voidInit+0x2fa>
    5bf8:	99 a7       	std	Y+41, r25	; 0x29
    5bfa:	88 a7       	std	Y+40, r24	; 0x28
    5bfc:	0f c0       	rjmp	.+30     	; 0x5c1c <CLCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5bfe:	6f a9       	ldd	r22, Y+55	; 0x37
    5c00:	78 ad       	ldd	r23, Y+56	; 0x38
    5c02:	89 ad       	ldd	r24, Y+57	; 0x39
    5c04:	9a ad       	ldd	r25, Y+58	; 0x3a
    5c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c0a:	dc 01       	movw	r26, r24
    5c0c:	cb 01       	movw	r24, r22
    5c0e:	8e ab       	std	Y+54, r24	; 0x36
    5c10:	8e a9       	ldd	r24, Y+54	; 0x36
    5c12:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5c14:	8f a1       	ldd	r24, Y+39	; 0x27
    5c16:	8a 95       	dec	r24
    5c18:	f1 f7       	brne	.-4      	; 0x5c16 <CLCD_voidInit+0x31c>
    5c1a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);


	//Display ON/OFF
	CLCD_voidSendCommand(0b00001110);
    5c1c:	8e e0       	ldi	r24, 0x0E	; 14
    5c1e:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <CLCD_voidSendCommand>
    5c22:	80 e0       	ldi	r24, 0x00	; 0
    5c24:	90 e0       	ldi	r25, 0x00	; 0
    5c26:	a8 e4       	ldi	r26, 0x48	; 72
    5c28:	b2 e4       	ldi	r27, 0x42	; 66
    5c2a:	8b a3       	std	Y+35, r24	; 0x23
    5c2c:	9c a3       	std	Y+36, r25	; 0x24
    5c2e:	ad a3       	std	Y+37, r26	; 0x25
    5c30:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5c32:	6b a1       	ldd	r22, Y+35	; 0x23
    5c34:	7c a1       	ldd	r23, Y+36	; 0x24
    5c36:	8d a1       	ldd	r24, Y+37	; 0x25
    5c38:	9e a1       	ldd	r25, Y+38	; 0x26
    5c3a:	2b ea       	ldi	r18, 0xAB	; 171
    5c3c:	3a ea       	ldi	r19, 0xAA	; 170
    5c3e:	4a e2       	ldi	r20, 0x2A	; 42
    5c40:	50 e4       	ldi	r21, 0x40	; 64
    5c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c46:	dc 01       	movw	r26, r24
    5c48:	cb 01       	movw	r24, r22
    5c4a:	8f 8f       	std	Y+31, r24	; 0x1f
    5c4c:	98 a3       	std	Y+32, r25	; 0x20
    5c4e:	a9 a3       	std	Y+33, r26	; 0x21
    5c50:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    5c52:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5c54:	78 a1       	ldd	r23, Y+32	; 0x20
    5c56:	89 a1       	ldd	r24, Y+33	; 0x21
    5c58:	9a a1       	ldd	r25, Y+34	; 0x22
    5c5a:	20 e0       	ldi	r18, 0x00	; 0
    5c5c:	30 e0       	ldi	r19, 0x00	; 0
    5c5e:	40 e8       	ldi	r20, 0x80	; 128
    5c60:	5f e3       	ldi	r21, 0x3F	; 63
    5c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c66:	88 23       	and	r24, r24
    5c68:	1c f4       	brge	.+6      	; 0x5c70 <CLCD_voidInit+0x376>
		__ticks = 1;
    5c6a:	81 e0       	ldi	r24, 0x01	; 1
    5c6c:	8e 8f       	std	Y+30, r24	; 0x1e
    5c6e:	91 c0       	rjmp	.+290    	; 0x5d92 <CLCD_voidInit+0x498>
	else if (__tmp > 255)
    5c70:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5c72:	78 a1       	ldd	r23, Y+32	; 0x20
    5c74:	89 a1       	ldd	r24, Y+33	; 0x21
    5c76:	9a a1       	ldd	r25, Y+34	; 0x22
    5c78:	20 e0       	ldi	r18, 0x00	; 0
    5c7a:	30 e0       	ldi	r19, 0x00	; 0
    5c7c:	4f e7       	ldi	r20, 0x7F	; 127
    5c7e:	53 e4       	ldi	r21, 0x43	; 67
    5c80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c84:	18 16       	cp	r1, r24
    5c86:	0c f0       	brlt	.+2      	; 0x5c8a <CLCD_voidInit+0x390>
    5c88:	7b c0       	rjmp	.+246    	; 0x5d80 <CLCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    5c8a:	6b a1       	ldd	r22, Y+35	; 0x23
    5c8c:	7c a1       	ldd	r23, Y+36	; 0x24
    5c8e:	8d a1       	ldd	r24, Y+37	; 0x25
    5c90:	9e a1       	ldd	r25, Y+38	; 0x26
    5c92:	20 e0       	ldi	r18, 0x00	; 0
    5c94:	30 e0       	ldi	r19, 0x00	; 0
    5c96:	4a e7       	ldi	r20, 0x7A	; 122
    5c98:	54 e4       	ldi	r21, 0x44	; 68
    5c9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5c9e:	dc 01       	movw	r26, r24
    5ca0:	cb 01       	movw	r24, r22
    5ca2:	8a 8f       	std	Y+26, r24	; 0x1a
    5ca4:	9b 8f       	std	Y+27, r25	; 0x1b
    5ca6:	ac 8f       	std	Y+28, r26	; 0x1c
    5ca8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5caa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5cac:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5cae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5cb0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	30 e0       	ldi	r19, 0x00	; 0
    5cb6:	4a ef       	ldi	r20, 0xFA	; 250
    5cb8:	54 e4       	ldi	r21, 0x44	; 68
    5cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cbe:	dc 01       	movw	r26, r24
    5cc0:	cb 01       	movw	r24, r22
    5cc2:	8e 8b       	std	Y+22, r24	; 0x16
    5cc4:	9f 8b       	std	Y+23, r25	; 0x17
    5cc6:	a8 8f       	std	Y+24, r26	; 0x18
    5cc8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    5cca:	6e 89       	ldd	r22, Y+22	; 0x16
    5ccc:	7f 89       	ldd	r23, Y+23	; 0x17
    5cce:	88 8d       	ldd	r24, Y+24	; 0x18
    5cd0:	99 8d       	ldd	r25, Y+25	; 0x19
    5cd2:	20 e0       	ldi	r18, 0x00	; 0
    5cd4:	30 e0       	ldi	r19, 0x00	; 0
    5cd6:	40 e8       	ldi	r20, 0x80	; 128
    5cd8:	5f e3       	ldi	r21, 0x3F	; 63
    5cda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cde:	88 23       	and	r24, r24
    5ce0:	2c f4       	brge	.+10     	; 0x5cec <CLCD_voidInit+0x3f2>
		__ticks = 1;
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	90 e0       	ldi	r25, 0x00	; 0
    5ce6:	9d 8b       	std	Y+21, r25	; 0x15
    5ce8:	8c 8b       	std	Y+20, r24	; 0x14
    5cea:	3f c0       	rjmp	.+126    	; 0x5d6a <CLCD_voidInit+0x470>
	else if (__tmp > 65535)
    5cec:	6e 89       	ldd	r22, Y+22	; 0x16
    5cee:	7f 89       	ldd	r23, Y+23	; 0x17
    5cf0:	88 8d       	ldd	r24, Y+24	; 0x18
    5cf2:	99 8d       	ldd	r25, Y+25	; 0x19
    5cf4:	20 e0       	ldi	r18, 0x00	; 0
    5cf6:	3f ef       	ldi	r19, 0xFF	; 255
    5cf8:	4f e7       	ldi	r20, 0x7F	; 127
    5cfa:	57 e4       	ldi	r21, 0x47	; 71
    5cfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d00:	18 16       	cp	r1, r24
    5d02:	4c f5       	brge	.+82     	; 0x5d56 <CLCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d04:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5d06:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5d08:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5d0a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5d0c:	20 e0       	ldi	r18, 0x00	; 0
    5d0e:	30 e0       	ldi	r19, 0x00	; 0
    5d10:	40 e2       	ldi	r20, 0x20	; 32
    5d12:	51 e4       	ldi	r21, 0x41	; 65
    5d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d18:	dc 01       	movw	r26, r24
    5d1a:	cb 01       	movw	r24, r22
    5d1c:	bc 01       	movw	r22, r24
    5d1e:	cd 01       	movw	r24, r26
    5d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d24:	dc 01       	movw	r26, r24
    5d26:	cb 01       	movw	r24, r22
    5d28:	9d 8b       	std	Y+21, r25	; 0x15
    5d2a:	8c 8b       	std	Y+20, r24	; 0x14
    5d2c:	0f c0       	rjmp	.+30     	; 0x5d4c <CLCD_voidInit+0x452>
    5d2e:	88 ec       	ldi	r24, 0xC8	; 200
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	9b 8b       	std	Y+19, r25	; 0x13
    5d34:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5d36:	8a 89       	ldd	r24, Y+18	; 0x12
    5d38:	9b 89       	ldd	r25, Y+19	; 0x13
    5d3a:	01 97       	sbiw	r24, 0x01	; 1
    5d3c:	f1 f7       	brne	.-4      	; 0x5d3a <CLCD_voidInit+0x440>
    5d3e:	9b 8b       	std	Y+19, r25	; 0x13
    5d40:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d42:	8c 89       	ldd	r24, Y+20	; 0x14
    5d44:	9d 89       	ldd	r25, Y+21	; 0x15
    5d46:	01 97       	sbiw	r24, 0x01	; 1
    5d48:	9d 8b       	std	Y+21, r25	; 0x15
    5d4a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d4c:	8c 89       	ldd	r24, Y+20	; 0x14
    5d4e:	9d 89       	ldd	r25, Y+21	; 0x15
    5d50:	00 97       	sbiw	r24, 0x00	; 0
    5d52:	69 f7       	brne	.-38     	; 0x5d2e <CLCD_voidInit+0x434>
    5d54:	24 c0       	rjmp	.+72     	; 0x5d9e <CLCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d56:	6e 89       	ldd	r22, Y+22	; 0x16
    5d58:	7f 89       	ldd	r23, Y+23	; 0x17
    5d5a:	88 8d       	ldd	r24, Y+24	; 0x18
    5d5c:	99 8d       	ldd	r25, Y+25	; 0x19
    5d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d62:	dc 01       	movw	r26, r24
    5d64:	cb 01       	movw	r24, r22
    5d66:	9d 8b       	std	Y+21, r25	; 0x15
    5d68:	8c 8b       	std	Y+20, r24	; 0x14
    5d6a:	8c 89       	ldd	r24, Y+20	; 0x14
    5d6c:	9d 89       	ldd	r25, Y+21	; 0x15
    5d6e:	99 8b       	std	Y+17, r25	; 0x11
    5d70:	88 8b       	std	Y+16, r24	; 0x10
    5d72:	88 89       	ldd	r24, Y+16	; 0x10
    5d74:	99 89       	ldd	r25, Y+17	; 0x11
    5d76:	01 97       	sbiw	r24, 0x01	; 1
    5d78:	f1 f7       	brne	.-4      	; 0x5d76 <CLCD_voidInit+0x47c>
    5d7a:	99 8b       	std	Y+17, r25	; 0x11
    5d7c:	88 8b       	std	Y+16, r24	; 0x10
    5d7e:	0f c0       	rjmp	.+30     	; 0x5d9e <CLCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5d80:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5d82:	78 a1       	ldd	r23, Y+32	; 0x20
    5d84:	89 a1       	ldd	r24, Y+33	; 0x21
    5d86:	9a a1       	ldd	r25, Y+34	; 0x22
    5d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d8c:	dc 01       	movw	r26, r24
    5d8e:	cb 01       	movw	r24, r22
    5d90:	8e 8f       	std	Y+30, r24	; 0x1e
    5d92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d94:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5d96:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d98:	8a 95       	dec	r24
    5d9a:	f1 f7       	brne	.-4      	; 0x5d98 <CLCD_voidInit+0x49e>
    5d9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);

	//Display Clear
	CLCD_voidSendCommand(0x01);
    5d9e:	81 e0       	ldi	r24, 0x01	; 1
    5da0:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <CLCD_voidSendCommand>
    5da4:	80 e0       	ldi	r24, 0x00	; 0
    5da6:	90 e0       	ldi	r25, 0x00	; 0
    5da8:	a0 e0       	ldi	r26, 0x00	; 0
    5daa:	b0 e4       	ldi	r27, 0x40	; 64
    5dac:	8b 87       	std	Y+11, r24	; 0x0b
    5dae:	9c 87       	std	Y+12, r25	; 0x0c
    5db0:	ad 87       	std	Y+13, r26	; 0x0d
    5db2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    5dbc:	20 e0       	ldi	r18, 0x00	; 0
    5dbe:	30 e0       	ldi	r19, 0x00	; 0
    5dc0:	4a ef       	ldi	r20, 0xFA	; 250
    5dc2:	54 e4       	ldi	r21, 0x44	; 68
    5dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dc8:	dc 01       	movw	r26, r24
    5dca:	cb 01       	movw	r24, r22
    5dcc:	8f 83       	std	Y+7, r24	; 0x07
    5dce:	98 87       	std	Y+8, r25	; 0x08
    5dd0:	a9 87       	std	Y+9, r26	; 0x09
    5dd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    5dd6:	78 85       	ldd	r23, Y+8	; 0x08
    5dd8:	89 85       	ldd	r24, Y+9	; 0x09
    5dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ddc:	20 e0       	ldi	r18, 0x00	; 0
    5dde:	30 e0       	ldi	r19, 0x00	; 0
    5de0:	40 e8       	ldi	r20, 0x80	; 128
    5de2:	5f e3       	ldi	r21, 0x3F	; 63
    5de4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5de8:	88 23       	and	r24, r24
    5dea:	2c f4       	brge	.+10     	; 0x5df6 <CLCD_voidInit+0x4fc>
		__ticks = 1;
    5dec:	81 e0       	ldi	r24, 0x01	; 1
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	9e 83       	std	Y+6, r25	; 0x06
    5df2:	8d 83       	std	Y+5, r24	; 0x05
    5df4:	3f c0       	rjmp	.+126    	; 0x5e74 <CLCD_voidInit+0x57a>
	else if (__tmp > 65535)
    5df6:	6f 81       	ldd	r22, Y+7	; 0x07
    5df8:	78 85       	ldd	r23, Y+8	; 0x08
    5dfa:	89 85       	ldd	r24, Y+9	; 0x09
    5dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dfe:	20 e0       	ldi	r18, 0x00	; 0
    5e00:	3f ef       	ldi	r19, 0xFF	; 255
    5e02:	4f e7       	ldi	r20, 0x7F	; 127
    5e04:	57 e4       	ldi	r21, 0x47	; 71
    5e06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e0a:	18 16       	cp	r1, r24
    5e0c:	4c f5       	brge	.+82     	; 0x5e60 <CLCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e10:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e16:	20 e0       	ldi	r18, 0x00	; 0
    5e18:	30 e0       	ldi	r19, 0x00	; 0
    5e1a:	40 e2       	ldi	r20, 0x20	; 32
    5e1c:	51 e4       	ldi	r21, 0x41	; 65
    5e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e22:	dc 01       	movw	r26, r24
    5e24:	cb 01       	movw	r24, r22
    5e26:	bc 01       	movw	r22, r24
    5e28:	cd 01       	movw	r24, r26
    5e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e2e:	dc 01       	movw	r26, r24
    5e30:	cb 01       	movw	r24, r22
    5e32:	9e 83       	std	Y+6, r25	; 0x06
    5e34:	8d 83       	std	Y+5, r24	; 0x05
    5e36:	0f c0       	rjmp	.+30     	; 0x5e56 <CLCD_voidInit+0x55c>
    5e38:	88 ec       	ldi	r24, 0xC8	; 200
    5e3a:	90 e0       	ldi	r25, 0x00	; 0
    5e3c:	9c 83       	std	Y+4, r25	; 0x04
    5e3e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5e40:	8b 81       	ldd	r24, Y+3	; 0x03
    5e42:	9c 81       	ldd	r25, Y+4	; 0x04
    5e44:	01 97       	sbiw	r24, 0x01	; 1
    5e46:	f1 f7       	brne	.-4      	; 0x5e44 <CLCD_voidInit+0x54a>
    5e48:	9c 83       	std	Y+4, r25	; 0x04
    5e4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    5e50:	01 97       	sbiw	r24, 0x01	; 1
    5e52:	9e 83       	std	Y+6, r25	; 0x06
    5e54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e56:	8d 81       	ldd	r24, Y+5	; 0x05
    5e58:	9e 81       	ldd	r25, Y+6	; 0x06
    5e5a:	00 97       	sbiw	r24, 0x00	; 0
    5e5c:	69 f7       	brne	.-38     	; 0x5e38 <CLCD_voidInit+0x53e>
    5e5e:	14 c0       	rjmp	.+40     	; 0x5e88 <CLCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e60:	6f 81       	ldd	r22, Y+7	; 0x07
    5e62:	78 85       	ldd	r23, Y+8	; 0x08
    5e64:	89 85       	ldd	r24, Y+9	; 0x09
    5e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e6c:	dc 01       	movw	r26, r24
    5e6e:	cb 01       	movw	r24, r22
    5e70:	9e 83       	std	Y+6, r25	; 0x06
    5e72:	8d 83       	std	Y+5, r24	; 0x05
    5e74:	8d 81       	ldd	r24, Y+5	; 0x05
    5e76:	9e 81       	ldd	r25, Y+6	; 0x06
    5e78:	9a 83       	std	Y+2, r25	; 0x02
    5e7a:	89 83       	std	Y+1, r24	; 0x01
    5e7c:	89 81       	ldd	r24, Y+1	; 0x01
    5e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5e80:	01 97       	sbiw	r24, 0x01	; 1
    5e82:	f1 f7       	brne	.-4      	; 0x5e80 <CLCD_voidInit+0x586>
    5e84:	9a 83       	std	Y+2, r25	; 0x02
    5e86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	//Entry Mode SET
	CLCD_voidSendCommand(0b00000110);
    5e88:	86 e0       	ldi	r24, 0x06	; 6
    5e8a:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <CLCD_voidSendCommand>





}
    5e8e:	c4 5b       	subi	r28, 0xB4	; 180
    5e90:	df 4f       	sbci	r29, 0xFF	; 255
    5e92:	0f b6       	in	r0, 0x3f	; 63
    5e94:	f8 94       	cli
    5e96:	de bf       	out	0x3e, r29	; 62
    5e98:	0f be       	out	0x3f, r0	; 63
    5e9a:	cd bf       	out	0x3d, r28	; 61
    5e9c:	cf 91       	pop	r28
    5e9e:	df 91       	pop	r29
    5ea0:	1f 91       	pop	r17
    5ea2:	0f 91       	pop	r16
    5ea4:	08 95       	ret

00005ea6 <CLCD_voidSendCommand>:
void CLCD_voidSendCommand (u8 Copy_u8Command)
{
    5ea6:	df 93       	push	r29
    5ea8:	cf 93       	push	r28
    5eaa:	cd b7       	in	r28, 0x3d	; 61
    5eac:	de b7       	in	r29, 0x3e	; 62
    5eae:	a7 97       	sbiw	r28, 0x27	; 39
    5eb0:	0f b6       	in	r0, 0x3f	; 63
    5eb2:	f8 94       	cli
    5eb4:	de bf       	out	0x3e, r29	; 62
    5eb6:	0f be       	out	0x3f, r0	; 63
    5eb8:	cd bf       	out	0x3d, r28	; 61
    5eba:	8f a3       	std	Y+39, r24	; 0x27
	/*Rs ->LOW (To Send Command)*/
	DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS,DIO_LOW);
    5ebc:	83 e0       	ldi	r24, 0x03	; 3
    5ebe:	67 e0       	ldi	r22, 0x07	; 7
    5ec0:	40 e0       	ldi	r20, 0x00	; 0
    5ec2:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>

	/*RW ->LOW (To Send Command)*/
		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW,DIO_LOW);
    5ec6:	83 e0       	ldi	r24, 0x03	; 3
    5ec8:	66 e0       	ldi	r22, 0x06	; 6
    5eca:	40 e0       	ldi	r20, 0x00	; 0
    5ecc:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>

	/*Send Command*/
		DIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    5ed0:	80 e0       	ldi	r24, 0x00	; 0
    5ed2:	6f a1       	ldd	r22, Y+39	; 0x27
    5ed4:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_voidSetPortValue>

	/*Enable Sequence*/

		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_E,DIO_HIGH);
    5ed8:	83 e0       	ldi	r24, 0x03	; 3
    5eda:	63 e0       	ldi	r22, 0x03	; 3
    5edc:	41 e0       	ldi	r20, 0x01	; 1
    5ede:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    5ee2:	80 e0       	ldi	r24, 0x00	; 0
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	a0 e8       	ldi	r26, 0x80	; 128
    5ee8:	bf e3       	ldi	r27, 0x3F	; 63
    5eea:	8b a3       	std	Y+35, r24	; 0x23
    5eec:	9c a3       	std	Y+36, r25	; 0x24
    5eee:	ad a3       	std	Y+37, r26	; 0x25
    5ef0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5ef2:	6b a1       	ldd	r22, Y+35	; 0x23
    5ef4:	7c a1       	ldd	r23, Y+36	; 0x24
    5ef6:	8d a1       	ldd	r24, Y+37	; 0x25
    5ef8:	9e a1       	ldd	r25, Y+38	; 0x26
    5efa:	2b ea       	ldi	r18, 0xAB	; 171
    5efc:	3a ea       	ldi	r19, 0xAA	; 170
    5efe:	4a e2       	ldi	r20, 0x2A	; 42
    5f00:	50 e4       	ldi	r21, 0x40	; 64
    5f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f06:	dc 01       	movw	r26, r24
    5f08:	cb 01       	movw	r24, r22
    5f0a:	8f 8f       	std	Y+31, r24	; 0x1f
    5f0c:	98 a3       	std	Y+32, r25	; 0x20
    5f0e:	a9 a3       	std	Y+33, r26	; 0x21
    5f10:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    5f12:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5f14:	78 a1       	ldd	r23, Y+32	; 0x20
    5f16:	89 a1       	ldd	r24, Y+33	; 0x21
    5f18:	9a a1       	ldd	r25, Y+34	; 0x22
    5f1a:	20 e0       	ldi	r18, 0x00	; 0
    5f1c:	30 e0       	ldi	r19, 0x00	; 0
    5f1e:	40 e8       	ldi	r20, 0x80	; 128
    5f20:	5f e3       	ldi	r21, 0x3F	; 63
    5f22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f26:	88 23       	and	r24, r24
    5f28:	1c f4       	brge	.+6      	; 0x5f30 <CLCD_voidSendCommand+0x8a>
		__ticks = 1;
    5f2a:	81 e0       	ldi	r24, 0x01	; 1
    5f2c:	8e 8f       	std	Y+30, r24	; 0x1e
    5f2e:	91 c0       	rjmp	.+290    	; 0x6052 <CLCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    5f30:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5f32:	78 a1       	ldd	r23, Y+32	; 0x20
    5f34:	89 a1       	ldd	r24, Y+33	; 0x21
    5f36:	9a a1       	ldd	r25, Y+34	; 0x22
    5f38:	20 e0       	ldi	r18, 0x00	; 0
    5f3a:	30 e0       	ldi	r19, 0x00	; 0
    5f3c:	4f e7       	ldi	r20, 0x7F	; 127
    5f3e:	53 e4       	ldi	r21, 0x43	; 67
    5f40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f44:	18 16       	cp	r1, r24
    5f46:	0c f0       	brlt	.+2      	; 0x5f4a <CLCD_voidSendCommand+0xa4>
    5f48:	7b c0       	rjmp	.+246    	; 0x6040 <CLCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    5f4a:	6b a1       	ldd	r22, Y+35	; 0x23
    5f4c:	7c a1       	ldd	r23, Y+36	; 0x24
    5f4e:	8d a1       	ldd	r24, Y+37	; 0x25
    5f50:	9e a1       	ldd	r25, Y+38	; 0x26
    5f52:	20 e0       	ldi	r18, 0x00	; 0
    5f54:	30 e0       	ldi	r19, 0x00	; 0
    5f56:	4a e7       	ldi	r20, 0x7A	; 122
    5f58:	54 e4       	ldi	r21, 0x44	; 68
    5f5a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5f5e:	dc 01       	movw	r26, r24
    5f60:	cb 01       	movw	r24, r22
    5f62:	8a 8f       	std	Y+26, r24	; 0x1a
    5f64:	9b 8f       	std	Y+27, r25	; 0x1b
    5f66:	ac 8f       	std	Y+28, r26	; 0x1c
    5f68:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f6a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5f6c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5f6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5f70:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5f72:	20 e0       	ldi	r18, 0x00	; 0
    5f74:	30 e0       	ldi	r19, 0x00	; 0
    5f76:	4a ef       	ldi	r20, 0xFA	; 250
    5f78:	54 e4       	ldi	r21, 0x44	; 68
    5f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f7e:	dc 01       	movw	r26, r24
    5f80:	cb 01       	movw	r24, r22
    5f82:	8e 8b       	std	Y+22, r24	; 0x16
    5f84:	9f 8b       	std	Y+23, r25	; 0x17
    5f86:	a8 8f       	std	Y+24, r26	; 0x18
    5f88:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    5f8a:	6e 89       	ldd	r22, Y+22	; 0x16
    5f8c:	7f 89       	ldd	r23, Y+23	; 0x17
    5f8e:	88 8d       	ldd	r24, Y+24	; 0x18
    5f90:	99 8d       	ldd	r25, Y+25	; 0x19
    5f92:	20 e0       	ldi	r18, 0x00	; 0
    5f94:	30 e0       	ldi	r19, 0x00	; 0
    5f96:	40 e8       	ldi	r20, 0x80	; 128
    5f98:	5f e3       	ldi	r21, 0x3F	; 63
    5f9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f9e:	88 23       	and	r24, r24
    5fa0:	2c f4       	brge	.+10     	; 0x5fac <CLCD_voidSendCommand+0x106>
		__ticks = 1;
    5fa2:	81 e0       	ldi	r24, 0x01	; 1
    5fa4:	90 e0       	ldi	r25, 0x00	; 0
    5fa6:	9d 8b       	std	Y+21, r25	; 0x15
    5fa8:	8c 8b       	std	Y+20, r24	; 0x14
    5faa:	3f c0       	rjmp	.+126    	; 0x602a <CLCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    5fac:	6e 89       	ldd	r22, Y+22	; 0x16
    5fae:	7f 89       	ldd	r23, Y+23	; 0x17
    5fb0:	88 8d       	ldd	r24, Y+24	; 0x18
    5fb2:	99 8d       	ldd	r25, Y+25	; 0x19
    5fb4:	20 e0       	ldi	r18, 0x00	; 0
    5fb6:	3f ef       	ldi	r19, 0xFF	; 255
    5fb8:	4f e7       	ldi	r20, 0x7F	; 127
    5fba:	57 e4       	ldi	r21, 0x47	; 71
    5fbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fc0:	18 16       	cp	r1, r24
    5fc2:	4c f5       	brge	.+82     	; 0x6016 <CLCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fc4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5fc6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5fc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5fca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5fcc:	20 e0       	ldi	r18, 0x00	; 0
    5fce:	30 e0       	ldi	r19, 0x00	; 0
    5fd0:	40 e2       	ldi	r20, 0x20	; 32
    5fd2:	51 e4       	ldi	r21, 0x41	; 65
    5fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fd8:	dc 01       	movw	r26, r24
    5fda:	cb 01       	movw	r24, r22
    5fdc:	bc 01       	movw	r22, r24
    5fde:	cd 01       	movw	r24, r26
    5fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fe4:	dc 01       	movw	r26, r24
    5fe6:	cb 01       	movw	r24, r22
    5fe8:	9d 8b       	std	Y+21, r25	; 0x15
    5fea:	8c 8b       	std	Y+20, r24	; 0x14
    5fec:	0f c0       	rjmp	.+30     	; 0x600c <CLCD_voidSendCommand+0x166>
    5fee:	88 ec       	ldi	r24, 0xC8	; 200
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	9b 8b       	std	Y+19, r25	; 0x13
    5ff4:	8a 8b       	std	Y+18, r24	; 0x12
    5ff6:	8a 89       	ldd	r24, Y+18	; 0x12
    5ff8:	9b 89       	ldd	r25, Y+19	; 0x13
    5ffa:	01 97       	sbiw	r24, 0x01	; 1
    5ffc:	f1 f7       	brne	.-4      	; 0x5ffa <CLCD_voidSendCommand+0x154>
    5ffe:	9b 8b       	std	Y+19, r25	; 0x13
    6000:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6002:	8c 89       	ldd	r24, Y+20	; 0x14
    6004:	9d 89       	ldd	r25, Y+21	; 0x15
    6006:	01 97       	sbiw	r24, 0x01	; 1
    6008:	9d 8b       	std	Y+21, r25	; 0x15
    600a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    600c:	8c 89       	ldd	r24, Y+20	; 0x14
    600e:	9d 89       	ldd	r25, Y+21	; 0x15
    6010:	00 97       	sbiw	r24, 0x00	; 0
    6012:	69 f7       	brne	.-38     	; 0x5fee <CLCD_voidSendCommand+0x148>
    6014:	24 c0       	rjmp	.+72     	; 0x605e <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6016:	6e 89       	ldd	r22, Y+22	; 0x16
    6018:	7f 89       	ldd	r23, Y+23	; 0x17
    601a:	88 8d       	ldd	r24, Y+24	; 0x18
    601c:	99 8d       	ldd	r25, Y+25	; 0x19
    601e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6022:	dc 01       	movw	r26, r24
    6024:	cb 01       	movw	r24, r22
    6026:	9d 8b       	std	Y+21, r25	; 0x15
    6028:	8c 8b       	std	Y+20, r24	; 0x14
    602a:	8c 89       	ldd	r24, Y+20	; 0x14
    602c:	9d 89       	ldd	r25, Y+21	; 0x15
    602e:	99 8b       	std	Y+17, r25	; 0x11
    6030:	88 8b       	std	Y+16, r24	; 0x10
    6032:	88 89       	ldd	r24, Y+16	; 0x10
    6034:	99 89       	ldd	r25, Y+17	; 0x11
    6036:	01 97       	sbiw	r24, 0x01	; 1
    6038:	f1 f7       	brne	.-4      	; 0x6036 <CLCD_voidSendCommand+0x190>
    603a:	99 8b       	std	Y+17, r25	; 0x11
    603c:	88 8b       	std	Y+16, r24	; 0x10
    603e:	0f c0       	rjmp	.+30     	; 0x605e <CLCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6040:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6042:	78 a1       	ldd	r23, Y+32	; 0x20
    6044:	89 a1       	ldd	r24, Y+33	; 0x21
    6046:	9a a1       	ldd	r25, Y+34	; 0x22
    6048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    604c:	dc 01       	movw	r26, r24
    604e:	cb 01       	movw	r24, r22
    6050:	8e 8f       	std	Y+30, r24	; 0x1e
    6052:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6054:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6056:	8f 85       	ldd	r24, Y+15	; 0x0f
    6058:	8a 95       	dec	r24
    605a:	f1 f7       	brne	.-4      	; 0x6058 <CLCD_voidSendCommand+0x1b2>
    605c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_E,DIO_LOW);
    605e:	83 e0       	ldi	r24, 0x03	; 3
    6060:	63 e0       	ldi	r22, 0x03	; 3
    6062:	40 e0       	ldi	r20, 0x00	; 0
    6064:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    6068:	80 e0       	ldi	r24, 0x00	; 0
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	a0 e2       	ldi	r26, 0x20	; 32
    606e:	b1 e4       	ldi	r27, 0x41	; 65
    6070:	8b 87       	std	Y+11, r24	; 0x0b
    6072:	9c 87       	std	Y+12, r25	; 0x0c
    6074:	ad 87       	std	Y+13, r26	; 0x0d
    6076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6078:	6b 85       	ldd	r22, Y+11	; 0x0b
    607a:	7c 85       	ldd	r23, Y+12	; 0x0c
    607c:	8d 85       	ldd	r24, Y+13	; 0x0d
    607e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6080:	20 e0       	ldi	r18, 0x00	; 0
    6082:	30 e0       	ldi	r19, 0x00	; 0
    6084:	4a ef       	ldi	r20, 0xFA	; 250
    6086:	54 e4       	ldi	r21, 0x44	; 68
    6088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    608c:	dc 01       	movw	r26, r24
    608e:	cb 01       	movw	r24, r22
    6090:	8f 83       	std	Y+7, r24	; 0x07
    6092:	98 87       	std	Y+8, r25	; 0x08
    6094:	a9 87       	std	Y+9, r26	; 0x09
    6096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6098:	6f 81       	ldd	r22, Y+7	; 0x07
    609a:	78 85       	ldd	r23, Y+8	; 0x08
    609c:	89 85       	ldd	r24, Y+9	; 0x09
    609e:	9a 85       	ldd	r25, Y+10	; 0x0a
    60a0:	20 e0       	ldi	r18, 0x00	; 0
    60a2:	30 e0       	ldi	r19, 0x00	; 0
    60a4:	40 e8       	ldi	r20, 0x80	; 128
    60a6:	5f e3       	ldi	r21, 0x3F	; 63
    60a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60ac:	88 23       	and	r24, r24
    60ae:	2c f4       	brge	.+10     	; 0x60ba <CLCD_voidSendCommand+0x214>
		__ticks = 1;
    60b0:	81 e0       	ldi	r24, 0x01	; 1
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	9e 83       	std	Y+6, r25	; 0x06
    60b6:	8d 83       	std	Y+5, r24	; 0x05
    60b8:	3f c0       	rjmp	.+126    	; 0x6138 <CLCD_voidSendCommand+0x292>
	else if (__tmp > 65535)
    60ba:	6f 81       	ldd	r22, Y+7	; 0x07
    60bc:	78 85       	ldd	r23, Y+8	; 0x08
    60be:	89 85       	ldd	r24, Y+9	; 0x09
    60c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    60c2:	20 e0       	ldi	r18, 0x00	; 0
    60c4:	3f ef       	ldi	r19, 0xFF	; 255
    60c6:	4f e7       	ldi	r20, 0x7F	; 127
    60c8:	57 e4       	ldi	r21, 0x47	; 71
    60ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60ce:	18 16       	cp	r1, r24
    60d0:	4c f5       	brge	.+82     	; 0x6124 <CLCD_voidSendCommand+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    60d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    60d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    60d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    60da:	20 e0       	ldi	r18, 0x00	; 0
    60dc:	30 e0       	ldi	r19, 0x00	; 0
    60de:	40 e2       	ldi	r20, 0x20	; 32
    60e0:	51 e4       	ldi	r21, 0x41	; 65
    60e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60e6:	dc 01       	movw	r26, r24
    60e8:	cb 01       	movw	r24, r22
    60ea:	bc 01       	movw	r22, r24
    60ec:	cd 01       	movw	r24, r26
    60ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f2:	dc 01       	movw	r26, r24
    60f4:	cb 01       	movw	r24, r22
    60f6:	9e 83       	std	Y+6, r25	; 0x06
    60f8:	8d 83       	std	Y+5, r24	; 0x05
    60fa:	0f c0       	rjmp	.+30     	; 0x611a <CLCD_voidSendCommand+0x274>
    60fc:	88 ec       	ldi	r24, 0xC8	; 200
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	9c 83       	std	Y+4, r25	; 0x04
    6102:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6104:	8b 81       	ldd	r24, Y+3	; 0x03
    6106:	9c 81       	ldd	r25, Y+4	; 0x04
    6108:	01 97       	sbiw	r24, 0x01	; 1
    610a:	f1 f7       	brne	.-4      	; 0x6108 <CLCD_voidSendCommand+0x262>
    610c:	9c 83       	std	Y+4, r25	; 0x04
    610e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6110:	8d 81       	ldd	r24, Y+5	; 0x05
    6112:	9e 81       	ldd	r25, Y+6	; 0x06
    6114:	01 97       	sbiw	r24, 0x01	; 1
    6116:	9e 83       	std	Y+6, r25	; 0x06
    6118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    611a:	8d 81       	ldd	r24, Y+5	; 0x05
    611c:	9e 81       	ldd	r25, Y+6	; 0x06
    611e:	00 97       	sbiw	r24, 0x00	; 0
    6120:	69 f7       	brne	.-38     	; 0x60fc <CLCD_voidSendCommand+0x256>
    6122:	14 c0       	rjmp	.+40     	; 0x614c <CLCD_voidSendCommand+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6124:	6f 81       	ldd	r22, Y+7	; 0x07
    6126:	78 85       	ldd	r23, Y+8	; 0x08
    6128:	89 85       	ldd	r24, Y+9	; 0x09
    612a:	9a 85       	ldd	r25, Y+10	; 0x0a
    612c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6130:	dc 01       	movw	r26, r24
    6132:	cb 01       	movw	r24, r22
    6134:	9e 83       	std	Y+6, r25	; 0x06
    6136:	8d 83       	std	Y+5, r24	; 0x05
    6138:	8d 81       	ldd	r24, Y+5	; 0x05
    613a:	9e 81       	ldd	r25, Y+6	; 0x06
    613c:	9a 83       	std	Y+2, r25	; 0x02
    613e:	89 83       	std	Y+1, r24	; 0x01
    6140:	89 81       	ldd	r24, Y+1	; 0x01
    6142:	9a 81       	ldd	r25, Y+2	; 0x02
    6144:	01 97       	sbiw	r24, 0x01	; 1
    6146:	f1 f7       	brne	.-4      	; 0x6144 <CLCD_voidSendCommand+0x29e>
    6148:	9a 83       	std	Y+2, r25	; 0x02
    614a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
}
    614c:	a7 96       	adiw	r28, 0x27	; 39
    614e:	0f b6       	in	r0, 0x3f	; 63
    6150:	f8 94       	cli
    6152:	de bf       	out	0x3e, r29	; 62
    6154:	0f be       	out	0x3f, r0	; 63
    6156:	cd bf       	out	0x3d, r28	; 61
    6158:	cf 91       	pop	r28
    615a:	df 91       	pop	r29
    615c:	08 95       	ret

0000615e <CLCD_voidSendData>:
void CLCD_voidSendData (u8 Copy_u8Data)
{
    615e:	df 93       	push	r29
    6160:	cf 93       	push	r28
    6162:	cd b7       	in	r28, 0x3d	; 61
    6164:	de b7       	in	r29, 0x3e	; 62
    6166:	a7 97       	sbiw	r28, 0x27	; 39
    6168:	0f b6       	in	r0, 0x3f	; 63
    616a:	f8 94       	cli
    616c:	de bf       	out	0x3e, r29	; 62
    616e:	0f be       	out	0x3f, r0	; 63
    6170:	cd bf       	out	0x3d, r28	; 61
    6172:	8f a3       	std	Y+39, r24	; 0x27

	/*Rs ->HIGH (To Send DATA)*/
	DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS,DIO_HIGH);
    6174:	83 e0       	ldi	r24, 0x03	; 3
    6176:	67 e0       	ldi	r22, 0x07	; 7
    6178:	41 e0       	ldi	r20, 0x01	; 1
    617a:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>

	/*RW ->LOW (To Send Command)*/
		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW,DIO_LOW);
    617e:	83 e0       	ldi	r24, 0x03	; 3
    6180:	66 e0       	ldi	r22, 0x06	; 6
    6182:	40 e0       	ldi	r20, 0x00	; 0
    6184:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>

	/*Send Command*/
		DIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    6188:	80 e0       	ldi	r24, 0x00	; 0
    618a:	6f a1       	ldd	r22, Y+39	; 0x27
    618c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <DIO_voidSetPortValue>

	/*Enable Sequence*/

		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_E,DIO_HIGH);
    6190:	83 e0       	ldi	r24, 0x03	; 3
    6192:	63 e0       	ldi	r22, 0x03	; 3
    6194:	41 e0       	ldi	r20, 0x01	; 1
    6196:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    619a:	80 e0       	ldi	r24, 0x00	; 0
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	a0 e8       	ldi	r26, 0x80	; 128
    61a0:	bf e3       	ldi	r27, 0x3F	; 63
    61a2:	8b a3       	std	Y+35, r24	; 0x23
    61a4:	9c a3       	std	Y+36, r25	; 0x24
    61a6:	ad a3       	std	Y+37, r26	; 0x25
    61a8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    61aa:	6b a1       	ldd	r22, Y+35	; 0x23
    61ac:	7c a1       	ldd	r23, Y+36	; 0x24
    61ae:	8d a1       	ldd	r24, Y+37	; 0x25
    61b0:	9e a1       	ldd	r25, Y+38	; 0x26
    61b2:	2b ea       	ldi	r18, 0xAB	; 171
    61b4:	3a ea       	ldi	r19, 0xAA	; 170
    61b6:	4a e2       	ldi	r20, 0x2A	; 42
    61b8:	50 e4       	ldi	r21, 0x40	; 64
    61ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61be:	dc 01       	movw	r26, r24
    61c0:	cb 01       	movw	r24, r22
    61c2:	8f 8f       	std	Y+31, r24	; 0x1f
    61c4:	98 a3       	std	Y+32, r25	; 0x20
    61c6:	a9 a3       	std	Y+33, r26	; 0x21
    61c8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    61ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    61cc:	78 a1       	ldd	r23, Y+32	; 0x20
    61ce:	89 a1       	ldd	r24, Y+33	; 0x21
    61d0:	9a a1       	ldd	r25, Y+34	; 0x22
    61d2:	20 e0       	ldi	r18, 0x00	; 0
    61d4:	30 e0       	ldi	r19, 0x00	; 0
    61d6:	40 e8       	ldi	r20, 0x80	; 128
    61d8:	5f e3       	ldi	r21, 0x3F	; 63
    61da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    61de:	88 23       	and	r24, r24
    61e0:	1c f4       	brge	.+6      	; 0x61e8 <CLCD_voidSendData+0x8a>
		__ticks = 1;
    61e2:	81 e0       	ldi	r24, 0x01	; 1
    61e4:	8e 8f       	std	Y+30, r24	; 0x1e
    61e6:	91 c0       	rjmp	.+290    	; 0x630a <CLCD_voidSendData+0x1ac>
	else if (__tmp > 255)
    61e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    61ea:	78 a1       	ldd	r23, Y+32	; 0x20
    61ec:	89 a1       	ldd	r24, Y+33	; 0x21
    61ee:	9a a1       	ldd	r25, Y+34	; 0x22
    61f0:	20 e0       	ldi	r18, 0x00	; 0
    61f2:	30 e0       	ldi	r19, 0x00	; 0
    61f4:	4f e7       	ldi	r20, 0x7F	; 127
    61f6:	53 e4       	ldi	r21, 0x43	; 67
    61f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61fc:	18 16       	cp	r1, r24
    61fe:	0c f0       	brlt	.+2      	; 0x6202 <CLCD_voidSendData+0xa4>
    6200:	7b c0       	rjmp	.+246    	; 0x62f8 <CLCD_voidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    6202:	6b a1       	ldd	r22, Y+35	; 0x23
    6204:	7c a1       	ldd	r23, Y+36	; 0x24
    6206:	8d a1       	ldd	r24, Y+37	; 0x25
    6208:	9e a1       	ldd	r25, Y+38	; 0x26
    620a:	20 e0       	ldi	r18, 0x00	; 0
    620c:	30 e0       	ldi	r19, 0x00	; 0
    620e:	4a e7       	ldi	r20, 0x7A	; 122
    6210:	54 e4       	ldi	r21, 0x44	; 68
    6212:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6216:	dc 01       	movw	r26, r24
    6218:	cb 01       	movw	r24, r22
    621a:	8a 8f       	std	Y+26, r24	; 0x1a
    621c:	9b 8f       	std	Y+27, r25	; 0x1b
    621e:	ac 8f       	std	Y+28, r26	; 0x1c
    6220:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6222:	6a 8d       	ldd	r22, Y+26	; 0x1a
    6224:	7b 8d       	ldd	r23, Y+27	; 0x1b
    6226:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6228:	9d 8d       	ldd	r25, Y+29	; 0x1d
    622a:	20 e0       	ldi	r18, 0x00	; 0
    622c:	30 e0       	ldi	r19, 0x00	; 0
    622e:	4a ef       	ldi	r20, 0xFA	; 250
    6230:	54 e4       	ldi	r21, 0x44	; 68
    6232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6236:	dc 01       	movw	r26, r24
    6238:	cb 01       	movw	r24, r22
    623a:	8e 8b       	std	Y+22, r24	; 0x16
    623c:	9f 8b       	std	Y+23, r25	; 0x17
    623e:	a8 8f       	std	Y+24, r26	; 0x18
    6240:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    6242:	6e 89       	ldd	r22, Y+22	; 0x16
    6244:	7f 89       	ldd	r23, Y+23	; 0x17
    6246:	88 8d       	ldd	r24, Y+24	; 0x18
    6248:	99 8d       	ldd	r25, Y+25	; 0x19
    624a:	20 e0       	ldi	r18, 0x00	; 0
    624c:	30 e0       	ldi	r19, 0x00	; 0
    624e:	40 e8       	ldi	r20, 0x80	; 128
    6250:	5f e3       	ldi	r21, 0x3F	; 63
    6252:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6256:	88 23       	and	r24, r24
    6258:	2c f4       	brge	.+10     	; 0x6264 <CLCD_voidSendData+0x106>
		__ticks = 1;
    625a:	81 e0       	ldi	r24, 0x01	; 1
    625c:	90 e0       	ldi	r25, 0x00	; 0
    625e:	9d 8b       	std	Y+21, r25	; 0x15
    6260:	8c 8b       	std	Y+20, r24	; 0x14
    6262:	3f c0       	rjmp	.+126    	; 0x62e2 <CLCD_voidSendData+0x184>
	else if (__tmp > 65535)
    6264:	6e 89       	ldd	r22, Y+22	; 0x16
    6266:	7f 89       	ldd	r23, Y+23	; 0x17
    6268:	88 8d       	ldd	r24, Y+24	; 0x18
    626a:	99 8d       	ldd	r25, Y+25	; 0x19
    626c:	20 e0       	ldi	r18, 0x00	; 0
    626e:	3f ef       	ldi	r19, 0xFF	; 255
    6270:	4f e7       	ldi	r20, 0x7F	; 127
    6272:	57 e4       	ldi	r21, 0x47	; 71
    6274:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6278:	18 16       	cp	r1, r24
    627a:	4c f5       	brge	.+82     	; 0x62ce <CLCD_voidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    627c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    627e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    6280:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6282:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6284:	20 e0       	ldi	r18, 0x00	; 0
    6286:	30 e0       	ldi	r19, 0x00	; 0
    6288:	40 e2       	ldi	r20, 0x20	; 32
    628a:	51 e4       	ldi	r21, 0x41	; 65
    628c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6290:	dc 01       	movw	r26, r24
    6292:	cb 01       	movw	r24, r22
    6294:	bc 01       	movw	r22, r24
    6296:	cd 01       	movw	r24, r26
    6298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    629c:	dc 01       	movw	r26, r24
    629e:	cb 01       	movw	r24, r22
    62a0:	9d 8b       	std	Y+21, r25	; 0x15
    62a2:	8c 8b       	std	Y+20, r24	; 0x14
    62a4:	0f c0       	rjmp	.+30     	; 0x62c4 <CLCD_voidSendData+0x166>
    62a6:	88 ec       	ldi	r24, 0xC8	; 200
    62a8:	90 e0       	ldi	r25, 0x00	; 0
    62aa:	9b 8b       	std	Y+19, r25	; 0x13
    62ac:	8a 8b       	std	Y+18, r24	; 0x12
    62ae:	8a 89       	ldd	r24, Y+18	; 0x12
    62b0:	9b 89       	ldd	r25, Y+19	; 0x13
    62b2:	01 97       	sbiw	r24, 0x01	; 1
    62b4:	f1 f7       	brne	.-4      	; 0x62b2 <CLCD_voidSendData+0x154>
    62b6:	9b 8b       	std	Y+19, r25	; 0x13
    62b8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62ba:	8c 89       	ldd	r24, Y+20	; 0x14
    62bc:	9d 89       	ldd	r25, Y+21	; 0x15
    62be:	01 97       	sbiw	r24, 0x01	; 1
    62c0:	9d 8b       	std	Y+21, r25	; 0x15
    62c2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62c4:	8c 89       	ldd	r24, Y+20	; 0x14
    62c6:	9d 89       	ldd	r25, Y+21	; 0x15
    62c8:	00 97       	sbiw	r24, 0x00	; 0
    62ca:	69 f7       	brne	.-38     	; 0x62a6 <CLCD_voidSendData+0x148>
    62cc:	24 c0       	rjmp	.+72     	; 0x6316 <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62ce:	6e 89       	ldd	r22, Y+22	; 0x16
    62d0:	7f 89       	ldd	r23, Y+23	; 0x17
    62d2:	88 8d       	ldd	r24, Y+24	; 0x18
    62d4:	99 8d       	ldd	r25, Y+25	; 0x19
    62d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62da:	dc 01       	movw	r26, r24
    62dc:	cb 01       	movw	r24, r22
    62de:	9d 8b       	std	Y+21, r25	; 0x15
    62e0:	8c 8b       	std	Y+20, r24	; 0x14
    62e2:	8c 89       	ldd	r24, Y+20	; 0x14
    62e4:	9d 89       	ldd	r25, Y+21	; 0x15
    62e6:	99 8b       	std	Y+17, r25	; 0x11
    62e8:	88 8b       	std	Y+16, r24	; 0x10
    62ea:	88 89       	ldd	r24, Y+16	; 0x10
    62ec:	99 89       	ldd	r25, Y+17	; 0x11
    62ee:	01 97       	sbiw	r24, 0x01	; 1
    62f0:	f1 f7       	brne	.-4      	; 0x62ee <CLCD_voidSendData+0x190>
    62f2:	99 8b       	std	Y+17, r25	; 0x11
    62f4:	88 8b       	std	Y+16, r24	; 0x10
    62f6:	0f c0       	rjmp	.+30     	; 0x6316 <CLCD_voidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    62f8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    62fa:	78 a1       	ldd	r23, Y+32	; 0x20
    62fc:	89 a1       	ldd	r24, Y+33	; 0x21
    62fe:	9a a1       	ldd	r25, Y+34	; 0x22
    6300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6304:	dc 01       	movw	r26, r24
    6306:	cb 01       	movw	r24, r22
    6308:	8e 8f       	std	Y+30, r24	; 0x1e
    630a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    630c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    630e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6310:	8a 95       	dec	r24
    6312:	f1 f7       	brne	.-4      	; 0x6310 <CLCD_voidSendData+0x1b2>
    6314:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_E,DIO_LOW);
    6316:	83 e0       	ldi	r24, 0x03	; 3
    6318:	63 e0       	ldi	r22, 0x03	; 3
    631a:	40 e0       	ldi	r20, 0x00	; 0
    631c:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    6320:	80 e0       	ldi	r24, 0x00	; 0
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	a0 e2       	ldi	r26, 0x20	; 32
    6326:	b1 e4       	ldi	r27, 0x41	; 65
    6328:	8b 87       	std	Y+11, r24	; 0x0b
    632a:	9c 87       	std	Y+12, r25	; 0x0c
    632c:	ad 87       	std	Y+13, r26	; 0x0d
    632e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6330:	6b 85       	ldd	r22, Y+11	; 0x0b
    6332:	7c 85       	ldd	r23, Y+12	; 0x0c
    6334:	8d 85       	ldd	r24, Y+13	; 0x0d
    6336:	9e 85       	ldd	r25, Y+14	; 0x0e
    6338:	20 e0       	ldi	r18, 0x00	; 0
    633a:	30 e0       	ldi	r19, 0x00	; 0
    633c:	4a ef       	ldi	r20, 0xFA	; 250
    633e:	54 e4       	ldi	r21, 0x44	; 68
    6340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6344:	dc 01       	movw	r26, r24
    6346:	cb 01       	movw	r24, r22
    6348:	8f 83       	std	Y+7, r24	; 0x07
    634a:	98 87       	std	Y+8, r25	; 0x08
    634c:	a9 87       	std	Y+9, r26	; 0x09
    634e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6350:	6f 81       	ldd	r22, Y+7	; 0x07
    6352:	78 85       	ldd	r23, Y+8	; 0x08
    6354:	89 85       	ldd	r24, Y+9	; 0x09
    6356:	9a 85       	ldd	r25, Y+10	; 0x0a
    6358:	20 e0       	ldi	r18, 0x00	; 0
    635a:	30 e0       	ldi	r19, 0x00	; 0
    635c:	40 e8       	ldi	r20, 0x80	; 128
    635e:	5f e3       	ldi	r21, 0x3F	; 63
    6360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6364:	88 23       	and	r24, r24
    6366:	2c f4       	brge	.+10     	; 0x6372 <CLCD_voidSendData+0x214>
		__ticks = 1;
    6368:	81 e0       	ldi	r24, 0x01	; 1
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	9e 83       	std	Y+6, r25	; 0x06
    636e:	8d 83       	std	Y+5, r24	; 0x05
    6370:	3f c0       	rjmp	.+126    	; 0x63f0 <CLCD_voidSendData+0x292>
	else if (__tmp > 65535)
    6372:	6f 81       	ldd	r22, Y+7	; 0x07
    6374:	78 85       	ldd	r23, Y+8	; 0x08
    6376:	89 85       	ldd	r24, Y+9	; 0x09
    6378:	9a 85       	ldd	r25, Y+10	; 0x0a
    637a:	20 e0       	ldi	r18, 0x00	; 0
    637c:	3f ef       	ldi	r19, 0xFF	; 255
    637e:	4f e7       	ldi	r20, 0x7F	; 127
    6380:	57 e4       	ldi	r21, 0x47	; 71
    6382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6386:	18 16       	cp	r1, r24
    6388:	4c f5       	brge	.+82     	; 0x63dc <CLCD_voidSendData+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    638a:	6b 85       	ldd	r22, Y+11	; 0x0b
    638c:	7c 85       	ldd	r23, Y+12	; 0x0c
    638e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6390:	9e 85       	ldd	r25, Y+14	; 0x0e
    6392:	20 e0       	ldi	r18, 0x00	; 0
    6394:	30 e0       	ldi	r19, 0x00	; 0
    6396:	40 e2       	ldi	r20, 0x20	; 32
    6398:	51 e4       	ldi	r21, 0x41	; 65
    639a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    639e:	dc 01       	movw	r26, r24
    63a0:	cb 01       	movw	r24, r22
    63a2:	bc 01       	movw	r22, r24
    63a4:	cd 01       	movw	r24, r26
    63a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63aa:	dc 01       	movw	r26, r24
    63ac:	cb 01       	movw	r24, r22
    63ae:	9e 83       	std	Y+6, r25	; 0x06
    63b0:	8d 83       	std	Y+5, r24	; 0x05
    63b2:	0f c0       	rjmp	.+30     	; 0x63d2 <CLCD_voidSendData+0x274>
    63b4:	88 ec       	ldi	r24, 0xC8	; 200
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	9c 83       	std	Y+4, r25	; 0x04
    63ba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    63bc:	8b 81       	ldd	r24, Y+3	; 0x03
    63be:	9c 81       	ldd	r25, Y+4	; 0x04
    63c0:	01 97       	sbiw	r24, 0x01	; 1
    63c2:	f1 f7       	brne	.-4      	; 0x63c0 <CLCD_voidSendData+0x262>
    63c4:	9c 83       	std	Y+4, r25	; 0x04
    63c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63c8:	8d 81       	ldd	r24, Y+5	; 0x05
    63ca:	9e 81       	ldd	r25, Y+6	; 0x06
    63cc:	01 97       	sbiw	r24, 0x01	; 1
    63ce:	9e 83       	std	Y+6, r25	; 0x06
    63d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63d2:	8d 81       	ldd	r24, Y+5	; 0x05
    63d4:	9e 81       	ldd	r25, Y+6	; 0x06
    63d6:	00 97       	sbiw	r24, 0x00	; 0
    63d8:	69 f7       	brne	.-38     	; 0x63b4 <CLCD_voidSendData+0x256>
    63da:	14 c0       	rjmp	.+40     	; 0x6404 <CLCD_voidSendData+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63dc:	6f 81       	ldd	r22, Y+7	; 0x07
    63de:	78 85       	ldd	r23, Y+8	; 0x08
    63e0:	89 85       	ldd	r24, Y+9	; 0x09
    63e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    63e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63e8:	dc 01       	movw	r26, r24
    63ea:	cb 01       	movw	r24, r22
    63ec:	9e 83       	std	Y+6, r25	; 0x06
    63ee:	8d 83       	std	Y+5, r24	; 0x05
    63f0:	8d 81       	ldd	r24, Y+5	; 0x05
    63f2:	9e 81       	ldd	r25, Y+6	; 0x06
    63f4:	9a 83       	std	Y+2, r25	; 0x02
    63f6:	89 83       	std	Y+1, r24	; 0x01
    63f8:	89 81       	ldd	r24, Y+1	; 0x01
    63fa:	9a 81       	ldd	r25, Y+2	; 0x02
    63fc:	01 97       	sbiw	r24, 0x01	; 1
    63fe:	f1 f7       	brne	.-4      	; 0x63fc <CLCD_voidSendData+0x29e>
    6400:	9a 83       	std	Y+2, r25	; 0x02
    6402:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

}
    6404:	a7 96       	adiw	r28, 0x27	; 39
    6406:	0f b6       	in	r0, 0x3f	; 63
    6408:	f8 94       	cli
    640a:	de bf       	out	0x3e, r29	; 62
    640c:	0f be       	out	0x3f, r0	; 63
    640e:	cd bf       	out	0x3d, r28	; 61
    6410:	cf 91       	pop	r28
    6412:	df 91       	pop	r29
    6414:	08 95       	ret

00006416 <CLCD_voidGOTO>:

void CLCD_voidGOTO(u8 Copy_u8X,u8 Copy_u8Y)
{
    6416:	df 93       	push	r29
    6418:	cf 93       	push	r28
    641a:	00 d0       	rcall	.+0      	; 0x641c <CLCD_voidGOTO+0x6>
    641c:	00 d0       	rcall	.+0      	; 0x641e <CLCD_voidGOTO+0x8>
    641e:	cd b7       	in	r28, 0x3d	; 61
    6420:	de b7       	in	r29, 0x3e	; 62
    6422:	89 83       	std	Y+1, r24	; 0x01
    6424:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Y)
    6426:	8a 81       	ldd	r24, Y+2	; 0x02
    6428:	28 2f       	mov	r18, r24
    642a:	30 e0       	ldi	r19, 0x00	; 0
    642c:	3c 83       	std	Y+4, r19	; 0x04
    642e:	2b 83       	std	Y+3, r18	; 0x03
    6430:	8b 81       	ldd	r24, Y+3	; 0x03
    6432:	9c 81       	ldd	r25, Y+4	; 0x04
    6434:	81 30       	cpi	r24, 0x01	; 1
    6436:	91 05       	cpc	r25, r1
    6438:	31 f0       	breq	.+12     	; 0x6446 <CLCD_voidGOTO+0x30>
    643a:	2b 81       	ldd	r18, Y+3	; 0x03
    643c:	3c 81       	ldd	r19, Y+4	; 0x04
    643e:	22 30       	cpi	r18, 0x02	; 2
    6440:	31 05       	cpc	r19, r1
    6442:	31 f0       	breq	.+12     	; 0x6450 <CLCD_voidGOTO+0x3a>
    6444:	09 c0       	rjmp	.+18     	; 0x6458 <CLCD_voidGOTO+0x42>
	{

	case 1:
		CLCD_voidSendCommand(0x80+Copy_u8X-1);
    6446:	89 81       	ldd	r24, Y+1	; 0x01
    6448:	81 58       	subi	r24, 0x81	; 129
    644a:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <CLCD_voidSendCommand>
    644e:	04 c0       	rjmp	.+8      	; 0x6458 <CLCD_voidGOTO+0x42>
		break;

	case 2:
		CLCD_voidSendCommand(0xC0+Copy_u8X-1);
    6450:	89 81       	ldd	r24, Y+1	; 0x01
    6452:	81 54       	subi	r24, 0x41	; 65
    6454:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <CLCD_voidSendCommand>
		break;



	}
}
    6458:	0f 90       	pop	r0
    645a:	0f 90       	pop	r0
    645c:	0f 90       	pop	r0
    645e:	0f 90       	pop	r0
    6460:	cf 91       	pop	r28
    6462:	df 91       	pop	r29
    6464:	08 95       	ret

00006466 <CLCD_CLEAR>:

void CLCD_CLEAR()
{
    6466:	df 93       	push	r29
    6468:	cf 93       	push	r28
    646a:	cd b7       	in	r28, 0x3d	; 61
    646c:	de b7       	in	r29, 0x3e	; 62
CLCD_voidSendCommand(CLCD_CLR);
    646e:	81 e0       	ldi	r24, 0x01	; 1
    6470:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <CLCD_voidSendCommand>

}
    6474:	cf 91       	pop	r28
    6476:	df 91       	pop	r29
    6478:	08 95       	ret

0000647a <CLCD_voidCreateExtraChar>:

void CLCD_voidCreateExtraChar(u8 Copy_u8PatternLoctaion,u8 *Copy_pu8ExtraChar)
{
    647a:	df 93       	push	r29
    647c:	cf 93       	push	r28
    647e:	00 d0       	rcall	.+0      	; 0x6480 <CLCD_voidCreateExtraChar+0x6>
    6480:	00 d0       	rcall	.+0      	; 0x6482 <CLCD_voidCreateExtraChar+0x8>
    6482:	0f 92       	push	r0
    6484:	cd b7       	in	r28, 0x3d	; 61
    6486:	de b7       	in	r29, 0x3e	; 62
    6488:	8b 83       	std	Y+3, r24	; 0x03
    648a:	7d 83       	std	Y+5, r23	; 0x05
    648c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Address = 0;
    648e:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address=Copy_u8PatternLoctaion*8;
    6490:	8b 81       	ldd	r24, Y+3	; 0x03
    6492:	88 2f       	mov	r24, r24
    6494:	90 e0       	ldi	r25, 0x00	; 0
    6496:	88 0f       	add	r24, r24
    6498:	99 1f       	adc	r25, r25
    649a:	88 0f       	add	r24, r24
    649c:	99 1f       	adc	r25, r25
    649e:	88 0f       	add	r24, r24
    64a0:	99 1f       	adc	r25, r25
    64a2:	8a 83       	std	Y+2, r24	; 0x02

	//Go To CGram
	CLCD_voidSendCommand(64+Local_u8Address);
    64a4:	8a 81       	ldd	r24, Y+2	; 0x02
    64a6:	80 5c       	subi	r24, 0xC0	; 192
    64a8:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <CLCD_voidSendCommand>
	for(u8 i=0;i<8;i++)
    64ac:	19 82       	std	Y+1, r1	; 0x01
    64ae:	0e c0       	rjmp	.+28     	; 0x64cc <CLCD_voidCreateExtraChar+0x52>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    64b0:	89 81       	ldd	r24, Y+1	; 0x01
    64b2:	28 2f       	mov	r18, r24
    64b4:	30 e0       	ldi	r19, 0x00	; 0
    64b6:	8c 81       	ldd	r24, Y+4	; 0x04
    64b8:	9d 81       	ldd	r25, Y+5	; 0x05
    64ba:	fc 01       	movw	r30, r24
    64bc:	e2 0f       	add	r30, r18
    64be:	f3 1f       	adc	r31, r19
    64c0:	80 81       	ld	r24, Z
    64c2:	0e 94 af 30 	call	0x615e	; 0x615e <CLCD_voidSendData>
	u8 Local_u8Address = 0;
	Local_u8Address=Copy_u8PatternLoctaion*8;

	//Go To CGram
	CLCD_voidSendCommand(64+Local_u8Address);
	for(u8 i=0;i<8;i++)
    64c6:	89 81       	ldd	r24, Y+1	; 0x01
    64c8:	8f 5f       	subi	r24, 0xFF	; 255
    64ca:	89 83       	std	Y+1, r24	; 0x01
    64cc:	89 81       	ldd	r24, Y+1	; 0x01
    64ce:	88 30       	cpi	r24, 0x08	; 8
    64d0:	78 f3       	brcs	.-34     	; 0x64b0 <CLCD_voidCreateExtraChar+0x36>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}


}
    64d2:	0f 90       	pop	r0
    64d4:	0f 90       	pop	r0
    64d6:	0f 90       	pop	r0
    64d8:	0f 90       	pop	r0
    64da:	0f 90       	pop	r0
    64dc:	cf 91       	pop	r28
    64de:	df 91       	pop	r29
    64e0:	08 95       	ret

000064e2 <CLCD_voidSendString>:

void CLCD_voidSendString(u8 * Copy_u8pu8Array)
{
    64e2:	df 93       	push	r29
    64e4:	cf 93       	push	r28
    64e6:	00 d0       	rcall	.+0      	; 0x64e8 <CLCD_voidSendString+0x6>
    64e8:	0f 92       	push	r0
    64ea:	cd b7       	in	r28, 0x3d	; 61
    64ec:	de b7       	in	r29, 0x3e	; 62
    64ee:	9b 83       	std	Y+3, r25	; 0x03
    64f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    64f2:	19 82       	std	Y+1, r1	; 0x01
    64f4:	0e c0       	rjmp	.+28     	; 0x6512 <CLCD_voidSendString+0x30>
	while(Copy_u8pu8Array[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_u8pu8Array[Local_u8Counter]);
    64f6:	89 81       	ldd	r24, Y+1	; 0x01
    64f8:	28 2f       	mov	r18, r24
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	8a 81       	ldd	r24, Y+2	; 0x02
    64fe:	9b 81       	ldd	r25, Y+3	; 0x03
    6500:	fc 01       	movw	r30, r24
    6502:	e2 0f       	add	r30, r18
    6504:	f3 1f       	adc	r31, r19
    6506:	80 81       	ld	r24, Z
    6508:	0e 94 af 30 	call	0x615e	; 0x615e <CLCD_voidSendData>

		Local_u8Counter++;
    650c:	89 81       	ldd	r24, Y+1	; 0x01
    650e:	8f 5f       	subi	r24, 0xFF	; 255
    6510:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(u8 * Copy_u8pu8Array)
{
	u8 Local_u8Counter=0;
	while(Copy_u8pu8Array[Local_u8Counter] != '\0')
    6512:	89 81       	ldd	r24, Y+1	; 0x01
    6514:	28 2f       	mov	r18, r24
    6516:	30 e0       	ldi	r19, 0x00	; 0
    6518:	8a 81       	ldd	r24, Y+2	; 0x02
    651a:	9b 81       	ldd	r25, Y+3	; 0x03
    651c:	fc 01       	movw	r30, r24
    651e:	e2 0f       	add	r30, r18
    6520:	f3 1f       	adc	r31, r19
    6522:	80 81       	ld	r24, Z
    6524:	88 23       	and	r24, r24
    6526:	39 f7       	brne	.-50     	; 0x64f6 <CLCD_voidSendString+0x14>

		Local_u8Counter++;

	}

}
    6528:	0f 90       	pop	r0
    652a:	0f 90       	pop	r0
    652c:	0f 90       	pop	r0
    652e:	cf 91       	pop	r28
    6530:	df 91       	pop	r29
    6532:	08 95       	ret

00006534 <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(u32 Copy_u32Num,u8 Copy_u8X,u8 Copy_u8Y)
{
    6534:	df 93       	push	r29
    6536:	cf 93       	push	r28
    6538:	cd b7       	in	r28, 0x3d	; 61
    653a:	de b7       	in	r29, 0x3e	; 62
    653c:	29 97       	sbiw	r28, 0x09	; 9
    653e:	0f b6       	in	r0, 0x3f	; 63
    6540:	f8 94       	cli
    6542:	de bf       	out	0x3e, r29	; 62
    6544:	0f be       	out	0x3f, r0	; 63
    6546:	cd bf       	out	0x3d, r28	; 61
    6548:	9f 83       	std	Y+7, r25	; 0x07
    654a:	8e 83       	std	Y+6, r24	; 0x06
    654c:	68 87       	std	Y+8, r22	; 0x08
    654e:	49 87       	std	Y+9, r20	; 0x09

	u8 Local_u8Rem=0,Local_u8Counter=0;
    6550:	1d 82       	std	Y+5, r1	; 0x05
    6552:	1c 82       	std	Y+4, r1	; 0x04
	u32 Local_u32Num=Copy_u32Num;
    6554:	8e 81       	ldd	r24, Y+6	; 0x06
    6556:	9f 81       	ldd	r25, Y+7	; 0x07
    6558:	9b 83       	std	Y+3, r25	; 0x03
    655a:	8a 83       	std	Y+2, r24	; 0x02


	do{

		Local_u32Num/=10;
    655c:	8a 81       	ldd	r24, Y+2	; 0x02
    655e:	9b 81       	ldd	r25, Y+3	; 0x03
    6560:	2a e0       	ldi	r18, 0x0A	; 10
    6562:	30 e0       	ldi	r19, 0x00	; 0
    6564:	b9 01       	movw	r22, r18
    6566:	0e 94 1d 33 	call	0x663a	; 0x663a <__udivmodhi4>
    656a:	cb 01       	movw	r24, r22
    656c:	9b 83       	std	Y+3, r25	; 0x03
    656e:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Counter++;
    6570:	8c 81       	ldd	r24, Y+4	; 0x04
    6572:	8f 5f       	subi	r24, 0xFF	; 255
    6574:	8c 83       	std	Y+4, r24	; 0x04

	}
	while(Local_u32Num!=0);
    6576:	8a 81       	ldd	r24, Y+2	; 0x02
    6578:	9b 81       	ldd	r25, Y+3	; 0x03
    657a:	00 97       	sbiw	r24, 0x00	; 0
    657c:	79 f7       	brne	.-34     	; 0x655c <CLCD_voidSendNumber+0x28>

	for(u8 i=Local_u8Counter;i>0;i--)
    657e:	8c 81       	ldd	r24, Y+4	; 0x04
    6580:	89 83       	std	Y+1, r24	; 0x01
    6582:	1f c0       	rjmp	.+62     	; 0x65c2 <CLCD_voidSendNumber+0x8e>
	{

		Local_u8Rem=Copy_u32Num%10;
    6584:	8e 81       	ldd	r24, Y+6	; 0x06
    6586:	9f 81       	ldd	r25, Y+7	; 0x07
    6588:	2a e0       	ldi	r18, 0x0A	; 10
    658a:	30 e0       	ldi	r19, 0x00	; 0
    658c:	b9 01       	movw	r22, r18
    658e:	0e 94 1d 33 	call	0x663a	; 0x663a <__udivmodhi4>
    6592:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u32Num/=10;
    6594:	8e 81       	ldd	r24, Y+6	; 0x06
    6596:	9f 81       	ldd	r25, Y+7	; 0x07
    6598:	2a e0       	ldi	r18, 0x0A	; 10
    659a:	30 e0       	ldi	r19, 0x00	; 0
    659c:	b9 01       	movw	r22, r18
    659e:	0e 94 1d 33 	call	0x663a	; 0x663a <__udivmodhi4>
    65a2:	cb 01       	movw	r24, r22
    65a4:	9f 83       	std	Y+7, r25	; 0x07
    65a6:	8e 83       	std	Y+6, r24	; 0x06
		CLCD_voidGOTO(i+Copy_u8X,Copy_u8Y);
    65a8:	99 81       	ldd	r25, Y+1	; 0x01
    65aa:	88 85       	ldd	r24, Y+8	; 0x08
    65ac:	89 0f       	add	r24, r25
    65ae:	69 85       	ldd	r22, Y+9	; 0x09
    65b0:	0e 94 0b 32 	call	0x6416	; 0x6416 <CLCD_voidGOTO>
		CLCD_voidSendData((48+Local_u8Rem));
    65b4:	8d 81       	ldd	r24, Y+5	; 0x05
    65b6:	80 5d       	subi	r24, 0xD0	; 208
    65b8:	0e 94 af 30 	call	0x615e	; 0x615e <CLCD_voidSendData>
		Local_u8Counter++;

	}
	while(Local_u32Num!=0);

	for(u8 i=Local_u8Counter;i>0;i--)
    65bc:	89 81       	ldd	r24, Y+1	; 0x01
    65be:	81 50       	subi	r24, 0x01	; 1
    65c0:	89 83       	std	Y+1, r24	; 0x01
    65c2:	89 81       	ldd	r24, Y+1	; 0x01
    65c4:	88 23       	and	r24, r24
    65c6:	f1 f6       	brne	.-68     	; 0x6584 <CLCD_voidSendNumber+0x50>

	}



}
    65c8:	29 96       	adiw	r28, 0x09	; 9
    65ca:	0f b6       	in	r0, 0x3f	; 63
    65cc:	f8 94       	cli
    65ce:	de bf       	out	0x3e, r29	; 62
    65d0:	0f be       	out	0x3f, r0	; 63
    65d2:	cd bf       	out	0x3d, r28	; 61
    65d4:	cf 91       	pop	r28
    65d6:	df 91       	pop	r29
    65d8:	08 95       	ret

000065da <main>:
//#include "MCAL/USART/USART_INTERFACE.h"
#include "MCAL/TWI/TWI_interface.h"
//#include "HAL/EEPROM/EEPROM_interface.h"

int main(void)
{
    65da:	df 93       	push	r29
    65dc:	cf 93       	push	r28
    65de:	0f 92       	push	r0
    65e0:	cd b7       	in	r28, 0x3d	; 61
    65e2:	de b7       	in	r29, 0x3e	; 62

//
CLCD_voidInit();
    65e4:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <CLCD_voidInit>

DIO_voidSetPortDirection(DIO_PORTA,DIO_OUTPUT);
    65e8:	80 e0       	ldi	r24, 0x00	; 0
    65ea:	61 e0       	ldi	r22, 0x01	; 1
    65ec:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <DIO_voidSetPortDirection>
DIO_voidSetPortDirection(DIO_PORTC,DIO_OUTPUT);
    65f0:	82 e0       	ldi	r24, 0x02	; 2
    65f2:	61 e0       	ldi	r22, 0x01	; 1
    65f4:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <DIO_voidSetPortDirection>

TWI_voidMasterInit(1);
    65f8:	81 e0       	ldi	r24, 0x01	; 1
    65fa:	0e 94 0e 0c 	call	0x181c	; 0x181c <TWI_voidMasterInit>
u8 data2;

while(1)
{

	EEPROM_voidSendDataByte(0,232);
    65fe:	80 e0       	ldi	r24, 0x00	; 0
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	68 ee       	ldi	r22, 0xE8	; 232
    6604:	70 e0       	ldi	r23, 0x00	; 0
    6606:	0e 94 c2 2b 	call	0x5784	; 0x5784 <EEPROM_voidSendDataByte>
//	 DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_HIGH);
	EEPROM_voidReadDataByte(0,&data2);
    660a:	80 e0       	ldi	r24, 0x00	; 0
    660c:	90 e0       	ldi	r25, 0x00	; 0
    660e:	9e 01       	movw	r18, r28
    6610:	2f 5f       	subi	r18, 0xFF	; 255
    6612:	3f 4f       	sbci	r19, 0xFF	; 255
    6614:	b9 01       	movw	r22, r18
    6616:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <EEPROM_voidReadDataByte>
	//DIO_voidSetPinValue(DIO_PORTC,DIO_PIN1,DIO_HIGH);
	CLCD_voidSendNumber(data2,1,1);
    661a:	89 81       	ldd	r24, Y+1	; 0x01
    661c:	88 2f       	mov	r24, r24
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	61 e0       	ldi	r22, 0x01	; 1
    6622:	41 e0       	ldi	r20, 0x01	; 1
    6624:	0e 94 9a 32 	call	0x6534	; 0x6534 <CLCD_voidSendNumber>

	//CLCD_voidSendData(data2);

	if(data2==12)
    6628:	89 81       	ldd	r24, Y+1	; 0x01
    662a:	8c 30       	cpi	r24, 0x0C	; 12
    662c:	41 f7       	brne	.-48     	; 0x65fe <main+0x24>
	{
		DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);
    662e:	82 e0       	ldi	r24, 0x02	; 2
    6630:	63 e0       	ldi	r22, 0x03	; 3
    6632:	41 e0       	ldi	r20, 0x01	; 1
    6634:	0e 94 88 14 	call	0x2910	; 0x2910 <DIO_voidSetPinValue>
    6638:	e2 cf       	rjmp	.-60     	; 0x65fe <main+0x24>

0000663a <__udivmodhi4>:
    663a:	aa 1b       	sub	r26, r26
    663c:	bb 1b       	sub	r27, r27
    663e:	51 e1       	ldi	r21, 0x11	; 17
    6640:	07 c0       	rjmp	.+14     	; 0x6650 <__udivmodhi4_ep>

00006642 <__udivmodhi4_loop>:
    6642:	aa 1f       	adc	r26, r26
    6644:	bb 1f       	adc	r27, r27
    6646:	a6 17       	cp	r26, r22
    6648:	b7 07       	cpc	r27, r23
    664a:	10 f0       	brcs	.+4      	; 0x6650 <__udivmodhi4_ep>
    664c:	a6 1b       	sub	r26, r22
    664e:	b7 0b       	sbc	r27, r23

00006650 <__udivmodhi4_ep>:
    6650:	88 1f       	adc	r24, r24
    6652:	99 1f       	adc	r25, r25
    6654:	5a 95       	dec	r21
    6656:	a9 f7       	brne	.-22     	; 0x6642 <__udivmodhi4_loop>
    6658:	80 95       	com	r24
    665a:	90 95       	com	r25
    665c:	bc 01       	movw	r22, r24
    665e:	cd 01       	movw	r24, r26
    6660:	08 95       	ret

00006662 <__udivmodsi4>:
    6662:	a1 e2       	ldi	r26, 0x21	; 33
    6664:	1a 2e       	mov	r1, r26
    6666:	aa 1b       	sub	r26, r26
    6668:	bb 1b       	sub	r27, r27
    666a:	fd 01       	movw	r30, r26
    666c:	0d c0       	rjmp	.+26     	; 0x6688 <__udivmodsi4_ep>

0000666e <__udivmodsi4_loop>:
    666e:	aa 1f       	adc	r26, r26
    6670:	bb 1f       	adc	r27, r27
    6672:	ee 1f       	adc	r30, r30
    6674:	ff 1f       	adc	r31, r31
    6676:	a2 17       	cp	r26, r18
    6678:	b3 07       	cpc	r27, r19
    667a:	e4 07       	cpc	r30, r20
    667c:	f5 07       	cpc	r31, r21
    667e:	20 f0       	brcs	.+8      	; 0x6688 <__udivmodsi4_ep>
    6680:	a2 1b       	sub	r26, r18
    6682:	b3 0b       	sbc	r27, r19
    6684:	e4 0b       	sbc	r30, r20
    6686:	f5 0b       	sbc	r31, r21

00006688 <__udivmodsi4_ep>:
    6688:	66 1f       	adc	r22, r22
    668a:	77 1f       	adc	r23, r23
    668c:	88 1f       	adc	r24, r24
    668e:	99 1f       	adc	r25, r25
    6690:	1a 94       	dec	r1
    6692:	69 f7       	brne	.-38     	; 0x666e <__udivmodsi4_loop>
    6694:	60 95       	com	r22
    6696:	70 95       	com	r23
    6698:	80 95       	com	r24
    669a:	90 95       	com	r25
    669c:	9b 01       	movw	r18, r22
    669e:	ac 01       	movw	r20, r24
    66a0:	bd 01       	movw	r22, r26
    66a2:	cf 01       	movw	r24, r30
    66a4:	08 95       	ret

000066a6 <__prologue_saves__>:
    66a6:	2f 92       	push	r2
    66a8:	3f 92       	push	r3
    66aa:	4f 92       	push	r4
    66ac:	5f 92       	push	r5
    66ae:	6f 92       	push	r6
    66b0:	7f 92       	push	r7
    66b2:	8f 92       	push	r8
    66b4:	9f 92       	push	r9
    66b6:	af 92       	push	r10
    66b8:	bf 92       	push	r11
    66ba:	cf 92       	push	r12
    66bc:	df 92       	push	r13
    66be:	ef 92       	push	r14
    66c0:	ff 92       	push	r15
    66c2:	0f 93       	push	r16
    66c4:	1f 93       	push	r17
    66c6:	cf 93       	push	r28
    66c8:	df 93       	push	r29
    66ca:	cd b7       	in	r28, 0x3d	; 61
    66cc:	de b7       	in	r29, 0x3e	; 62
    66ce:	ca 1b       	sub	r28, r26
    66d0:	db 0b       	sbc	r29, r27
    66d2:	0f b6       	in	r0, 0x3f	; 63
    66d4:	f8 94       	cli
    66d6:	de bf       	out	0x3e, r29	; 62
    66d8:	0f be       	out	0x3f, r0	; 63
    66da:	cd bf       	out	0x3d, r28	; 61
    66dc:	09 94       	ijmp

000066de <__epilogue_restores__>:
    66de:	2a 88       	ldd	r2, Y+18	; 0x12
    66e0:	39 88       	ldd	r3, Y+17	; 0x11
    66e2:	48 88       	ldd	r4, Y+16	; 0x10
    66e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    66e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    66e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    66ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    66ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    66ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    66f0:	b9 84       	ldd	r11, Y+9	; 0x09
    66f2:	c8 84       	ldd	r12, Y+8	; 0x08
    66f4:	df 80       	ldd	r13, Y+7	; 0x07
    66f6:	ee 80       	ldd	r14, Y+6	; 0x06
    66f8:	fd 80       	ldd	r15, Y+5	; 0x05
    66fa:	0c 81       	ldd	r16, Y+4	; 0x04
    66fc:	1b 81       	ldd	r17, Y+3	; 0x03
    66fe:	aa 81       	ldd	r26, Y+2	; 0x02
    6700:	b9 81       	ldd	r27, Y+1	; 0x01
    6702:	ce 0f       	add	r28, r30
    6704:	d1 1d       	adc	r29, r1
    6706:	0f b6       	in	r0, 0x3f	; 63
    6708:	f8 94       	cli
    670a:	de bf       	out	0x3e, r29	; 62
    670c:	0f be       	out	0x3f, r0	; 63
    670e:	cd bf       	out	0x3d, r28	; 61
    6710:	ed 01       	movw	r28, r26
    6712:	08 95       	ret

00006714 <_exit>:
    6714:	f8 94       	cli

00006716 <__stop_program>:
    6716:	ff cf       	rjmp	.-2      	; 0x6716 <__stop_program>
